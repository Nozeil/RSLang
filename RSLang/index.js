/*! For license information please see index.js.LICENSE.txt */
(()=>{var e={9669:(e,n,t)=>{e.exports=t(1609)},5448:(e,n,t)=>{"use strict";var r=t(4867),i=t(6026),o=t(4372),a=t(5327),s=t(4097),l=t(4109),c=t(7985),A=t(7874),d=t(2648),u=t(644),p=t(205);e.exports=function(e){return new Promise((function(n,t){var h,C=e.data,g=e.headers,f=e.responseType;function m(){e.cancelToken&&e.cancelToken.unsubscribe(h),e.signal&&e.signal.removeEventListener("abort",h)}r.isFormData(C)&&r.isStandardBrowserEnv()&&delete g["Content-Type"];var _=new XMLHttpRequest;if(e.auth){var w=e.auth.username||"",B=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";g.Authorization="Basic "+btoa(w+":"+B)}var b=s(e.baseURL,e.url);function v(){if(_){var r="getAllResponseHeaders"in _?l(_.getAllResponseHeaders()):null,o={data:f&&"text"!==f&&"json"!==f?_.response:_.responseText,status:_.status,statusText:_.statusText,headers:r,config:e,request:_};i((function(e){n(e),m()}),(function(e){t(e),m()}),o),_=null}}if(_.open(e.method.toUpperCase(),a(b,e.params,e.paramsSerializer),!0),_.timeout=e.timeout,"onloadend"in _?_.onloadend=v:_.onreadystatechange=function(){_&&4===_.readyState&&(0!==_.status||_.responseURL&&0===_.responseURL.indexOf("file:"))&&setTimeout(v)},_.onabort=function(){_&&(t(new d("Request aborted",d.ECONNABORTED,e,_)),_=null)},_.onerror=function(){t(new d("Network Error",d.ERR_NETWORK,e,_,_)),_=null},_.ontimeout=function(){var n=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||A;e.timeoutErrorMessage&&(n=e.timeoutErrorMessage),t(new d(n,r.clarifyTimeoutError?d.ETIMEDOUT:d.ECONNABORTED,e,_)),_=null},r.isStandardBrowserEnv()){var x=(e.withCredentials||c(b))&&e.xsrfCookieName?o.read(e.xsrfCookieName):void 0;x&&(g[e.xsrfHeaderName]=x)}"setRequestHeader"in _&&r.forEach(g,(function(e,n){void 0===C&&"content-type"===n.toLowerCase()?delete g[n]:_.setRequestHeader(n,e)})),r.isUndefined(e.withCredentials)||(_.withCredentials=!!e.withCredentials),f&&"json"!==f&&(_.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&_.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&_.upload&&_.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(h=function(e){_&&(t(!e||e&&e.type?new u:e),_.abort(),_=null)},e.cancelToken&&e.cancelToken.subscribe(h),e.signal&&(e.signal.aborted?h():e.signal.addEventListener("abort",h))),C||(C=null);var y=p(b);y&&-1===["http","https","file"].indexOf(y)?t(new d("Unsupported protocol "+y+":",d.ERR_BAD_REQUEST,e)):_.send(C)}))}},1609:(e,n,t)=>{"use strict";var r=t(4867),i=t(1849),o=t(321),a=t(7185),s=function e(n){var t=new o(n),s=i(o.prototype.request,t);return r.extend(s,o.prototype,t),r.extend(s,t),s.create=function(t){return e(a(n,t))},s}(t(5546));s.Axios=o,s.CanceledError=t(644),s.CancelToken=t(4972),s.isCancel=t(6502),s.VERSION=t(7288).version,s.toFormData=t(7675),s.AxiosError=t(2648),s.Cancel=s.CanceledError,s.all=function(e){return Promise.all(e)},s.spread=t(8713),s.isAxiosError=t(6268),e.exports=s,e.exports.default=s},4972:(e,n,t)=>{"use strict";var r=t(644);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var n;this.promise=new Promise((function(e){n=e}));var t=this;this.promise.then((function(e){if(t._listeners){var n,r=t._listeners.length;for(n=0;n<r;n++)t._listeners[n](e);t._listeners=null}})),this.promise.then=function(e){var n,r=new Promise((function(e){t.subscribe(e),n=e})).then(e);return r.cancel=function(){t.unsubscribe(n)},r},e((function(e){t.reason||(t.reason=new r(e),n(t.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},i.prototype.unsubscribe=function(e){if(this._listeners){var n=this._listeners.indexOf(e);-1!==n&&this._listeners.splice(n,1)}},i.source=function(){var e;return{token:new i((function(n){e=n})),cancel:e}},e.exports=i},644:(e,n,t)=>{"use strict";var r=t(2648);function i(e){r.call(this,null==e?"canceled":e,r.ERR_CANCELED),this.name="CanceledError"}t(4867).inherits(i,r,{__CANCEL__:!0}),e.exports=i},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,n,t)=>{"use strict";var r=t(4867),i=t(5327),o=t(782),a=t(3572),s=t(7185),l=t(4097),c=t(4875),A=c.validators;function d(e){this.defaults=e,this.interceptors={request:new o,response:new o}}d.prototype.request=function(e,n){"string"==typeof e?(n=n||{}).url=e:n=e||{},(n=s(this.defaults,n)).method?n.method=n.method.toLowerCase():this.defaults.method?n.method=this.defaults.method.toLowerCase():n.method="get";var t=n.transitional;void 0!==t&&c.assertOptions(t,{silentJSONParsing:A.transitional(A.boolean),forcedJSONParsing:A.transitional(A.boolean),clarifyTimeoutError:A.transitional(A.boolean)},!1);var r=[],i=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(n)||(i=i&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var o,l=[];if(this.interceptors.response.forEach((function(e){l.push(e.fulfilled,e.rejected)})),!i){var d=[a,void 0];for(Array.prototype.unshift.apply(d,r),d=d.concat(l),o=Promise.resolve(n);d.length;)o=o.then(d.shift(),d.shift());return o}for(var u=n;r.length;){var p=r.shift(),h=r.shift();try{u=p(u)}catch(e){h(e);break}}try{o=a(u)}catch(e){return Promise.reject(e)}for(;l.length;)o=o.then(l.shift(),l.shift());return o},d.prototype.getUri=function(e){e=s(this.defaults,e);var n=l(e.baseURL,e.url);return i(n,e.params,e.paramsSerializer)},r.forEach(["delete","get","head","options"],(function(e){d.prototype[e]=function(n,t){return this.request(s(t||{},{method:e,url:n,data:(t||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){function n(n){return function(t,r,i){return this.request(s(i||{},{method:e,headers:n?{"Content-Type":"multipart/form-data"}:{},url:t,data:r}))}}d.prototype[e]=n(),d.prototype[e+"Form"]=n(!0)})),e.exports=d},2648:(e,n,t)=>{"use strict";var r=t(4867);function i(e,n,t,r,i){Error.call(this),this.message=e,this.name="AxiosError",n&&(this.code=n),t&&(this.config=t),r&&(this.request=r),i&&(this.response=i)}r.inherits(i,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var o=i.prototype,a={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(e){a[e]={value:e}})),Object.defineProperties(i,a),Object.defineProperty(o,"isAxiosError",{value:!0}),i.from=function(e,n,t,a,s,l){var c=Object.create(o);return r.toFlatObject(e,c,(function(e){return e!==Error.prototype})),i.call(c,e.message,n,t,a,s),c.name=e.name,l&&Object.assign(c,l),c},e.exports=i},782:(e,n,t)=>{"use strict";var r=t(4867);function i(){this.handlers=[]}i.prototype.use=function(e,n,t){return this.handlers.push({fulfilled:e,rejected:n,synchronous:!!t&&t.synchronous,runWhen:t?t.runWhen:null}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){r.forEach(this.handlers,(function(n){null!==n&&e(n)}))},e.exports=i},4097:(e,n,t)=>{"use strict";var r=t(1793),i=t(7303);e.exports=function(e,n){return e&&!r(n)?i(e,n):n}},3572:(e,n,t)=>{"use strict";var r=t(4867),i=t(8527),o=t(6502),a=t(5546),s=t(644);function l(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new s}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=i.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete e.headers[n]})),(e.adapter||a.adapter)(e).then((function(n){return l(e),n.data=i.call(e,n.data,n.headers,e.transformResponse),n}),(function(n){return o(n)||(l(e),n&&n.response&&(n.response.data=i.call(e,n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)}))}},7185:(e,n,t)=>{"use strict";var r=t(4867);e.exports=function(e,n){n=n||{};var t={};function i(e,n){return r.isPlainObject(e)&&r.isPlainObject(n)?r.merge(e,n):r.isPlainObject(n)?r.merge({},n):r.isArray(n)?n.slice():n}function o(t){return r.isUndefined(n[t])?r.isUndefined(e[t])?void 0:i(void 0,e[t]):i(e[t],n[t])}function a(e){if(!r.isUndefined(n[e]))return i(void 0,n[e])}function s(t){return r.isUndefined(n[t])?r.isUndefined(e[t])?void 0:i(void 0,e[t]):i(void 0,n[t])}function l(t){return t in n?i(e[t],n[t]):t in e?i(void 0,e[t]):void 0}var c={url:a,method:a,data:a,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:l};return r.forEach(Object.keys(e).concat(Object.keys(n)),(function(e){var n=c[e]||o,i=n(e);r.isUndefined(i)&&n!==l||(t[e]=i)})),t}},6026:(e,n,t)=>{"use strict";var r=t(2648);e.exports=function(e,n,t){var i=t.config.validateStatus;t.status&&i&&!i(t.status)?n(new r("Request failed with status code "+t.status,[r.ERR_BAD_REQUEST,r.ERR_BAD_RESPONSE][Math.floor(t.status/100)-4],t.config,t.request,t)):e(t)}},8527:(e,n,t)=>{"use strict";var r=t(4867),i=t(5546);e.exports=function(e,n,t){var o=this||i;return r.forEach(t,(function(t){e=t.call(o,e,n)})),e}},5546:(e,n,t)=>{"use strict";var r=t(4867),i=t(6016),o=t(2648),a=t(7874),s=t(7675),l={"Content-Type":"application/x-www-form-urlencoded"};function c(e,n){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=n)}var A,d={transitional:a,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(A=t(5448)),A),transformRequest:[function(e,n){if(i(n,"Accept"),i(n,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e))return e;if(r.isArrayBufferView(e))return e.buffer;if(r.isURLSearchParams(e))return c(n,"application/x-www-form-urlencoded;charset=utf-8"),e.toString();var t,o=r.isObject(e),a=n&&n["Content-Type"];if((t=r.isFileList(e))||o&&"multipart/form-data"===a){var l=this.env&&this.env.FormData;return s(t?{"files[]":e}:e,l&&new l)}return o||"application/json"===a?(c(n,"application/json"),function(e,n,t){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var n=this.transitional||d.transitional,t=n&&n.silentJSONParsing,i=n&&n.forcedJSONParsing,a=!t&&"json"===this.responseType;if(a||i&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(a){if("SyntaxError"===e.name)throw o.from(e,o.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:t(1623)},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){d.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){d.headers[e]=r.merge(l)})),e.exports=d},7874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},7288:e=>{e.exports={version:"0.27.2"}},1849:e=>{"use strict";e.exports=function(e,n){return function(){for(var t=new Array(arguments.length),r=0;r<t.length;r++)t[r]=arguments[r];return e.apply(n,t)}}},5327:(e,n,t)=>{"use strict";var r=t(4867);function i(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,n,t){if(!n)return e;var o;if(t)o=t(n);else if(r.isURLSearchParams(n))o=n.toString();else{var a=[];r.forEach(n,(function(e,n){null!=e&&(r.isArray(e)?n+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(i(n)+"="+i(e))})))})),o=a.join("&")}if(o){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},7303:e=>{"use strict";e.exports=function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e}},4372:(e,n,t)=>{"use strict";var r=t(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,n,t,i,o,a){var s=[];s.push(e+"="+encodeURIComponent(n)),r.isNumber(t)&&s.push("expires="+new Date(t).toGMTString()),r.isString(i)&&s.push("path="+i),r.isString(o)&&s.push("domain="+o),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},6268:(e,n,t)=>{"use strict";var r=t(4867);e.exports=function(e){return r.isObject(e)&&!0===e.isAxiosError}},7985:(e,n,t)=>{"use strict";var r=t(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,n=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");function i(e){var r=e;return n&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return e=i(window.location.href),function(n){var t=r.isString(n)?i(n):n;return t.protocol===e.protocol&&t.host===e.host}}():function(){return!0}},6016:(e,n,t)=>{"use strict";var r=t(4867);e.exports=function(e,n){r.forEach(e,(function(t,r){r!==n&&r.toUpperCase()===n.toUpperCase()&&(e[n]=t,delete e[r])}))}},1623:e=>{e.exports=null},4109:(e,n,t)=>{"use strict";var r=t(4867),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var n,t,o,a={};return e?(r.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),n=r.trim(e.substr(0,o)).toLowerCase(),t=r.trim(e.substr(o+1)),n){if(a[n]&&i.indexOf(n)>=0)return;a[n]="set-cookie"===n?(a[n]?a[n]:[]).concat([t]):a[n]?a[n]+", "+t:t}})),a):a}},205:e=>{"use strict";e.exports=function(e){var n=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return n&&n[1]||""}},8713:e=>{"use strict";e.exports=function(e){return function(n){return e.apply(null,n)}}},7675:(e,n,t)=>{"use strict";var r=t(4867);e.exports=function(e,n){n=n||new FormData;var t=[];function i(e){return null===e?"":r.isDate(e)?e.toISOString():r.isArrayBuffer(e)||r.isTypedArray(e)?"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}return function e(o,a){if(r.isPlainObject(o)||r.isArray(o)){if(-1!==t.indexOf(o))throw Error("Circular reference detected in "+a);t.push(o),r.forEach(o,(function(t,o){if(!r.isUndefined(t)){var s,l=a?a+"."+o:o;if(t&&!a&&"object"==typeof t)if(r.endsWith(o,"{}"))t=JSON.stringify(t);else if(r.endsWith(o,"[]")&&(s=r.toArray(t)))return void s.forEach((function(e){!r.isUndefined(e)&&n.append(l,i(e))}));e(t,l)}})),t.pop()}else n.append(a,i(o))}(e),n}},4875:(e,n,t)=>{"use strict";var r=t(7288).version,i=t(2648),o={};["object","boolean","number","function","string","symbol"].forEach((function(e,n){o[e]=function(t){return typeof t===e||"a"+(n<1?"n ":" ")+e}}));var a={};o.transitional=function(e,n,t){function o(e,n){return"[Axios v"+r+"] Transitional option '"+e+"'"+n+(t?". "+t:"")}return function(t,r,s){if(!1===e)throw new i(o(r," has been removed"+(n?" in "+n:"")),i.ERR_DEPRECATED);return n&&!a[r]&&(a[r]=!0,console.warn(o(r," has been deprecated since v"+n+" and will be removed in the near future"))),!e||e(t,r,s)}},e.exports={assertOptions:function(e,n,t){if("object"!=typeof e)throw new i("options must be an object",i.ERR_BAD_OPTION_VALUE);for(var r=Object.keys(e),o=r.length;o-- >0;){var a=r[o],s=n[a];if(s){var l=e[a],c=void 0===l||s(l,a,e);if(!0!==c)throw new i("option "+a+" must be "+c,i.ERR_BAD_OPTION_VALUE)}else if(!0!==t)throw new i("Unknown option "+a,i.ERR_BAD_OPTION)}},validators:o}},4867:(e,n,t)=>{"use strict";var r,i=t(1849),o=Object.prototype.toString,a=(r=Object.create(null),function(e){var n=o.call(e);return r[n]||(r[n]=n.slice(8,-1).toLowerCase())});function s(e){return e=e.toLowerCase(),function(n){return a(n)===e}}function l(e){return Array.isArray(e)}function c(e){return void 0===e}var A=s("ArrayBuffer");function d(e){return null!==e&&"object"==typeof e}function u(e){if("object"!==a(e))return!1;var n=Object.getPrototypeOf(e);return null===n||n===Object.prototype}var p=s("Date"),h=s("File"),C=s("Blob"),g=s("FileList");function f(e){return"[object Function]"===o.call(e)}var m=s("URLSearchParams");function _(e,n){if(null!=e)if("object"!=typeof e&&(e=[e]),l(e))for(var t=0,r=e.length;t<r;t++)n.call(null,e[t],t,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&n.call(null,e[i],i,e)}var w,B=(w="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(e){return w&&e instanceof w});e.exports={isArray:l,isArrayBuffer:A,isBuffer:function(e){return null!==e&&!c(e)&&null!==e.constructor&&!c(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){var n="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||o.call(e)===n||f(e.toString)&&e.toString()===n)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&A(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:d,isPlainObject:u,isUndefined:c,isDate:p,isFile:h,isBlob:C,isFunction:f,isStream:function(e){return d(e)&&f(e.pipe)},isURLSearchParams:m,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:_,merge:function e(){var n={};function t(t,r){u(n[r])&&u(t)?n[r]=e(n[r],t):u(t)?n[r]=e({},t):l(t)?n[r]=t.slice():n[r]=t}for(var r=0,i=arguments.length;r<i;r++)_(arguments[r],t);return n},extend:function(e,n,t){return _(n,(function(n,r){e[r]=t&&"function"==typeof n?i(n,t):n})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,n,t,r){e.prototype=Object.create(n.prototype,r),e.prototype.constructor=e,t&&Object.assign(e.prototype,t)},toFlatObject:function(e,n,t){var r,i,o,a={};n=n||{};do{for(i=(r=Object.getOwnPropertyNames(e)).length;i-- >0;)a[o=r[i]]||(n[o]=e[o],a[o]=!0);e=Object.getPrototypeOf(e)}while(e&&(!t||t(e,n))&&e!==Object.prototype);return n},kindOf:a,kindOfTest:s,endsWith:function(e,n,t){e=String(e),(void 0===t||t>e.length)&&(t=e.length),t-=n.length;var r=e.indexOf(n,t);return-1!==r&&r===t},toArray:function(e){if(!e)return null;var n=e.length;if(c(n))return null;for(var t=new Array(n);n-- >0;)t[n]=e[n];return t},isTypedArray:B,isFileList:g}},7192:(e,n,t)=>{"use strict";t.d(n,{Z:()=>S});var r=t(7537),i=t.n(r),o=t(3645),a=t.n(o),s=t(1667),l=t.n(s),c=new URL(t(1201),t.b),A=new URL(t(5391),t.b),d=new URL(t(6333),t.b),u=new URL(t(9862),t.b),p=new URL(t(4281),t.b),h=new URL(t(1537),t.b),C=new URL(t(6241),t.b),g=new URL(t(3427),t.b),f=new URL(t(6126),t.b),m=a()(i());m.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto+Flex:opsz,wght@8..144,300;8..144,400&display=swap);"]);var _=l()(c),w=l()(A),B=l()(d),b=l()(u),v=l()(p),x=l()(h),y=l()(C),k=l()(g),E=l()(f);m.push([e.id,'*{padding:0;margin:0;border:0}*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}:focus,:active{outline:none}a:focus,a:active{outline:none}nav,footer,header,aside{display:block}html,body{height:100%;width:100%;font-size:100%;line-height:1;font-size:14px;-ms-text-size-adjust:100%;-moz-text-size-adjust:100%;-webkit-text-size-adjust:100%}input,button,textarea{font-family:inherit}input::-ms-clear{display:none}button{cursor:pointer}button::-moz-focus-inner{padding:0;border:0}a,a:visited{text-decoration:none}a:hover{text-decoration:none}ul li{list-style:none}img{vertical-align:top}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}.menu{display:grid;grid-auto-flow:column;justify-items:center;grid-column:3/4}.menu__item{display:flex;align-items:center}.menu__item-link{text-decoration:none;text-transform:uppercase;padding:0px 10px;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#ddd;line-height:5rem}.menu__item-link:hover{background-color:#517aff}.menu__item-link.selected{background-color:#517aff}.menu__item-link.selected:hover{background-color:#95a8e7}.scope-card{padding:30px 20px;display:flex;flex-direction:column;align-items:center;height:100%;width:100%;gap:20px;border:1px solid silver;border-radius:5px;box-shadow:1px 1px 5px #222c4b}.scope-card__img{width:100px;height:100px}.scope-card__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.01em;color:#ddd;line-height:3.5rem;text-align:center}.scope-card__text{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:2rem;letter-spacing:.01em;color:#ddd;line-height:2.5rem;text-align:justify}.member-card{height:100%;border:1px solid #a3a3a3;border-radius:5px;display:flex;flex-direction:column;align-items:center;gap:10px;padding:30px 20px;box-shadow:1px 1px 5px #222c4b}.member-card__photo{width:150px;height:150px}.member-card__role{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.5rem}.member-card__name{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.member-card__contribution{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.7rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem;flex:1 1 auto;text-align:justify}.member-card__github{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.member-card__github-img{width:30px;height:30px}.member-card__github-nickname{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.section-title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:5rem;letter-spacing:.01em;color:#3a56b1;line-height:5rem}.word{display:grid;width:100%;height:100%;grid-template:100px auto auto/1fr;border-radius:20px;padding:20px 10px;transition:.1s all}.word:hover{transform:translateY(2px);transition:.1s all;box-shadow:1px 1px 3px #222c4b}.word.hard-word{background-color:#fa9c21}.word.known-word{background-color:#187a0f}.word.known-word .word__word,.word.known-word .word__example,.word.known-word .word__mean{color:#000}.word.known-word .word__transcription,.word.known-word .word__translation,.word.known-word .word__example-transl,.word.known-word .word__mean-transl{color:#494949}.word__wrap{grid-column:1/2;grid-row:1/2;padding:5px;display:grid;grid-template:40px 40px/1fr 30px}.word__word-full{grid-column:1/2;grid-row:1/2}.word__word{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.word__transcription{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.word__play{grid-column:2/3;grid-row:1/2;width:30px;height:30px}.word__translation{grid-column:1/3;grid-row:2/3;font-family:"Philosopher";font-style:normal;font-weight:400;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.word__image-wrap{grid-column:1/2;grid-row:2/3}.word__image-wrap img{width:100%;height:100%;object-fit:contain}.word__examples{grid-column:1/2;grid-row:3/4;display:grid;grid-template:repeat(4, auto)/1fr 50px;padding:5px}.word__example{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#3a56b1;line-height:2rem;grid-column:1/2;grid-row:1/2}.word__example-play{width:30px;height:30px;grid-column:2/3;grid-row:1/2;align-self:center;justify-self:center}.word__example-transl{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#777;line-height:2rem;grid-column:1/3;grid-row:3/4}.word__mean{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#3a56b1;line-height:2rem;grid-column:1/2;grid-row:4/5}.word__mean-transl{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#777;line-height:2rem;grid-column:1/3;grid-row:5/6}.word__mean-play{width:30px;height:30px;grid-column:2/3;grid-row:4/5;align-self:center;justify-self:center}.play-btn{transition:.1s all}.play-btn:hover{transform:scale(1.2);transition:.1s all}.pagination{width:450px;display:grid;grid-column:2/3;grid-row:1/2;grid-template:50px/repeat(9, 50px);gap:2px;justify-self:center;padding:30px 0px}.pagination__link{margin:auto;display:flex;align-items:center;justify-content:center;width:40px;height:40px;border:1px solid #a8a8a8;border-radius:7px;transition:.2s all;font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.pagination__link:hover{box-shadow:2px 2px 5px #222c4b;transform:translateY(1px);transition:.1s all}.pagination__link.selected{background-color:#fdba63;font-weight:600}.word{display:grid;width:100%;height:100%;grid-template:100px auto auto/1fr;border-radius:20px;padding:20px 10px;transition:.1s all}.word:hover{transform:translateY(2px);transition:.1s all;box-shadow:1px 1px 3px #222c4b}.word.hard-word{background-color:#fa9c21}.word.known-word{background-color:#187a0f}.word.known-word .word__word,.word.known-word .word__example,.word.known-word .word__mean{color:#000}.word.known-word .word__transcription,.word.known-word .word__translation,.word.known-word .word__example-transl,.word.known-word .word__mean-transl{color:#494949}.word__wrap{grid-column:1/2;grid-row:1/2;padding:5px;display:grid;grid-template:40px 40px/1fr 30px}.word__word-full{grid-column:1/2;grid-row:1/2}.word__word{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.word__transcription{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.word__play{grid-column:2/3;grid-row:1/2;width:30px;height:30px}.word__translation{grid-column:1/3;grid-row:2/3;font-family:"Philosopher";font-style:normal;font-weight:400;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.word__image-wrap{grid-column:1/2;grid-row:2/3}.word__image-wrap img{width:100%;height:100%;object-fit:contain}.word__examples{grid-column:1/2;grid-row:3/4;display:grid;grid-template:repeat(4, auto)/1fr 50px;padding:5px}.word__example{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#3a56b1;line-height:2rem;grid-column:1/2;grid-row:1/2}.word__example-play{width:30px;height:30px;grid-column:2/3;grid-row:1/2;align-self:center;justify-self:center}.word__example-transl{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#777;line-height:2rem;grid-column:1/3;grid-row:3/4}.word__mean{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#3a56b1;line-height:2rem;grid-column:1/2;grid-row:4/5}.word__mean-transl{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#777;line-height:2rem;grid-column:1/3;grid-row:5/6}.word__mean-play{width:30px;height:30px;grid-column:2/3;grid-row:4/5;align-self:center;justify-self:center}.play-btn{transition:.1s all}.play-btn:hover{transform:scale(1.2);transition:.1s all}.modal{background-color:#f0f0f0}.modal .modal__form{background-color:#f0f0f0}.game-panel{width:100%;justify-self:center;align-items:center;display:grid;grid-template:150px/repeat(4, 1fr);border-radius:20px;gap:10px}.game-panel__link{width:150px;height:50px;background-color:#3a4b83;color:#ddd;display:flex;justify-content:center;align-items:center;border-radius:5px;box-shadow:3px 3px 7px #222c4b;transition:.2s all}.game-panel__link:hover{transform:translateY(2px);transition:.2s all}.game-panel :nth-child(1){grid-column:2/3;margin:auto}.game-panel :nth-child(2){grid-column:3/4;margin:auto}.popup{position:fixed;width:100%;height:100%;background-color:rgba(0,0,0,.5019607843);top:0;left:0;display:flex;justify-content:center;align-items:center;overflow-y:auto;overflow-x:hidden;z-index:20}.popup[id=message]{opacity:0;visibility:hidden;transition:all .8s ease 0s}.popup[id=message] .popup__content{max-width:800px;width:80%}@media(max-width: 950px){.popup[id=message] .popup__content{width:100%}}@media(max-width: 750px){.popup[id=message] h2{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}}@media(max-width: 600px){.popup[id=message] h2{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1rem;letter-spacing:.01em;color:#3a56b1;line-height:1.1rem}}.popup[id=game-stat]{opacity:0;visibility:hidden;transition:all .8s ease 0s}.popup[id=game-stat] .popup__content{width:60%;height:600px;padding:20px}.popup__message{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem;text-align:justify}.popup.open{opacity:1;visibility:visible}.popup__content{display:flex;flex-direction:column;align-items:center;gap:30px;width:100%;background-color:#f0f0f0;color:#3a56b1;padding:30px;border:3px solid #3a4b83;border-radius:20px;box-shadow:5px 5px 15px rgba(7,58,224,.5019607843);position:relative;visibility:hidden;opacity:0;transform:perspective(600px) translate(0px, -100%) rotateX(45deg);transition:all .8s ease 0s}.popup.open .popup__content{transform:perspective(600px) translate(0px, 0%) rotateX(0deg);visibility:visible;opacity:1;transition:all .8s ease 0s}.popup__area{position:absolute;width:100%;height:100%;top:0;left:0}.popup__body{min-height:100%;width:50%;display:flex;align-items:center;justify-content:center;padding:30px 10px}.popup__close{position:absolute;right:-40px;top:-40px}.popup__close img{width:48px;height:48px;transition:all .5s linear;background-color:#f0f0f0;border-radius:50%;border:3px solid #3a4b83}@media(max-width: 545px){.popup__close img{width:32px;height:32px;transition:all .2s linear}}.popup__close:hover img{transform:scale(1.2);transition:all .5s linear}.popup__close-btn{width:40%;height:4rem;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2.5rem;letter-spacing:.01em;color:#ddd;line-height:3.2rem;background-color:#3a4b83;border-radius:5px;box-shadow:2px 2px 5px #3a4b83;transition:all .1s linear}.popup__close-btn:hover{color:#fff}.popup__close-btn:active{transform:translateY(2px);transition:all .2s linear}.popup__title{margin:0 0 20px 0}.popup__title .popup__title-text{text-align:center;transition:all .2s linear;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2.5rem;letter-spacing:.01em;color:#3a56b1;line-height:3.2rem}@media(max-width: 545px){.popup__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem;transition:.2s linear}}@media(max-width: 445px){.popup__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1rem;letter-spacing:.01em;color:#3a56b1;line-height:1.2rem;transition:.2s linear}}.answer{display:flex;position:relative;justify-content:center;align-items:center;height:45px;border-radius:10px;box-shadow:2px 2px 5px #3a4b83;align-items:center;padding:0px 50px;width:100%;gap:10px;transition:.2s all;background-color:#f0f0f0}.answer__ok,.answer__fault{display:none;position:absolute;top:8px;left:10px;filter:drop-shadow(0 0 3px #3a4b83)}.answer__ok.visible,.answer__fault.visible{display:block}.answer:hover{box-shadow:3px 3px 7px #3a4b83;transition:.2s all}.answer:active{transition:.2s all;transform:translateY(3px)}.answer.active{transition:.2s all;transform:translateY(3px)}.answer.ok{background-color:#3bac3b}.answer.ok .answer__ok{display:block}.answer.fault{background-color:#c33}.answer.fault .answer__fault{display:block}.answer.hide-help .answer__help{display:none}.answer__text{grid-column:1/3;grid-row:1/2;justify-self:center;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#3a56b1;line-height:1rem}.answer__help{display:flex;width:30px;height:30px;position:absolute;top:8px;left:10px;align-items:center;justify-content:center;border-radius:50%;border:1px solid #3a4b83}.game-stat{max-height:100%;display:grid;grid-template:100px 1fr 50px 80px/1fr;gap:10px}.game-stat__about{grid-column:1/2;grid-row:1/2}.game-stat__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.06em;color:#3a56b1;line-height:4rem;text-align:center}.game-stat__result,.game-stat__result-val,.game-stat__serie,.game-stat__serie-val{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#3a56b1;line-height:3rem;text-align:center}.game-stat__container{padding:10px 0px;grid-column:1/2;grid-row:2/3;overflow:hidden;height:100%}.game-stat__slider{display:flex;width:200%;height:100%;padding:20px 0px;transition:1s all ease}.game-stat__slider.shift{transform:translateX(-50%);transition:1s all ease}.game-stat__item{width:100%;height:100%;display:flex;flex-direction:column;gap:15px;overflow:scroll}.game-stat #game-stat-common{display:grid;align-items:center;justify-items:center}.game-stat__percent{display:flex;align-items:center;justify-content:center;width:150px;height:150px;border:3px solid #3a4b83;border-radius:50%;box-shadow:2px 2px 5px #3a4b83;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.game-stat__el{display:flex;align-items:center;gap:10px;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.game-stat__el-play{width:100%;height:100%;display:flex;align-items:center;justify-content:flex-start;transition:.2s all ease;gap:10px}.game-stat__el-play:hover img{transform:scale(1.2);transition:.2s all ease}.game-stat__el-word{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.game-stat__pagination{grid-column:1/2;grid-row:3/4;display:flex;gap:20px;justify-content:center}.game-stat__pag-btn{width:20px;height:20px;background-color:#3a4b83;border-radius:50%;border:3px solid #3a4b83;box-shadow:1px 1px 3px #3a4b83;transition:.2s all ease}.game-stat__pag-btn:hover{background-color:#f0f0f0;transition:.2s all ease}.game-stat__pag-btn#game-stat-left,.game-stat__pag-btn#game-stat-right{background-color:#f0f0f0}.game-stat__pag-btn#game-stat-left.active-page,.game-stat__pag-btn#game-stat-right.active-page{background-color:#3a4b83}.game-stat__action{grid-column:1/2;grid-row:4/5;display:flex;justify-content:center;gap:10px}.game-stat__restart,.game-stat__game-select{width:40%}.game-stat__errors-words,.game-stat__rights-words{display:flex;flex-direction:column;padding:20px 10px}.stat-header{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.stat-separator{width:100%;height:3px;border:1px solid #3a4b83}.stat-separator.hide{display:none}.hide{display:none}.button{height:4rem;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2.5rem;letter-spacing:.01em;color:#ddd;line-height:3.2rem;background-color:#3a4b83;border-radius:5px;box-shadow:2px 2px 5px #3a4b83;transition:all .1s linear;justify-self:center;padding:0px 20px}.button:hover{color:#fff}.button:active{transform:translateY(2px);transition:all .2s linear}.regbtn{width:fit-content;padding:0 1rem;height:70px;background-color:#f0f0f0;border-radius:5px;box-shadow:3px 3px 7px #222c4b;transition:.2s all ease;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.01em;color:#3a56b1;line-height:4rem}.regbtn:hover{transform:translateY(2px);transition:.2s all ease}.timer{width:200px;height:200px;border-radius:50%;background-color:#f0f0f0;display:flex;justify-content:center;align-items:center;overflow:hidden;position:relative}.timer::before{content:"";position:absolute;top:0;left:0;width:50%;height:100%;z-index:3;background-color:#f0f0f0}.timer::after{content:"";position:absolute;top:0;right:0;width:50%;height:100%;z-index:3;background-color:#526cc4;visibility:hidden}.timer.start::before{animation:mask-left 30s steps(1, end) forwards}.timer.start::after{animation:mask-right 30s steps(1, end) forwards}.timer.start .timer__line{animation:line 30s linear forwards}.timer.start .timer__counter{animation:counter 30s steps(29, end) forwards}.timer__line{position:absolute;top:0;left:0;width:100%;height:100%;z-index:2}.timer__line::after{content:"";position:absolute;top:0;left:0;width:50%;height:100%;background-color:#526cc4}.timer__body{width:100px;height:100px;border-radius:50%;background-color:#3a4b83;text-align:center;overflow:hidden;z-index:4}.timer__counter span{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:50px;letter-spacing:.01em;color:#ddd;line-height:50px;display:flex;justify-content:center;align-items:center;height:100px}@keyframes counter{100%{transform:translate(0px, -2900px)}}@keyframes line{100%{transform:rotate(360deg)}}@keyframes mask-left{0%{visibility:visible}50%,100%{visibility:hidden}}@keyframes mask-right{0%{visibility:hidden}50%,100%{visibility:visible}}.game-stat-el{display:flex;flex-direction:column;justify-content:flex-start;padding:10px;border-radius:20px;box-shadow:2px 2px 5px #3a4b83;gap:5px;width:400px;position:relative;overflow:hidden;padding:20px 5px}.game-stat-el__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.01em;color:#3a56b1;line-height:3rem;padding:0px 17px}.game-stat-el__item{display:flex;align-items:center;gap:10px;padding:5px}.game-stat-el__item-text{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.game-stat-el__item-text span{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.game-stat-el__decor{position:absolute;right:-54%;bottom:-67%;width:400px;height:400px;border-radius:50%;background-color:rgba(58,75,131,.5019607843)}.handbook__title{height:fit-content;width:fit-content;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#c2c2c2;line-height:2rem;cursor:pointer;transition:.3s ease-in-out}.handbook__complicated-words-title{height:fit-content;width:fit-content;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#c2c2c2;line-height:2rem;cursor:pointer;border-left:5px solid #c2c2c2;padding-left:8px}.handbook__words-title{grid-area:words-title;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.handbook__card-subtitle{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1rem;letter-spacing:.01em;color:#3a56b1;line-height:1rem}.handbook__games-title{grid-area:games-title;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.handbook__game-title{width:100%;height:100%;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.8rem;letter-spacing:.01em;color:#3a56b1;line-height:1.8rem;text-align:center;line-height:150px;backdrop-filter:blur(4px);background-color:rgba(240,240,240,.8);border-radius:10px}.word-card-info__meaning-title,.word-card-info__example-title{font-weight:600;margin-bottom:5px}.word-card-info__statistic{display:flex;gap:20px}.sprint-statistic__title,.audio-call-statistic__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.2rem;letter-spacing:.01em;color:#3a56b1;line-height:1.2rem;margin-bottom:5px}.handbook__levels{display:flex;width:fit-content;height:fit-content;gap:10px}.handbook__level-card{display:flex;justify-content:center;align-items:center;width:50px;height:50px;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:1.5rem;border-radius:10px;background-color:#f0f0f0;cursor:pointer;transition:.3s ease-in-out}.handbook__games{display:grid;grid-area:games;grid-template-areas:"games-title ." "audio-call sprint";gap:10px}.handbook__audio-call{grid-area:audio-call;height:150px;cursor:pointer;background:20%/cover #f0f0f0 no-repeat url('+_+");border-radius:10px}.handbook__sprint{grid-area:sprint;height:150px;cursor:pointer;background:center/cover #f0f0f0 no-repeat url("+w+');border-radius:10px}.handbook__words{position:relative;display:grid;grid-area:words;grid-template-areas:"words-title words-title" "word-cards word-card-info" "words-pagination words-pagination";grid-auto-columns:3fr .5fr;gap:20px}.handbook__word-cards{display:grid;grid-template-columns:repeat(4, minmax(150px, 1fr));gap:10px;grid-area:word-cards;grid-auto-rows:100px;font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.2rem;letter-spacing:.01em;color:#3a56b1;line-height:1.2rem}.handbook__word-card{position:relative;display:flex;flex-direction:column;justify-content:center;align-items:center;cursor:pointer;width:100%;height:100px;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:1.5rem;border-radius:10px;background-color:#f0f0f0;text-align:center;flex-wrap:wrap;transition:.3s ease-in-out}.word-card-info{position:relative;display:flex;grid-area:word-card-info;justify-self:center;flex-direction:column;width:fit-content;min-height:540px;padding:15px;gap:10px;background-color:#f0f0f0;border-radius:10px;font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.2rem;letter-spacing:.01em;color:#3a56b1;line-height:1.2rem}.word-card-info__headings{position:absolute;top:5%;right:15px;padding:5px;font-weight:600;color:#3a56b1;transition:.3s ease-in-out}.word-card-info__img{border-radius:10px;width:400px;height:250px}.word-card-info__complicated-words-button,.word-card-info__learned-words-button,.word-card-info__remove-button{width:190px;height:30px;text-align:center;border-radius:15px;font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1rem;letter-spacing:.01em;color:#3a56b1;line-height:1rem;box-shadow:0 0 2px #898989;transition:.3s ease-in-out}.word-card-info__buttons{display:flex;justify-content:space-between}.word-card-info__play-audio-button{position:absolute;top:215px;left:24px;width:40px;height:40px;border-radius:50%;background:center/contain no-repeat url('+B+");box-shadow:0 0 2px #898989;transition:.3s ease-in-out}.words-pagination{grid-area:words-pagination;display:flex;justify-content:center;gap:10px}.words-pagination__next-button,.words-pagination__prev-button,.words-pagination__curr-page{width:40px;height:40px;border-radius:50%;box-shadow:0 0 2px #898989;transition:.3s ease-in-out}.words-pagination__next-button{background:center/20% #fff no-repeat url("+b+")}.words-pagination__prev-button{background:center/20% #fff no-repeat url("+v+')}.words-pagination__curr-page{position:relative;display:flex;justify-content:center;align-items:center;font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1rem;letter-spacing:.01em;color:#3a56b1;line-height:1rem}.words-pagination__next-button:disabled,.words-pagination__prev-button:disabled{box-shadow:none;pointer-events:none;background-color:#f5f5f5}.words-pagination__next-button:disabled{background:center/20% #fff no-repeat url('+x+")}.words-pagination__prev-button:disabled{background:center/20% #fff no-repeat url("+y+')}.wrapper{min-height:100%;width:100%;display:grid;grid-template:[start] "header" minmax(100px, auto) [row2] [row2] "content" 1fr [row3] [row3] "footer" minmax(100px, auto) [row-end]/1fr}.wrapper.hide-footer{grid-template:[start] "header" minmax(100px, auto) [row2] [row2] "content" 1fr [row-end]/1fr}.content{grid-area:content;display:grid;grid-template:1fr/1fr}.choice-panel{display:grid;justify-self:center;align-items:center;grid-column:1/3;grid-row:1/2;grid-template:1fr/1fr 90% 1fr;width:100%}.choice{display:grid;grid-column:2/3;grid-template:10rem auto 5rem/repeat(3, 1fr)}@media(max-width: 1300px){.choice{grid-template:10rem repeat(3, auto) 5rem/1fr 1fr 1fr}}.choice__wrap{justify-self:center}.choice__wrap.audio{grid-column:1/2;grid-row:2/3}@media(max-width: 1300px){.choice__wrap.audio{grid-column:2/3;grid-row:2/3}}.choice__wrap.sprint{grid-column:3/4;grid-row:2/3}@media(max-width: 1300px){.choice__wrap.sprint{grid-column:2/3;grid-row:4/5}}.choice__levels{justify-self:center;grid-column:2/3;grid-row:2/3}@media(max-width: 1300px){.choice__levels{grid-column:2/3;grid-row:3/4}}.choice__title{grid-column:1/4;grid-row:1/2;align-self:center;justify-self:center;padding:2rem}.choice__hint{grid-column:1/4;grid-row:3/4;align-self:center;justify-self:center}@media(max-width: 1300px){.choice__hint{grid-row:5/6}}.game{display:grid;justify-self:center;align-items:center;grid-column:1/3;grid-row:1/2;grid-template:auto 1fr 20%/1fr 90% 1fr;width:100%;padding-top:30px;max-height:70vh}.game__about{grid-column:2/3;grid-row:1/2;display:grid;grid-template:1fr 2fr/repeat(2, 1fr)}.game__help{grid-column:2/3;grid-row:2/3;justify-self:center;display:grid;grid-template:repeat(5, 1fr)/1fr}.game__help :nth-child(1){grid-column:1/3;grid-row:1/2}.game__help :nth-child(2){grid-column:1/3;grid-row:2/3}.game__help :nth-child(3){grid-column:1/3;grid-row:3/4}.game__help :nth-child(4){grid-column:1/3;grid-row:4/5}.game__help :nth-child(5){grid-column:1/3;grid-row:5/6}.game__help-item{align-self:center;justify-self:center}.game__help.sprint__help{grid-template:repeat(2, 1fr)/1fr}.game__start{grid-column:2/3;grid-row:3/4;display:grid}.game__title{grid-column:2/3;grid-row:1/2}.game__desc{grid-column:2/3;grid-row:2/3}.game__icon{grid-column:1/2;grid-row:1/3;justify-self:right}.game__audio{display:grid;grid-column:2/3;grid-row:1/2;justify-items:center;align-items:center}.game__answers{grid-column:2/3;grid-row:2/3;justify-items:center;align-items:center;display:grid;grid-template:1fr/1fr repeat(5, auto) 1fr;gap:10px}.game__answers :nth-child(1){grid-column:2/3}.game__answers :nth-child(2){grid-column:3/4}.game__answers :nth-child(3){grid-column:4/5}.game__answers :nth-child(4){grid-column:5/6}.game__answers :nth-child(5){grid-column:6/7}@media(max-width: 1300px){.game__answers{grid-template:repeat(5, 1fr)/1fr auto 1fr}.game__answers :nth-child(1){grid-column:2/3;grid-row:1/2}.game__answers :nth-child(2){grid-column:2/3;grid-row:2/3}.game__answers :nth-child(3){grid-column:2/3;grid-row:3/4}.game__answers :nth-child(4){grid-column:2/3;grid-row:4/5}.game__answers :nth-child(5){grid-column:2/3;grid-row:5/6}}.game__skip{display:grid;grid-column:2/3;grid-row:3/4;justify-items:center;align-items:center}.game__timer-wrap{display:grid;grid-column:2/3;grid-row:1/2;justify-items:center;align-items:center}.game__questions{display:grid;grid-column:2/3;grid-row:2/3;grid-template:1fr 1fr 1fr/1fr;justify-items:center;align-items:center}.game__answer-btns{display:grid;grid-column:2/3;grid-row:3/4;justify-items:center;align-items:center;gap:20px;padding:50px;grid-template:1fr/1fr 300px 300px 1fr}.game__answer-btns :nth-child(1){grid-column:2/3}.game__answer-btns :nth-child(2){grid-column:3/4}.statistics{display:grid;grid-template:auto auto 1fr/1fr 90% 1fr;gap:30px}.statistics__today{grid-column:2/3;grid-row:1/2;display:grid;grid-template:100px auto/1fr 1fr 1fr}.statistics__today :nth-child(2){grid-column:1/2;grid-row:2/3;justify-self:center}.statistics__today :nth-child(3){grid-column:2/3;grid-row:2/3;justify-self:center}.statistics__today :nth-child(4){grid-column:3/4;grid-row:2/3;justify-self:center}.statistics__today.hide-learnt{grid-template:100px auto/1fr 1fr}.statistics__today.hide-learnt :nth-child(4){display:none}.statistics__title{grid-column:1/4;grid-row:1/2}.statistics__games{grid-column:2/3;grid-row:2/3;display:flex;gap:10px;justify-content:center}.statistics__total{grid-column:2/3;grid-row:3/4;display:flex;flex-direction:column;align-items:center;gap:20px;padding:20px 0px}.header{grid-area:header;background-color:#3a4b83;display:grid;align-items:center;grid-template:1fr/1fr 20% 70% 1fr}.header__logo-img{width:70px;height:70px;padding:5px}.header__logo{display:grid;grid-template:1fr/60px 1fr;align-items:center;grid-column:2/3;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#ddd;line-height:1rem;gap:10px}.about{padding:50px 10px;align-items:center;grid-column:2/3;grid-row:1/2;display:grid;grid-template:1fr 3fr/1fr 54% 36% 1fr;background-color:#f0f0f0;gap:10px}.about__title{grid-column:2/3;grid-row:1/2}.about__text{grid-column:2/3;grid-row:2/3;text-align:justify;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.01em;color:#3a56b1;line-height:4rem}.about__image-wrap{grid-column:3/4;grid-row:1/3;width:100%;height:100%;background-repeat:no-repeat;background-size:cover}.about__image{width:100%;height:100%;object-fit:contain}.scope{padding:70px 10px;grid-column:2/3;grid-row:2/3;display:grid;align-items:center;grid-template:repeat(4, auto)/1fr repeat(2, calc((90% - 30px) * 0.5)) 1fr;background-color:#3a4b83;gap:30px}.scope__title{grid-column:2/4;grid-row:1/2;justify-self:center;color:#ddd}.scope__text{text-align:justify;grid-column:2/4;grid-row:2/3;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.01em;color:#ddd;line-height:4rem}.scope :nth-child(3){grid-column:2/3;grid-row:3/4}.scope :nth-child(4){grid-column:3/4;grid-row:3/4}.scope :nth-child(5){grid-column:2/3;grid-row:4/5}.scope :nth-child(6){grid-column:3/4;grid-row:4/5}.team{padding:70px 10px;grid-column:2/3;grid-row:3/4;display:grid;align-items:center;grid-template:5rem auto auto/1fr repeat(2, calc((90% - 30px) * 0.5)) 1fr;background-color:#f0f0f0;gap:30px}.team__title{grid-column:2/4;grid-row:1/2;justify-self:center}.team :nth-child(2){grid-column:2/3;grid-row:2/3}.team :nth-child(3){grid-column:3/4;grid-row:2/3}.team :nth-child(4){grid-column:2/3;grid-row:3/4}.team :nth-child(5){grid-column:3/4;grid-row:3/4}.footer{grid-area:footer;display:grid;align-items:center;grid-template:1fr/1fr minmax(auto, 360px) minmax(auto, 360px) minmax(auto, 360px) minmax(auto, 360px) 1fr;background-color:#3a4b83}.footer.hidden{display:none}.footer__githublink{grid-column:2/3;justify-self:center;width:70px;height:70px}.footer__links{grid-column:3/4;display:flex;align-items:center;justify-content:space-between;padding:10px;gap:10px;transition:all .5s}.footer__links-item{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#ddd;line-height:1rem}.footer__links-item:hover{color:#fff;transition:all .5s}.footer__copyrights{grid-column:4/5;justify-self:center;font-size:14px;color:#4d4d4d;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#ddd;line-height:1rem;transition:all .5s}.footer__rsschoollink{grid-column:5/6;justify-self:center;width:150px;height:50px;transition:all 1s;background-repeat:no-repeat}.choice{gap:5px}.choice__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:5rem;letter-spacing:.06em;color:#3a56b1;line-height:6rem;padding:10px 0px}.choice__hint{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.06em;color:#3a56b1;line-height:4rem;padding:10px 0px}.choice__wrap{display:grid;grid-template:3rem 1fr/70% 30%;width:400px;height:220px;border-radius:10px;overflow:hidden;padding:10px;gap:5px}.choice__wrap.audio{background-color:#dd9434}.choice__wrap.sprint{background-color:#3e59b3}.choice__name{grid-column:1/3;grid-row:1/2;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#ddd;line-height:1rem;align-self:center;justify-self:center}.choice__img{grid-column:1/2;grid-row:2/3;width:100%;height:100%;border-radius:10px}.choice__btn{grid-column:2/3;grid-row:1/3;width:70px;height:70px;align-self:center;justify-self:center;border-radius:10px;box-shadow:2px 2px 5px #3a4b83;transition:.1s all ease}.choice__btn:hover{transform:translateY(3px);transition:.1s all ease}.choice__levels{width:400px;height:200px;display:grid;grid-template:repeat(2, 1fr)/repeat(3, 1fr);gap:10px}.choice__levels :nth-child(1){grid-column:1/2;grid-row:1/2;background-color:#a1e4c8}.choice__levels :nth-child(1):hover{background-color:rgba(161,228,200,.5019607843)}.choice__levels :nth-child(2){grid-column:1/2;grid-row:2/3;background-color:#1d9b55}.choice__levels :nth-child(2):hover{background-color:rgba(161,228,200,.5019607843)}.choice__levels :nth-child(3){grid-column:2/3;grid-row:1/2;background-color:#e4dea8}.choice__levels :nth-child(3):hover{background-color:rgba(228,222,168,.5019607843)}.choice__levels :nth-child(4){grid-column:2/3;grid-row:2/3;background-color:#d1c02b}.choice__levels :nth-child(4):hover{background-color:rgba(209,192,43,.5019607843)}.choice__levels :nth-child(5){grid-column:3/4;grid-row:1/2;background-color:#ce9d9d}.choice__levels :nth-child(5):hover{background-color:rgba(206,157,157,.5019607843)}.choice__levels :nth-child(6){grid-column:3/4;grid-row:2/3;background-color:#c92323}.choice__levels :nth-child(6):hover{background-color:rgba(201,35,35,.5019607843)}.choice__level{display:flex;align-items:center;justify-content:center;border-radius:10px;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#3a56b1;line-height:1rem;transition:.2s all ease;user-select:none}.choice__level:hover{transition:.2s all ease;color:#fff}.choice__level:active{transform:translateY(5px);transition:.2s all ease}.choice__level.selected{border:10px solid #ff9100;color:#fff}.game{gap:20px}.game__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:5rem;letter-spacing:.01em;color:#3a56b1;line-height:5.2rem;padding:20px}.game__desc{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:3rem;letter-spacing:.01em;color:#3a56b1;line-height:3.2rem;padding:20px}.game__icon{width:100%;height:auto}.game__help{border:3px solid #3a4b83;box-shadow:2px 2px 5px #3a4b83;border:3px solid #3a4b83;box-shadow:2px 2px 5px #3a4b83;width:auto;border-radius:15px;padding:30px}.game__help-item{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.game__start{padding:20px}.game__audio-btn{width:200px;height:200px;box-shadow:2px 2px 5px #3a4b83;border-radius:50%;align-self:center;overflow:hidden}.game__audio-btn .game__audio-question,.game__audio-btn .game__audio-answer{width:100%;height:100%;object-fit:cover}.game__audio-btn .game__audio-answer{display:none}.game__audio-btn.answer .game__audio-answer{display:block}.game__audio-btn.answer .game__audio-question{display:none}.game__audio-btn:hover{box-shadow:3px 3px 7px #3a4b83;transition:.2s all}.game__word-img{width:150px;height:150px;border-radius:50%}.game__word-img .game__answer-img{display:none}.game__word-img.answer-ok .game__answer-img{display:block}.game__word-img.answer-ok .game__question-img{display:none}.game__answer-img,.game__question-img{width:100%;height:100%;object-fit:cover}.game__word,.game__word-translate{padding:1rem;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#3a56b1;line-height:1rem}.game__test-field{position:absolute;width:150px;height:50px;border:1px solid #000;font-size:20px;left:50%;top:30%}.active{transition:.2s all;transform:translateY(3px)}.modal{position:absolute;z-index:10;top:0;right:0;display:flex;flex-direction:column;align-content:center;justify-content:flex-start;padding:3rem;min-width:40vw;height:100vh}.modal .modal__title{margin-bottom:2rem}.modal .modal__form{display:flex;flex-direction:column;gap:1rem;margin-bottom:2rem}.modal .modal__form .registration__regbtn{width:fit-content;padding:0 1rem;margin-top:2rem}.modal .modal__form .form-input{line-height:2rem}.modal_hidden,.btn_hidden{display:none}.wrapper{position:relative}.blackout{width:100vw;height:100vh;position:absolute;top:0;z-index:5;background-color:rgba(0,0,0,.3)}.overflow-hidden{overflow:hidden}.blackout_hidden{display:none}.body{position:relative}.body_hidden{display:none}.statistics{padding:50px 0px;position:relative;overflow:hidden}.statistics__title{text-align:center}.statistics__today-item{display:flex;flex-direction:column;align-items:center;padding:20px;width:200px}.statistics__value{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:7rem;letter-spacing:.01em;color:#3a56b1;line-height:7.5rem}.statistics__hint{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem;text-align:center}.statistics__total-title{text-align:center}.statistics__total-desc{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.01em;color:#3a56b1;line-height:4rem;text-align:center}.statistics__total-graph-wrap{width:80%;height:500px;background-color:#3a4b83}.handbook{display:flex;flex-direction:column;margin:40px 20px;gap:20px}.handbook__views{display:flex;gap:10px}.active-handbook-page{color:#3a56b1}.handbook__levels .active-level-card:nth-child(1),.A1 .active-word-card,.A1 .word-card-info__complicated-words-button,.A1 .word-card-info__play-audio-button,.A1 .word-card-info__headings,.A1 .word-card-info__learned-words-button,.A1 .words-pagination__curr-page{background-color:#a1e4c8}.handbook__levels .active-level-card:nth-child(2),.A2 .active-word-card,.A2 .word-card-info__complicated-words-button,.A2 .word-card-info__play-audio-button,.A2 .word-card-info__headings,.A2 .word-card-info__learned-words-button,.A2 .words-pagination__curr-page{background-color:#acffbb}.handbook__levels .active-level-card:nth-child(3),.B1 .active-word-card,.B1 .word-card-info__complicated-words-button,.B1 .word-card-info__play-audio-button,.B1 .word-card-info__headings,.B1 .word-card-info__learned-words-button,.B1 .words-pagination__curr-page{background-color:#e4dea8}.handbook__levels .active-level-card:nth-child(4),.B2 .active-word-card,.B2 .word-card-info__complicated-words-button,.B2 .word-card-info__play-audio-button,.B2 .word-card-info__headings,.B2 .word-card-info__learned-words-button,.B2 .words-pagination__curr-page{background-color:#d1c02b}.handbook__levels .active-level-card:nth-child(5),.C1 .active-word-card,.C1 .word-card-info__complicated-words-button,.C1 .word-card-info__play-audio-button,.C1 .word-card-info__headings,.C1 .word-card-info__learned-words-button,.C1 .words-pagination__curr-page{background-color:#ffd0a6}.handbook__levels .active-level-card:nth-child(6),.C2 .active-word-card,.C2 .word-card-info__complicated-words-button,.C2 .word-card-info__play-audio-button,.C2 .word-card-info__headings,.C2 .word-card-info__learned-words-button,.C2 .words-pagination__curr-page{background-color:#ffe471}.complicated-words .active-word-card,.complicated-words .word-card-info__complicated-words-button,.complicated-words .word-card-info__play-audio-button,.complicated-words .word-card-info__headings,.complicated-words .word-card-info__learned-words-button,.complicated-words .word-card-info__remove-button,.complicated-words .words-pagination__curr-page{background-color:#cdffbf}.learned::after{background:center/cover #fff no-repeat url('+k+")}.hard::after{background:center/cover #fff no-repeat url("+E+')}.hard::after,.learned::after{position:absolute;content:"";top:5px;right:5px;width:20px;height:20px;border-radius:50%}.all-words-learned::after{position:absolute;content:"";top:2px;right:2px;width:36px;height:36px;border-radius:50%;border:3px solid #fff}.page-learned::after{position:absolute;content:"";top:-2px;left:90px;width:35px;height:35px;border-radius:50%;background:center/cover #f0f0f0 no-repeat url('+k+")}.disabled{pointer-events:none}.disabled .handbook__game-title{color:#c2c2c2;backdrop-filter:blur(2px) grayscale(100%);background-color:rgba(255,255,255,.8)}","",{version:3,sources:["webpack://./src/sass/base/_fonts.scss","webpack://./src/sass/base/_normalize.scss","webpack://./src/sass/components/_menu.scss","webpack://./src/sass/utils/_mixines.scss","webpack://./src/sass/utils/_variables.scss","webpack://./src/sass/components/_scope-card.scss","webpack://./src/sass/components/_member-card.scss","webpack://./src/sass/components/_section-title.scss","webpack://./src/sass/components/_word.scss","webpack://./src/sass/components/_pagination.scss","webpack://./src/sass/components/_registration-modal.scss","webpack://./src/sass/components/_gamespanel.scss","webpack://./src/sass/components/_popup.scss","webpack://./src/sass/components/_answer.scss","webpack://./src/sass/components/_gamestat.scss","webpack://./src/sass/components/_button.scss","webpack://./src/sass/components/_button-reg.scss","webpack://./src/sass/components/_timer.scss","webpack://./src/sass/components/_game-stat-el.scss","webpack://./src/sass/components/_handbook-titles.scss","webpack://./src/sass/components/_handbook-levels.scss","webpack://./src/sass/components/_handbook-level-card.scss","webpack://./src/sass/components/_handbook-games.scss","webpack://./src/sass/components/_handbook-words.scss","webpack://./src/sass/components/_handbook-word-cards.scss","webpack://./src/sass/components/_handbook-word-card.scss","webpack://./src/sass/components/_handbook-word-card-info.scss","webpack://./src/sass/components/_handbook-play-btn.scss","webpack://./src/sass/components/_handbook-words-pagination.scss","webpack://./src/sass/pages/main/_main.scss","webpack://./src/sass/pages/choice/_choice.scss","webpack://./src/sass/pages/game/_game.scss","webpack://./src/sass/pages/statistics/_statistics.scss","webpack://./src/sass/layout/_header.scss","webpack://./src/sass/layout/main/_about.scss","webpack://./src/sass/layout/main/_scope.scss","webpack://./src/sass/layout/main/_team.scss","webpack://./src/sass/layout/_footer.scss","webpack://./src/sass/layout/choice/_choice.scss","webpack://./src/sass/layout/game/_game.scss","webpack://./src/sass/layout/_modal.scss","webpack://./src/sass/layout/_blackout.scss","webpack://./src/sass/layout/_body.scss","webpack://./src/sass/layout/statistics/_statistics.scss","webpack://./src/sass/layout/handbook/_handbook.scss"],names:[],mappings:"AAAQ,ECCN,SAAA,CACA,QAAA,CACA,QAAA,CAGF,mBACE,0BAAA,CACA,6BAAA,CACA,qBAAA,CAGF,eACE,YAAA,CAGF,iBACE,YAAA,CAGF,wBACE,aAAA,CAGF,UACE,WAAA,CACA,UAAA,CACA,cAAA,CACA,aAAA,CACA,cAAA,CACA,yBAAA,CACA,0BAAA,CACA,6BAAA,CAGF,sBACE,mBAAA,CAGF,iBACE,YAAA,CAGF,OACE,cAAA,CAGF,yBACE,SAAA,CACA,QAAA,CAGF,YACE,oBAAA,CAGF,QACE,oBAAA,CAEF,MACE,eAAA,CAGF,IACE,kBAAA,CAGF,kBACE,iBAAA,CACA,mBAAA,CClEF,MACI,YAAA,CACA,qBAAA,CACA,oBAAA,CACA,eAAA,CACA,YACI,YAAA,CACA,kBAAA,CAEJ,iBACI,oBAAA,CACA,wBAAA,CACA,gBAAA,CCdJ,yBDeqB,CCdrB,iBDcoC,CCbpC,eDa4C,CCZ5C,cDYiD,CCXjD,oBDWuD,CCVvD,UCCS,CAAA,gBFSmE,CACxE,uBACI,wBENC,CFQL,0BACI,wBETC,CFWL,gCACI,wBEXK,CCbjB,YACI,iBAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,WAAA,CACA,UAAA,CACA,QAAA,CACA,uBAAA,CACA,iBAAA,CACA,8BAAA,CAEA,iBACI,WAAA,CACA,YAAA,CAGJ,mBFhBA,yBEiBqB,CFhBrB,iBEgBoC,CFfpC,eEe4C,CFd5C,cEciD,CFbjD,oBEauD,CFZvD,UCCS,CAAA,kBCWmE,CACxE,iBAAA,CAGJ,kBFrBA,yBEsBqB,CFrBrB,iBEqBoC,CFpBpC,eEoB4C,CFnB5C,cEmBiD,CFlBjD,oBEkBuD,CFjBvD,UCCS,CAAA,kBCgBmE,CACxE,kBAAA,CCxBR,aACI,WAAA,CACA,wBAAA,CACA,iBAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,QAAA,CACA,iBAAA,CACA,8BAAA,CAEA,oBACI,WAAA,CACA,YAAA,CAGJ,mBHfA,yBGgBqB,CHfrB,iBGeoC,CHdpC,eGc4C,CHb5C,cGaiD,CHZjD,oBGYuD,CHXvD,aCEQ,CDDR,kBGU2E,CAG3E,mBHnBA,yBGoBqB,CHnBrB,iBGmBoC,CHlBpC,eGkB4C,CHjB5C,gBGiBiD,CHhBjD,oBGgByD,CHfzD,aCEQ,CDDR,gBGc6E,CAG7E,2BHvBA,yBGwBqB,CHvBrB,iBGuBoC,CHtBpC,eGsB4C,CHrB5C,gBGqBiD,CHpBjD,oBGoByD,CHnBzD,aCEQ,CDDR,gBGkB6E,CACzE,aAAA,CACA,kBAAA,CAGJ,qBH7BA,yBG8BqB,CH7BrB,iBG6BoC,CH5BpC,eG4B4C,CH3B5C,gBG2BiD,CH1BjD,oBG0ByD,CHzBzD,aCEQ,CDDR,gBGwB6E,CAG7E,yBACI,UAAA,CACA,WAAA,CAGJ,8BHtCA,yBGuCqB,CHtCrB,iBGsCoC,CHrCpC,eGqC4C,CHpC5C,gBGoCiD,CHnCjD,oBGmCyD,CHlCzD,aCEQ,CDDR,gBGiC6E,CCxCjF,eJCI,yBAAA,CACA,iBIDgC,CJEhC,eIFwC,CJGxC,cIH6C,CJI7C,oBIJmD,CJKnD,aCEQ,CDDR,gBINuE,CCE3E,MACI,YAAA,CACA,UAAA,CACA,WAAA,CACA,iCAAA,CACA,kBAAA,CACA,iBAAA,CAEA,kBAAA,CAEA,YACI,yBAAA,CACA,kBAAA,CACA,8BAAA,CAGJ,gBACI,wBAAA,CAGJ,iBACI,wBJHK,CIIL,0FAGI,UJjBC,CImBL,qJAII,aJxBI,CI4BZ,YACI,eAAA,CACA,YAAA,CACA,WAAA,CACA,YAAA,CACA,gCAAA,CAGJ,iBACI,eAAA,CACA,YAAA,CAGJ,YLlDA,yBKmDqB,CLlDrB,iBKkDoC,CLjDpC,eKiD4C,CLhD5C,cKgDiD,CL/CjD,oBK+CuD,CL9CvD,aCEQ,CDDR,kBK6C2E,CAG3E,qBLtDA,yBKuDqB,CLtDrB,iBKsDoC,CLrDpC,eKqD4C,CLpD5C,cKoDiD,CLnDjD,oBKmDuD,CLlDvD,aCEQ,CDDR,kBKiD2E,CAG3E,YACI,eAAA,CACA,YAAA,CACA,UAAA,CACA,WAAA,CAGJ,mBACI,eAAA,CACA,YAAA,CLnEJ,yBKoEqB,CLnErB,iBKmEoC,CLlEpC,eKkE4C,CLjE5C,cKiEiD,CLhEjD,oBKgEuD,CL/DvD,aCEQ,CDDR,kBK8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A,CAGJ,oBACI,YAAA,CACA,kBAAA,CACA,QAAA,CACA,WAAA,CAGJ,yBf3BA,yBe4BqB,Cf3BrB,iBe2BoC,Cf1BpC,ee0B4C,CfzB5C,gBeyBiD,CfxBjD,oBewByD,CfvBzD,aCEQ,CDDR,gBesB6E,CACzE,8Bf7BJ,yBe8ByB,Cf7BzB,iBe6BwC,Cf5BxC,ee4BgD,Cf3BhD,gBe2BqD,Cf1BrD,oBe0B6D,CfzB7D,aCEQ,CDDR,gBewBiF,CAGjF,qBACI,iBAAA,CACA,UAAA,CACA,WAAA,CACA,WAAA,CACA,YAAA,CACA,iBAAA,CACA,4CdxCsB,CAAA,iBeC1B,kBAAA,CACA,iBAAA,ChBFA,yBgBGiB,ChBFjB,iBgBEgC,ChBDhC,egBCwC,CAAA,cAAA,ChBCxC,oBgBDmD,ChBEnD,aCwCyB,CDvCzB,gBgBHwF,CACxF,cAAA,CACA,0BfmDmB,CehDrB,mCACE,kBAAA,CACA,iBAAA,ChBVA,yBgBWiB,ChBVjB,iBgBUgC,ChBThC,egBSwC,ChBRxC,cgBQ6C,ChBP7C,oBgBOmD,ChBNnD,aCwCyB,CDvCzB,gBgBKwF,CACxF,cAAA,CACA,6BAAA,CACA,gBAAA,CAGF,uBACE,qBAAA,ChBlBA,yBgBmBiB,ChBlBjB,iBgBkBgC,ChBjBhC,egBiBwC,ChBhBxC,cgBgB6C,ChBf7C,oBgBemD,ChBdnD,aCEQ,CDDR,gBgBauE,CAGzE,yBhBtBE,yBgBuBiB,ChBtBjB,iBgBsBgC,ChBrBhC,egBqBwC,ChBpBxC,cgBoB6C,ChBnB7C,oBgBmBmD,ChBlBnD,aCEQ,CDDR,gBgBiBuE,CAGzE,uBACE,qBAAA,ChB3BA,yBgB4BiB,ChB3BjB,iBgB2BgC,ChB1BhC,egB0BwC,ChBzBxC,cgByB6C,ChBxB7C,oBgBwBmD,ChBvBnD,aCEQ,CDDR,gBgBsBuE,CAGzE,sBACE,UAAA,CACA,WAAA,ChBjCA,yBgBkCiB,ChBjCjB,iBgBiCgC,ChBhChC,egBgCwC,ChB/BxC,gBgB+B6C,ChB9B7C,oBgB8BqD,ChB7BrD,aCEQ,CDDR,kBgB4ByE,CACzE,iBAAA,CACA,iBAAA,CACA,yBAAA,CACA,qCAAA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",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto+Flex:opsz,wght@8..144,300;8..144,400&display=swap');","*{\n  padding: 0;\n  margin: 0;\n  border: 0;\n}\n\n*,*:before,*:after{\n  -moz-box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n:focus,:active{\n  outline: none;\n}\n\na:focus,a:active{\n  outline: none;\n}\n\nnav,footer,header,aside{\n  display: block;\n}\n\nhtml,body{\n  height: 100%;\n  width: 100%;\n  font-size: 100%;\n  line-height: 1;\n  font-size: 14px;\n  -ms-text-size-adjust: 100%;\n  -moz-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\n\ninput,button,textarea{\n  font-family:inherit;\n}\n\ninput::-ms-clear{\n  display: none;\n}\n\nbutton{\n  cursor: pointer;\n}\n\nbutton::-moz-focus-inner{\n  padding: 0;\n  border: 0;\n}\n\na,a:visited{\n  text-decoration: none;\n}\n\na:hover{\n  text-decoration: none;\n}\nul li{\n  list-style: none;\n}\n\nimg{\n  vertical-align: top;\n}\n\nh1,h2,h3,h4,h5,h6{\n  font-size: inherit;\n  font-weight: inherit;\n}","@import '../utils/variables';\n@import '../utils/mixines';\n\n.menu {\n    display: grid;\n    grid-auto-flow: column;\n    justify-items: center;\n    grid-column: 3 / 4;\n    &__item {\n        display: flex;\n        align-items: center;\n    }\n    &__item-link {\n        text-decoration: none;\n        text-transform: uppercase;\n        padding: 0px 10px;\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-light, 5rem);\n        &:hover {\n            background-color: $hover-dark;\n        }\n        &.selected {\n            background-color: $hover-dark;\n        }\n        &.selected:hover {\n            background-color: $hover-dark-sel;\n        }\n    }\n}\n","@mixin addFont ($font-family, $font-style, $font-weight, $font-size, $letter-spacing, $font_color, $line-height) {\n    font-family: $font-family;\n    font-style: $font-style;\n    font-weight: $font-weight;\n    font-size: $font-size;\n    letter-spacing: $letter-spacing;\n    color: $font_color;\n    line-height: $line-height;\n}","$background-dark: #3a4b83;\n$background-dark-transparent: #3a4b8380;\n$background-light: #f0f0f0;\n$background-gray: #a8a8a8;\n$background-selected: #fdba63;\n$blackout: rgba(0, 0, 0, 0.3);\n$text-white: #ffffff;\n$text-light: #dddddd;\n$text-dark: #3a56b1;\n$text-gray: #777777;\n$text-darkgray: #494949;\n$text-black: #000000;\n$hover-dark: #517aff;\n$hover-dark-sel: #95a8e7;\n$shadow-dark: #222c4b;\n$shadow-light: #f0f0f0;\n$border-color-dark: #4d4d4d;\n$border-color-light: #a3a3a3;\n$grid-container-width: 90%;\n$grid-container-gap: 30px;\n$hard-word: #fa9c21;\n$known-word: #187a0f;\n$audio-game-color: #dd9434;\n$sprint-game-color: #3e59b3;\n$timer-color: #526cc4;\n\n$level-A1-color: #a1e4c8;\n$level-A1-color-alpha: #a1e4c880;\n$level-A2-color: #1d9b55;\n$level-A2-color-alpha: #1d9b5580;\n$level-B1-color: #e4dea8;\n$level-B1-color-alpha: #e4dea880;\n$level-B2-color: #d1c02b;\n$level-B2-color-alpha: #d1c02b80;\n$level-C1-color: #ce9d9d;\n$level-C1-color-alpha: #ce9d9d80;\n$level-C2-color: #c92323;\n$level-C2-color-alpha: #c9232380;\n$level-selected: #ff9100;\n$level-selected-text: #ffffff;\n\n$color-background-transparent: #00000080;\n\n$color-fault: #cc3333;\n$color-ok: #3bac3b;\n\n$handbook-disabled-font-clr: #c2c2c2;\n$handbook-card-bg: #f0f0f0;\n$handbook-shadow: 0 0 2px #898989;\n$handbook-pagination-btn-bg: #f5f5f5;\n$handbook-A1-lvl-bg: $level-A1-color;\n$handbook-A2-lvl-bg: #ACFFBB;\n$handbook-B1-lvl-bg: $level-B1-color;\n$handbook-B2-lvl-bg: $level-B2-color;\n$handbook-C1-lvl-bg: #FFD0A6;\n$handbook-C2-lvl-bg: #FFE471;\n$handbook-complicated-words: #CDFFBF;\n$handbook-transititon: 0.3s ease-in-out;",".scope-card {\n    padding: 30px 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    height: 100%;\n    width: 100%;\n    gap: 20px;\n    border: 1px solid #c0c0c0;\n    border-radius: 5px;\n    box-shadow: 1px 1px 5px $shadow-dark;\n\n    &__img {\n        width: 100px;\n        height: 100px;\n    }\n\n    &__title {\n        @include addFont('Philosopher', normal, 600, 3rem, 0.01em, $text-light, 3.5rem);\n        text-align: center\n    }\n\n    &__text {\n        @include addFont('Philosopher', normal, 400, 2rem, 0.01em, $text-light, 2.5rem);\n        text-align: justify;\n    }\n}\n",".member-card {\n    height: 100%;\n    border: 1px solid $border-color-light;\n    border-radius: 5px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 10px;\n    padding: 30px 20px;\n    box-shadow: 1px 1px 5px $shadow-dark;\n\n    &__photo {\n        width: 150px;\n        height: 150px;\n    }\n\n    &__role {\n        @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2.5rem);\n    }\n\n    &__name {\n        @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\n    }\n\n    &__contribution {\n        @include addFont('Philosopher', normal, 400, 1.7rem, 0.01em, $text-dark, 2rem);\n        flex: 1 1 auto;\n        text-align: justify;\n    }\n\n    &__github {\n        @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\n    }\n\n    &__github-img {\n        width: 30px;\n        height: 30px;\n    }\n    \n    &__github-nickname {\n        @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\n    }\n}\n",".section-title {\n    @include addFont('Philosopher', normal, 600, 5rem, 0.01em, $text-dark, 5rem);\n}\n","@import '../utils/variables';\n@import '../utils/mixines';\n\n.word {\n    display: grid;\n    width: 100%;\n    height: 100%;\n    grid-template: 100px auto auto / 1fr;\n    border-radius: 20px;\n    padding: 20px 10px;\n\n    transition: .1s all;\n\n    &:hover {\n        transform: translateY(2px);\n        transition: .1s all;\n        box-shadow: 1px 1px 3px $shadow-dark;\n    }\n\n    &.hard-word {\n        background-color: $hard-word;\n    }\n\n    &.known-word {\n        background-color: $known-word;\n        & .word__word,\n        & .word__example,\n        & .word__mean {\n            color: $text-black;\n        }\n        & .word__transcription,\n        & .word__translation,\n        & .word__example-transl,\n        & .word__mean-transl {\n            color: $text-darkgray;\n        }\n    }\n\n    &__wrap {\n        grid-column: 1 / 2;\n        grid-row: 1 / 2;\n        padding: 5px;\n        display: grid;\n        grid-template: 40px 40px / 1fr 30px;\n    }\n\n    &__word-full {\n        grid-column: 1 / 2;\n        grid-row: 1 / 2;\n    }\n\n    &__word {\n        @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2.2rem);\n    }\n\n    &__transcription {\n        @include addFont('Philosopher', normal, 400, 2rem, 0.01em, $text-dark, 2.2rem);\n    }\n\n    &__play {\n        grid-column: 2 / 3;\n        grid-row: 1 / 2;\n        width: 30px;\n        height: 30px;\n    }\n\n    &__translation {\n        grid-column: 1 / 3;\n        grid-row: 2 / 3;\n        @include addFont('Philosopher', normal, 400, 2rem, 0.01em, $text-dark, 2.2rem);\n    }\n\n    &__image-wrap {\n        grid-column: 1 / 2;\n        grid-row: 2 / 3;\n        & img {\n            width: 100%;\n            height: 100%;\n            object-fit: contain;\n        }\n    }\n\n    &__examples {\n        grid-column: 1 / 2;\n        grid-row: 3 / 4;\n        display: grid;\n        grid-template: repeat(4, auto) / 1fr 50px;\n        padding: 5px\n    }\n\n    &__example {\n        @include addFont('Philosopher', normal, 400, 1.5em, 0.01em, $text-dark, 2rem);\n        grid-column: 1 / 2;\n        grid-row: 1 / 2;\n    }\n\n    &__example-play {\n        width: 30px;\n        height: 30px;\n        grid-column: 2/3;\n        grid-row: 1/2;\n        align-self: center;\n        justify-self: center;\n    }\n\n    &__example-transl {\n        @include addFont('Philosopher', normal, 400, 1.5em, 0.01em, $text-gray, 2rem);\n        grid-column: 1 / 3;\n        grid-row: 3 / 4;\n    }\n\n    &__mean {\n        @include addFont('Philosopher', normal, 400, 1.5em, 0.01em, $text-dark, 2rem);\n        grid-column: 1 / 2;\n        grid-row: 4 / 5;\n    }\n\n    &__mean-transl {\n        @include addFont('Philosopher', normal, 400, 1.5em, 0.01em, $text-gray, 2rem);\n        grid-column: 1 / 3;\n        grid-row: 5 / 6;\n    }\n    \n    &__mean-play {\n        width: 30px;\n        height: 30px;\n        grid-column: 2 / 3;\n        grid-row: 4 / 5;\n        align-self: center;\n        justify-self: center;\n    }\n}\n\n.play-btn {\n    transition: .1s all;\n    &:hover {\n        transform: scale(1.2);\n        transition: .1s all;\n    }\n}","@import '../utils/variables';\n\n.pagination {\n    width: 450px;\n    display: grid;\n    grid-column: 2/3;\n    grid-row: 1/2;\n    grid-template: 50px / repeat(9, 50px);\n    gap: 2px;\n    justify-self: center;\n    padding: 30px 0px;\n    &__link {\n        margin: auto;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 40px;\n        height: 40px;\n        border: 1px solid $background-gray;\n        border-radius: 7px;\n        transition: .2s all;\n        @include addFont('Philosopher', normal, 400, 1.5rem, 0.01em, $text-dark, 2.2rem);\n        \n        &:hover {\n            box-shadow: 2px 2px 5px $shadow-dark;\n            transform: translateY(1px);\n            transition: .1s all;\n        }\n\n        &.selected {\n            background-color: $background-selected;\n            font-weight: 600;\n        }\n    }\n}\n","@import '../utils/variables';\n\n.modal {\n    background-color: $background-light;\n    .modal__form {\n        background-color: $background-light;\n    }\n}","@import '../utils/variables';\n\n.game-panel {\n    width: 100%;\n    justify-self: center;\n    align-items: center;\n    display: grid;\n    grid-template: 150px / repeat(4, 1fr);\n    border-radius: 20px;\n    gap: 10px;\n    &__link {\n        width: 150px;\n        height: 50px;\n        background-color: $background-dark;\n        color: $text-light;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        border-radius: 5px;\n        box-shadow: 3px 3px 7px $shadow-dark;\n        transition: .2s all;\n        &:hover {\n            transform: translateY(2px);\n            transition: .2s all;\n        }\n    }\n    & :nth-child(1) {\n        grid-column: 2/3;\n        margin: auto;\n    }\n    & :nth-child(2) {\n        grid-column: 3/4;\n        margin: auto;\n    }\n}\n","@import '../utils/variables';\n@import '../utils/mixines';\n\n.popup {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  background-color: $color-background-transparent;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  overflow-y: auto;\n  overflow-x: hidden;\n  z-index: 20;\n\n  &[id=\"message\"] {\n    opacity: 0;\n    visibility: hidden;\n    transition: all 0.8s ease 0s;\n    \n    & .popup__content {\n      max-width: 800px;\n      width: 80%;\n      @media (max-width: 950px) {\n        width: 100%;\n      }\n    }\n    \n    & h2 {\n      @media (max-width: 750px) {\n        @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2.2rem);\n      }\n      @media (max-width: 600px) {\n        @include addFont('Philosopher', normal, 600, 1rem, 0.01em, $text-dark, 1.1rem);\n      }\n    }\n  }\n\n  &[id=\"game-stat\"] {\n    opacity: 0;\n    visibility: hidden;\n    transition: all 0.8s ease 0s;\n\n    & .popup__content {\n      width: 60%;\n      height: 600px;\n      padding: 20px;\n    }\n  }\n\n  &__message {\n    @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2.2rem);\n    text-align: justify;\n  }\n\n  &.open {\n    opacity: 1;\n    visibility: visible;\n  }\n\n  &__content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 30px;\n    width: 100%;\n    background-color: $background-light;\n    color: $text-dark;\n    padding: 30px;\n    border: 3px solid $background-dark;\n    border-radius: 20px;\n    box-shadow: 5px 5px 15px #073ae080;\n    position: relative;\n    visibility: hidden;\n    opacity: 0;\n    transform: perspective(600px) translate(0px, -100%) rotateX(45deg); \n    transition: all 0.8s ease 0s;\n  }\n\n  &.open .popup__content {\n    transform: perspective(600px) translate(0px, 0%) rotateX(0deg);\n    visibility: visible;\n    opacity: 1;\n    transition: all 0.8s ease 0s;\n  }\n\n  &__area {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n  }\n\n  &__body {\n    min-height: 100%;\n    width: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 30px 10px;\n  }\n\n  &__close {\n    position: absolute;\n    right: -40px;\n    top: -40px;\n    & img {\n      width: 48px;\n      height: 48px;\n      transition: all 0.5s linear;\n      background-color: $background-light;\n      border-radius: 50%;\n      border: 3px solid $background-dark;\n      @media (max-width: 545px) {\n        width: 32px;\n        height: 32px;\n        transition: all 0.2s linear;\n      }\n    }\n    &:hover img {\n      transform: scale(1.2);\n      transition: all 0.5s linear;\n    }\n  }\n\n  &__close-btn {\n    width: 40%;\n    height: 4rem;\n    @include addFont('Philosopher', normal, 600, 2.5rem, 0.01em, $text-light, 3.2rem);\n    background-color: $background-dark;\n    border-radius: 5px;\n    box-shadow: 2px 2px 5px $background-dark;\n    transition: all 0.1s linear;\n    &:hover {\n      color: $text-white;\n\n    }\n    &:active {\n      transform: translateY(2px);\n      transition: all 0.2s linear;\n    }\n  }\n\n  &__title {\n    & .popup__title-text {\n      text-align: center;\n      transition: all 0.2s linear;\n      @include addFont('Philosopher', normal, 600, 2.5rem, 0.01em, $text-dark, 3.2rem);\n    }\n\n    margin: 0 0 20px 0;\n    @media (max-width: 545px) {\n      @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\n      transition: 0.2s linear;\n    }\n    @media (max-width: 445px) {\n      @include addFont('Philosopher', normal, 600, 1rem, 0.01em, $text-dark, 1.2rem);\n      transition: 0.2s linear;\n    }\n  }\n}","@import '../utils/variables';\n@import '../utils/mixines';\n\n.answer {\n    display: flex;\n    position: relative;\n    justify-content: center;\n    align-items: center;\n    height: 45px;\n    border-radius: 10px;\n    box-shadow: 2px 2px 5px $background-dark;\n    align-items: center;\n    padding: 0px 50px;\n    width: 100%;\n    gap: 10px;\n    transition: .2s all;\n    background-color: $background-light;\n\n    &__ok,\n    &__fault {\n        display: none;\n        position: absolute;\n        top: 8px;\n        left: 10px;\n\n        &.visible {\n            display: block;\n        }\n        filter: drop-shadow(0 0 3px $background-dark);\n    }\n\n    &:hover {\n        box-shadow: 3px 3px 7px $background-dark;\n        transition: .2s all;\n    }\n\n    &:active {\n        transition: .2s all;\n        transform: translateY(3px);\n    }\n\n    &.active {\n        transition: .2s all;\n        transform: translateY(3px);\n    }\n\n    &.ok {\n        background-color: $color-ok;\n        .answer__ok {\n            display: block;\n        }\n    }\n\n    &.fault {\n        background-color: $color-fault;\n        .answer__fault {\n            display: block;\n        }\n    }\n\n    &.hide-help {\n        .answer__help {\n            display: none;\n        }\n    }\n\n    &__text {\n        grid-column: 1/3;\n        grid-row: 1/2;\n        justify-self: center;\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-dark, 1rem);\n    }\n\n    &__help {\n        display: flex;\n        width: 30px;\n        height: 30px;\n        position: absolute;\n        top: 8px;\n        left: 10px;\n        align-items: center;\n        justify-content: center;\n        border-radius: 50%;\n        border: 1px solid $background-dark;\n    }\n}","@import '../utils/variables';\n@import '../utils/mixines';\n\n.game-stat {\n    max-height: 100%;\n    display: grid;\n    grid-template: 100px 1fr 50px 80px / 1fr;\n    gap: 10px;\n    &__about {\n        grid-column: 1/2;\n        grid-row: 1/2;\n    }\n\n    &__title {\n        @include addFont('Philosopher', normal, 600, 3rem, 0.06em, $text-dark, 4rem);\n        text-align: center;\n    }\n\n    &__result,\n    &__result-val,\n    &__serie,\n    &__serie-val {\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-dark, 3rem);\n        text-align: center;\n    }\n\n    &__container {\n        padding: 10px 0px;\n        grid-column: 1/2;\n        grid-row: 2/3;\n        overflow: hidden;\n        height: 100%;\n    }\n\n    &__slider {\n        display: flex;\n        width: 200%;\n        height: 100%;\n        padding: 20px 0px;\n        transition: 1s all ease;\n        &.shift {\n            transform: translateX(-50%);\n            transition: 1s all ease;\n        }\n    }\n\n    &__item {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n        overflow: scroll;\n    }\n\n    & #game-stat-common {\n        display: grid;\n        align-items: center;\n        justify-items: center;\n    }\n\n    &__percent {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 150px;\n        height: 150px;\n        border: 3px solid $background-dark;\n        border-radius: 50%;\n        box-shadow: 2px 2px 5px $background-dark;\n        @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2.2rem);\n    }\n\n    &__el {\n        display: flex;\n        align-items: center;\n        gap: 10px;\n        @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\n    }\n\n    &__el-play {\n            width: 100%;\n            height: 100%;\n            display: flex;\n            align-items: center;\n            justify-content: flex-start;\n            transition: .2s all ease;\n            gap: 10px;\n        &:hover img{\n            transform: scale(1.2);\n            transition: .2s all ease;\n        }\n    }\n\n    &__el-word {\n        @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2rem);\n    }\n\n    &__pagination {\n        grid-column: 1/2;\n        grid-row: 3/4;\n        display: flex;\n        gap: 20px;\n        justify-content: center;\n    }\n\n    &__pag-btn {\n        width: 20px;\n        height: 20px;\n        background-color: $background-dark;\n        border-radius: 50%;\n        border: 3px solid $background-dark;\n        box-shadow: 1px 1px 3px $background-dark;\n        transition: .2s all ease;\n        &:hover {\n            background-color: $background-light;\n            transition: .2s all ease;\n        }\n\n        &#game-stat-left,\n        &#game-stat-right {\n            background-color: $background-light;\n            &.active-page {\n                background-color: $background-dark;\n            }\n        }\n    }\n\n    &__action {\n        grid-column: 1/2;\n        grid-row: 4/5;\n        display: flex;\n        justify-content: center;\n        gap: 10px;\n    }\n\n    &__restart,\n    &__game-select {\n        width: 40%;\n    }\n    \n    &__errors-words,\n    &__rights-words {\n        display: flex;\n        flex-direction: column;\n        padding: 20px 10px;\n    }\n}\n\n.stat-header {\n    @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\n}\n\n.stat-separator {\n    width: 100%;\n    height: 3px;\n    border: 1px solid $background-dark;\n    &.hide {\n        display: none;\n    }\n}\n\n.hide {\n    display: none;\n}",".button {\n    height: 4rem;\n    @include addFont('Philosopher', normal, 600, 2.5rem, 0.01em, $text-light, 3.2rem);\n    background-color: $background-dark;\n    border-radius: 5px;\n    box-shadow: 2px 2px 5px $background-dark;\n    transition: all 0.1s linear;\n    justify-self: center;\n    padding: 0px 20px;\n\n    &:hover {\n        color: $text-white;\n    }\n\n    &:active {\n        transform: translateY(2px);\n        transition: all 0.2s linear;\n    }\n}",".regbtn {\n    width: fit-content;\n    padding: 0 1rem;\n    height: 70px;\n    background-color: $background-light;\n    border-radius: 5px;\n    box-shadow: 3px 3px 7px $shadow-dark;\n    transition: .2s all ease;\n    @include addFont('Philosopher', normal, 600, 3rem, 0.01em, $text-dark, 4rem);\n\n    &:hover {\n        transform: translateY(2px);\n        transition: .2s all ease;\n    }\n}","@import '../utils/variables';\n@import '../utils/mixines';\n\n.timer {\n    width: 200px;\n    height: 200px;\n    border-radius: 50%;\n    background-color: $background-light;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    overflow: hidden;\n    position: relative;\n\n   \n    &::before{\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 50%;\n        height: 100%;\n        z-index: 3;\n        background-color: $background-light;\n    }\n    \n    &::after{\n        content: '';\n        position: absolute;\n        top: 0;\n        right: 0;\n        width: 50%;\n        height: 100%;\n        z-index: 3;\n        background-color: $timer-color;\n        visibility: hidden;\n    }\n    &.start {\n        &::before {\n            animation: mask-left 30s steps(1,end) forwards;\n        }\n        &::after {\n            animation: mask-right 30s steps(1,end) forwards;\n        }\n        & .timer__line{\n            animation: line 30s linear forwards;\n        }\n        & .timer__counter {\n            animation: counter 30s steps(29, end) forwards;\n        }\n    }\n    &__line {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        z-index: 2;\n    }\n\n    &__line::after {\n        content: \"\";\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 50%;\n        height: 100%;\n        background-color: $timer-color;\n    }\n\n    &__body {\n        width: 100px;\n        height: 100px;\n        border-radius: 50%;\n        background-color: $background-dark;\n        text-align: center;\n        overflow: hidden;\n        z-index: 4;\n    }\n\n    &__counter span{\n        @include addFont('Philosopher', normal, 600, 50px, 0.01em, $text-light, 50px);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        height: 100px;\n    }\n}\n\n@keyframes counter {\n    0% {\n\n    }\n    100% {\n        transform: translate(0px, -2900px);\n    }\n}\n\n@keyframes line {\n    0% {}\n\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n@keyframes mask-left {\n    0% {\n        visibility: visible;\n    }\n    50%,\n    100% {\n        visibility: hidden;\n    }\n}\n\n@keyframes mask-right {\n    0% {\n        visibility: hidden;\n    }\n    50%,\n    100% {\n        visibility: visible;\n    }\n}","@import '../utils/variables';\n@import '../utils/mixines';\n\n.game-stat-el {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    padding: 10px;\n    border-radius: 20px;\n    box-shadow: 2px 2px 5px $background-dark;\n    gap: 5px;\n    width: 400px;\n    position: relative;\n    overflow: hidden;\n    padding: 20px 5px;\n\n    &__title {\n        @include addFont('Philosopher', normal, 600, 3rem, 0.01em, $text-dark, 3rem);\n        padding: 0px 17px;\n    }\n\n    &__item {\n        display: flex;\n        align-items: center;\n        gap: 10px;\n        padding: 5px;\n    }\n\n    &__item-text {\n        @include addFont('Philosopher', normal, 400, 1.5rem, 0.01em, $text-dark, 2rem);\n        & span {\n            @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\n        }\n    }\n    &__decor {\n        position: absolute;\n        right: -54%;\n        bottom: -67%;\n        width: 400px;\n        height: 400px;\n        border-radius: 50%;\n        background-color: $background-dark-transparent;\n    }\n}",".handbook {\n  &__title {\n    height: fit-content;\n    width: fit-content;\n    @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $handbook-disabled-font-clr, 2rem);\n    cursor: pointer;\n    transition: $handbook-transititon;\n  }\n\n  &__complicated-words-title {\n    height: fit-content;\n    width: fit-content;\n    @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $handbook-disabled-font-clr, 2rem);\n    cursor: pointer;\n    border-left: 5px solid $handbook-disabled-font-clr;\n    padding-left: 8px;\n  }\n\n  &__words-title {\n    grid-area: words-title;\n    @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2rem);\n  }\n\n  &__card-subtitle {\n    @include addFont('Philosopher', normal, 600, 1rem, 0.01em, $text-dark, 1rem);\n  }\n\n  &__games-title {\n    grid-area: games-title;\n    @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2rem);\n  }\n\n  &__game-title {\n    width: 100%;\n    height: 100%;\n    @include addFont('Philosopher', normal, 600, 1.8rem, 0.01em, $text-dark, 1.8rem);\n    text-align: center;\n    line-height: 150px;\n    backdrop-filter: blur(4px);\n    background-color: rgba(240, 240, 240, 0.8);\n    border-radius: 10px;\n  }\n}\n\n.word-card-info {\n\n  &__meaning-title,\n  &__example-title {\n    font-weight: 600;\n    margin-bottom: 5px;\n  }\n\n  &__statistic {\n    display: flex;\n    gap: 20px;\n  }\n}\n\n.sprint-statistic__title, .audio-call-statistic__title {\n  @include addFont('Philosopher', normal, 600, 1.2rem, 0.01em, $text-dark, 1.2rem);\n  margin-bottom: 5px;\n}",".handbook__levels {\n  display: flex;\n  width: fit-content;\n  height: fit-content;\n  gap: 10px;\n}",".handbook__level-card {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 50px;\n  height: 50px;\n  @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 1.5rem);\n  border-radius: 10px;\n  background-color: $handbook-card-bg;\n  cursor: pointer;\n  transition: $handbook-transititon;\n}",".handbook {\n  &__games {\n    display: grid;\n    grid-area: games;\n    grid-template-areas:\n      'games-title .'\n      'audio-call sprint'\n    ;\n    gap: 10px;\n  }\n\n  &__audio-call {\n    grid-area: audio-call;\n    height: 150px;\n    cursor: pointer;\n    background: 20%/cover $handbook-card-bg no-repeat url('./public/assets/images/audio.png');\n    border-radius: 10px;\n  }\n\n  &__sprint {\n    grid-area: sprint;\n    height: 150px;\n    cursor: pointer;\n    background: center/cover $handbook-card-bg no-repeat url('./public/assets/images/sprint.png');\n    border-radius: 10px;\n  }\n}",".handbook__words {\n  position: relative;\n  display: grid;\n  grid-area: words;\n  grid-template-areas:\n    'words-title words-title'\n    'word-cards word-card-info'\n    'words-pagination words-pagination'\n  ;\n  grid-auto-columns: 3fr 0.5fr;\n  gap: 20px;\n}",".handbook__word-cards {\n  display: grid;\n  grid-template-columns: repeat(4, minmax(150px, 1fr));\n  gap: 10px;\n  grid-area: word-cards;\n  grid-auto-rows: 100px;\n  @include addFont('Philosopher', normal, 400, 1.2rem, 0.01em, $text-dark, 1.2rem);\n}",".handbook__word-card {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  width: 100%;\n  height: 100px;\n  @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 1.5rem);\n  border-radius: 10px;\n  background-color: $handbook-card-bg;\n  text-align: center;\n  flex-wrap: wrap;\n  transition: $handbook-transititon;\n}",".word-card-info {\n  position: relative;\n  display: flex;\n  grid-area: word-card-info;\n  justify-self: center;\n  flex-direction: column;\n  width: fit-content;\n  min-height: 540px;\n  padding: 15px;\n  gap: 10px;\n  background-color: $handbook-card-bg;\n  border-radius: 10px;\n  @include addFont('Philosopher', normal, 400, 1.2rem, 0.01em, $text-dark, 1.2rem);\n\n  &__headings {\n    position: absolute;\n    top: 5%;\n    right: 15px;\n    padding: 5px;\n    font-weight: 600;\n    color: $text-dark;\n    transition: $handbook-transititon;\n  }\n\n  &__img {\n    border-radius: 10px;\n    width: 400px;\n    height: 250px;\n  }\n\n  &__complicated-words-button,\n  &__learned-words-button,\n  &__remove-button {\n    width: 190px;\n    height: 30px;\n    text-align: center;\n    border-radius: 15px;\n    @include addFont('Philosopher', normal, 400, 1rem, 0.01em, $text-dark, 1rem);\n    box-shadow: $handbook-shadow;\n    transition: $handbook-transititon;\n  }\n\n  &__buttons {\n    display: flex;\n    justify-content: space-between;\n  }\n}",".word-card-info__play-audio-button {\n  position: absolute;\n  top: 215px;\n  left: 24px;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background: center/contain no-repeat url('./public/assets/icons/handbook-play.svg');\n  box-shadow: $handbook-shadow;\n  transition: 0.3s ease-in-out;\n}",".words-pagination {\n  grid-area: words-pagination;\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n\n  &__next-button,\n  &__prev-button,\n  &__curr-page {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    box-shadow: $handbook-shadow;\n    transition: 0.3s ease-in-out;\n  }\n\n  &__next-button {\n    background: center/20% white no-repeat url('./public/assets/icons/arrow-right.svg');\n  }\n\n  &__prev-button {\n    background: center/20% white no-repeat url('./public/assets/icons/arrow-left.svg');\n  }\n\n  &__curr-page {\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    @include addFont('Philosopher', normal, 400, 1rem, 0.01em, $text-dark, 1rem);\n  }\n\n  &__next-button:disabled,\n  &__prev-button:disabled {\n    box-shadow: none;\n    pointer-events: none;\n    background-color: $handbook-pagination-btn-bg;\n  }\n\n  &__next-button:disabled {\n    background: center/20% white no-repeat url('./public/assets/icons/arrow-right-disabled.svg');\n  }\n\n  &__prev-button:disabled {\n    background: center/20% white no-repeat url('./public/assets/icons/arrow-left-disabled.svg');\n  }\n}",'@import \'../../utils/variables\';\n\n.wrapper {\n    min-height: 100%;\n    width: 100%;\n    display: grid;\n    grid-template: [start] "header" minmax(100px, auto) [row2] [row2] "content" 1fr [row3] [row3] "footer" minmax(100px, auto) [row-end] / 1fr;\n\n    &.hide-footer {\n        grid-template: [start] "header" minmax(100px, auto) [row2] [row2] "content" 1fr [row-end] / 1fr;\n    }\n}\n\n.content {\n    grid-area: content;\n    display: grid;\n    \n    grid-template: 1fr / 1fr;\n}\n',"@import '../../utils/variables';\n@import '../../utils/mixines';\n\n.choice-panel {\n    display: grid;\n    justify-self: center;\n    align-items: center;\n    grid-column: 1/3;\n    grid-row: 1/2;\n    grid-template: 1fr/1fr $grid-container-width 1fr;\n    width: 100%;\n}\n\n.choice {\n    display: grid;\n    grid-column: 2/3;\n    grid-template: 10rem auto 5rem/ repeat(3, 1fr);\n    \n    @media (max-width: 1300px) {\n        grid-template: 10rem repeat(3, auto) 5rem/1fr 1fr 1fr;\n    }\n}\n\n.choice__wrap {\n    justify-self: center;\n    &.audio {\n        grid-column: 1/2;\n        grid-row: 2/3;\n        @media (max-width: 1300px) {\n            grid-column: 2/3;\n            grid-row: 2/3;\n        }\n    }\n    \n    &.sprint {\n        grid-column: 3/4;\n        grid-row: 2/3;\n        @media (max-width: 1300px) {\n            grid-column: 2/3;\n            grid-row: 4/5;\n        }\n    }\n}\n\n.choice__levels {\n    justify-self: center;\n    grid-column: 2/3;\n    grid-row: 2/3;\n        @media (max-width: 1300px) {\n            grid-column: 2/3;\n            grid-row: 3/4;\n        }\n}\n\n.choice__title {\n    grid-column: 1/4;\n    grid-row: 1/2;\n    align-self: center;\n    justify-self: center;\n    padding: 2rem;\n}\n\n.choice__hint {\n    grid-column: 1/4;\n    grid-row: 3/4;\n    align-self: center;\n    justify-self: center;\n        @media (max-width: 1300px) {\n            grid-row: 5/6;\n        }\n}","@import '../../utils/variables';\n@import '../../utils/mixines';\n\n.game {\n    display: grid;\n    justify-self: center;\n    align-items: center;\n    grid-column: 1/3;\n    grid-row: 1/2;\n    grid-template: auto 1fr 20%/1fr $grid-container-width 1fr;\n    width: 100%;\n    padding-top: 30px;\n    max-height: 70vh;\n\n    &__about {\n        grid-column: 2/3;\n        grid-row: 1/2;\n        display: grid;\n        grid-template: 1fr 2fr/repeat(2, 1fr)\n    }\n\n    &__help {\n        grid-column: 2/3;\n        grid-row: 2/3;\n        justify-self: center;\n        display: grid;\n        grid-template: repeat(5, 1fr) / 1fr;\n        & :nth-child(1) {\n            grid-column: 1/3;\n            grid-row: 1/2;\n        }\n        & :nth-child(2) {\n            grid-column: 1/3;\n            grid-row: 2/3;\n        }\n        & :nth-child(3) {\n            grid-column: 1/3;\n            grid-row: 3/4;\n        }\n        & :nth-child(4) {\n            grid-column: 1/3;\n            grid-row: 4/5;\n        }\n        & :nth-child(5) {\n            grid-column: 1/3;\n            grid-row: 5/6;\n        }\n\n        &-item {\n            align-self: center;\n            justify-self: center;\n        }\n    }\n\n    &__help.sprint__help {\n        grid-template: repeat(2, 1fr) / 1fr;\n    }\n\n    &__start {\n        grid-column: 2/3;\n        grid-row: 3/4;\n        display: grid;\n    }\n\n    &__title {\n        grid-column: 2/3;\n        grid-row: 1/2;\n    }\n\n    &__desc {\n        grid-column: 2/3;\n        grid-row: 2/3;\n    }\n\n    &__icon {\n        grid-column: 1/2;\n        grid-row: 1/3;\n        justify-self: right;\n    }\n\n    &__audio {\n        display: grid;\n        grid-column: 2/3;\n        grid-row: 1/2;\n        justify-items: center;\n        align-items: center;\n    }\n\n    &__answers {\n        grid-column: 2/3;\n        grid-row: 2/3;\n        justify-items: center;\n        align-items: center;\n        display: grid;\n        grid-template: 1fr / 1fr repeat(5, auto) 1fr;\n        gap: 10px;\n        & :nth-child(1) {\n            grid-column: 2/3;\n        }\n        & :nth-child(2) {\n            grid-column: 3/4;\n        }\n        & :nth-child(3) {\n            grid-column: 4/5;\n        }\n        & :nth-child(4) {\n            grid-column: 5/6;\n        }\n        & :nth-child(5) {\n            grid-column: 6/7;\n        }\n        @media (max-width: 1300px) {\n            grid-template: repeat(5, 1fr) / 1fr auto 1fr;\n            & :nth-child(1) {\n                grid-column: 2/3;\n                grid-row: 1/2;\n            }\n            & :nth-child(2) {\n                grid-column: 2/3;\n                grid-row: 2/3;\n            }\n            & :nth-child(3) {\n                grid-column: 2/3;\n                grid-row: 3/4;\n            }\n            & :nth-child(4) {\n                grid-column: 2/3;\n                grid-row: 4/5;\n            }\n            & :nth-child(5) {\n                grid-column: 2/3;\n                grid-row: 5/6;\n            }\n        }\n    }\n\n    &__skip {\n        display: grid;\n        grid-column: 2/3;\n        grid-row: 3/4;\n        justify-items: center;\n        align-items: center;\n    }\n\n    &__timer-wrap {\n        display: grid;\n        grid-column: 2/3;\n        grid-row: 1/2;\n        justify-items: center;\n        align-items: center;\n    }\n\n    &__questions {\n        display: grid;\n        grid-column: 2/3;\n        grid-row: 2/3;\n        grid-template: 1fr 1fr 1fr/1fr;\n        justify-items: center;\n        align-items: center;\n    }\n\n    &__answer-btns {\n        display: grid;\n        grid-column: 2/3;\n        grid-row: 3/4;\n        justify-items: center;\n        align-items: center;\n        gap: 20px;\n        padding: 50px;\n        grid-template: 1fr / 1fr 300px 300px 1fr;\n        & :nth-child(1) {\n            grid-column: 2/3;\n        }\n        & :nth-child(2) {\n            grid-column: 3/4;\n        }\n    }\n}\n",".statistics {\n    display: grid;\n    grid-template: auto auto 1fr/1fr $grid-container-width 1fr;\n    gap: 30px;\n    &__today {\n        grid-column: 2/3;\n        grid-row: 1/2;\n        display: grid;\n        //grid-template: 100px auto / 1fr 1fr;\n        grid-template: 100px auto/1fr 1fr 1fr;\n        & :nth-child(2) {\n            grid-column: 1/2;\n            grid-row: 2/3;\n            justify-self: center;\n        }\n        & :nth-child(3) {\n            grid-column: 2/3;\n            grid-row: 2/3;\n            justify-self: center;\n        }\n        & :nth-child(4) {\n            grid-column: 3/4;\n            grid-row: 2/3;\n            justify-self: center;\n        }\n\n        &.hide-learnt {\n            grid-template: 100px auto / 1fr 1fr;\n            & :nth-child(4) {\n                display: none;\n            }\n        }\n    }\n\n    &__title {\n        grid-column: 1/4;\n        grid-row: 1/2;\n    }\n\n    &__games {\n        grid-column: 2/3;\n        grid-row: 2/3;\n        display: flex;\n        gap: 10px;\n        justify-content: center;\n    }\n\n    &__total {\n        grid-column: 2/3;\n        grid-row: 3/4;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 20px;\n        padding: 20px 0px;\n    }\n}","\n@import '../base/fonts';\n@import '../utils/mixines';\n@import '../utils/variables';\n\n.header {\n    grid-area: header;\n    background-color: $background-dark;\n    display: grid;\n    align-items: center;\n    grid-template: 1fr / 1fr 20% 70% 1fr;\n\n    &__logo-img {\n        width: 70px;\n        height: 70px;\n        padding: 5px;\n    }\n\n    &__logo {\n        display: grid;\n        grid-template: 1fr / 60px 1fr;\n        align-items: center;\n        grid-column: 2 / 3;\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-light, 1rem);\n        gap: 10px;\n    }\n}",".about {\n    padding: 50px 10px;\n    align-items: center;\n    grid-column: 2/3;\n    grid-row: 1/2;\n    display: grid;\n    grid-template: 1fr 3fr / 1fr $grid-container-width * 0.6 $grid-container-width * 0.4 1fr;\n    background-color: $background-light;\n    gap: 10px;\n\n    &__title {\n        grid-column: 2 / 3;\n        grid-row: 1 / 2;\n    }\n\n    &__text {\n        grid-column: 2 / 3;\n        grid-row: 2 / 3;\n        text-align: justify;\n        @include addFont('Philosopher', normal, 600, 3rem, 0.01em, $text-dark, 4rem);\n    }\n\n    &__image-wrap {\n        grid-column: 3 / 4;\n        grid-row: 1 / 3;\n        width: 100%;\n        height: 100%;\n        background-repeat: no-repeat;\n        background-size: cover;\n    }\n    &__image {\n        width: 100%;\n        height: 100%;\n        object-fit: contain;\n    }\n}\n",".scope {\n    padding: 70px 10px;\n    grid-column: 2/3;\n    grid-row: 2/3;\n    display: grid;\n    align-items: center;\n    grid-template: repeat(4, auto)/1fr repeat(2, calc(($grid-container-width - $grid-container-gap) * 0.5)) 1fr;;\n    background-color: $background-dark;\n    gap: $grid-container-gap;\n\n    &__title {\n        grid-column: 2 / 4;\n        grid-row: 1 / 2;\n        justify-self: center;\n        color: $text-light;\n    }\n\n    &__text {\n        text-align: justify;\n        grid-column: 2 / 4;\n        grid-row: 2 / 3;\n        @include addFont('Philosopher', normal, 600, 3rem, 0.01em, $text-light, 4rem);\n    }\n\n    & :nth-child(3) {\n        grid-column: 2 / 3;\n        grid-row: 3 / 4;\n    }\n    & :nth-child(4) {\n        grid-column: 3 / 4;\n        grid-row: 3 / 4;\n    }\n    & :nth-child(5) {\n        grid-column: 2 / 3;\n        grid-row: 4 / 5;\n    }\n    & :nth-child(6) {\n        grid-column: 3 / 4;\n        grid-row: 4 / 5;\n    }\n}\n",".team {\n    padding: 70px 10px;\n    grid-column: 2/3;\n    grid-row: 3/4;\n    display: grid;\n    align-items: center;\n    grid-template: 5rem auto auto/ 1fr repeat(2, calc(($grid-container-width - $grid-container-gap) * 0.5)) 1fr;\n\n    background-color: $background-light;\n    gap: $grid-container-gap;\n\n    &__title {\n        grid-column: 2 / 4;\n        grid-row: 1 / 2;\n        justify-self: center;\n    }\n\n    & :nth-child(2) {\n        grid-column: 2 / 3;\n        grid-row: 2 / 3;\n    }\n\n    & :nth-child(3) {\n        grid-column: 3 / 4;\n        grid-row: 2 / 3;\n    }\n\n    & :nth-child(4) {\n        grid-column: 2 / 3;\n        grid-row: 3 / 4;\n    }\n\n    & :nth-child(5) {\n        grid-column: 3 / 4;\n        grid-row: 3 / 4;\n    }\n}","@import '../utils/variables';\n\n.footer {\n    grid-area: footer;\n    display: grid;\n    align-items: center;\n\n    grid-template: 1fr / 1fr minmax(auto, 360px) minmax(auto, 360px) minmax(auto, 360px) minmax(auto, 360px) 1fr;\n    background-color: $background-dark;\n\n    &.hidden {\n        display: none;\n    }\n\n    &__githublink {\n        grid-column: 2 / 3;\n        justify-self: center;\n        width: 70px;\n        height: 70px;\n    }\n\n    &__links {\n        grid-column: 3 / 4;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: 10px;\n        gap: 10px;\n        transition: all .5s;\n        &-item {\n            @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-light, 1rem);\n            &:hover {\n                color: $text-white;\n                transition: all .5s;\n            }\n        }\n    }\n\n    &__copyrights {\n        grid-column: 4 / 5;\n        justify-self: center;\n        font-size: 14px;\n        color: $border-color-dark;\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-light, 1rem);\n        transition: all .5s;\n    }\n\n    &__rsschoollink {\n        grid-column: 5 / 6;\n        justify-self: center;\n        width: 150px;\n        height: 50px;\n        transition: all 1s;\n        background-repeat: no-repeat;\n    }\n}","@import '../../utils/variables';\n@import '../../utils/mixines';\n\n.choice {\n    gap: 5px;\n\n    &__title {\n        @include addFont('Philosopher', normal, 600, 5rem, 0.06em, $text-dark, 6rem);\n        padding: 10px 0px;\n    }\n\n    &__hint {\n        @include addFont('Philosopher', normal, 600, 3rem, 0.06em, $text-dark, 4rem);\n        padding: 10px 0px;\n    }\n\n    &__wrap {\n        display: grid;\n        grid-template: 3rem 1fr / 70% 30%;\n        width: 400px;\n        height: 220px;\n        border-radius: 10px;\n        overflow: hidden;\n        padding: 10px;\n        gap: 5px;\n        &.audio {\n            background-color: $audio-game-color;\n        }\n        &.sprint {\n            background-color: $sprint-game-color;\n        }\n    }\n\n    &__name {\n        grid-column: 1/3;\n        grid-row: 1/2;\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-light, 1rem);\n        align-self: center;\n        justify-self: center;\n    }\n\n    &__img {\n        grid-column: 1/2;\n        grid-row: 2/3;\n        width: 100%;\n        height: 100%;\n        border-radius: 10px;\n    }\n\n    &__btn {\n        grid-column: 2/3;\n        grid-row: 1/3;\n        width: 70px;\n        height: 70px;\n        align-self: center;\n        justify-self: center;\n        border-radius: 10px;\n        box-shadow: 2px 2px 5px $background-dark;\n        transition: .1s all ease;\n        &:hover {\n            transform: translateY(3px);\n            transition: .1s all ease;\n        }\n    }\n\n    &__levels {\n        width: 400px;\n        height: 200px;\n        display: grid;\n        grid-template: repeat(2, 1fr) / repeat(3, 1fr);\n        gap: 10px;\n    }\n\n    &__levels :nth-child(1) {\n        grid-column: 1/2;\n        grid-row: 1/2;\n        background-color: $level-A1-color;\n        &:hover {\n            background-color: $level-A1-color-alpha;\n        }\n    }\n    \n    &__levels :nth-child(2) {\n        grid-column: 1/2;\n        grid-row: 2/3;\n        background-color: $level-A2-color;\n        &:hover {\n            background-color: $level-A1-color-alpha;\n        }\n    }\n\n    &__levels :nth-child(3) {\n        grid-column: 2/3;\n        grid-row: 1/2;\n        background-color: $level-B1-color;\n        &:hover {\n            background-color: $level-B1-color-alpha;\n        }\n    }\n\n    &__levels :nth-child(4) {\n        grid-column: 2/3;\n        grid-row: 2/3;\n        background-color: $level-B2-color;\n        &:hover {\n            background-color: $level-B2-color-alpha;\n        }\n    }\n\n    &__levels :nth-child(5) {\n        grid-column: 3/4;\n        grid-row: 1/2;\n        background-color: $level-C1-color;\n        &:hover {\n            background-color: $level-C1-color-alpha;\n        }\n    }\n\n    &__levels :nth-child(6) {\n        grid-column: 3/4;\n        grid-row: 2/3;\n        background-color: $level-C2-color;\n        &:hover {\n            background-color: $level-C2-color-alpha;\n        }\n    }\n    \n    &__level {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border-radius: 10px;\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-dark, 1rem);\n        transition: .2s all ease;\n        user-select: none;\n        &:hover {\n            transition: .2s all ease;\n            color: $level-selected-text;\n        }\n        &:active {\n            transform: translateY(5px);\n            transition: .2s all ease;\n        }\n        &.selected {\n            border: 10px solid $level-selected;\n            color: $level-selected-text;\n        }\n    }\n}","@import '../../utils/variables';\n@import '../../utils/mixines';\n\n.game {\n    gap: 20px;\n\n    &__title {\n        @include addFont('Philosopher', normal, 600, 5rem, 0.01em, $text-dark, 5.2rem);\n        padding: 20px;\n    }\n\n    &__desc {\n        @include addFont('Philosopher', normal, 400, 3rem, 0.01em, $text-dark, 3.2rem);\n        padding: 20px; \n    }\n\n    &__icon {\n        width: 100%;\n        height: auto;\n    }\n\n    &__help {\n        border: 3px solid $background-dark;\n        box-shadow: 2px 2px 5px $background-dark;\n        border: 3px solid #3a4b83;\n        box-shadow: 2px 2px 5px #3a4b83;\n        width: auto;\n    \n        border-radius: 15px;\n        padding: 30px;\n    }\n\n    &__help-item {\n        @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\n    }\n\n    &__start {\n        padding: 20px;\n    }\n\n    &__audio-btn {\n        width: 200px;\n        height: 200px;\n        box-shadow:  2px 2px 5px $background-dark;\n        border-radius: 50%;\n        align-self: center;\n        overflow: hidden;\n\n        //game__audio-question game__audio-answer\n        .game__audio-question, \n        .game__audio-answer {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n        }\n        \n        .game__audio-answer {\n            display: none;\n        }\n\n        &.answer {\n            .game__audio-answer {\n                display: block;\n            }\n            .game__audio-question {\n                display: none;\n            }\n        }\n\n        &:hover {\n            box-shadow: 3px 3px 7px $background-dark;\n            transition: .2s all;\n        }\n    }\n\n    &__word-img {\n        width: 150px;\n        height: 150px;\n        border-radius: 50%;\n    }\n\n    &__word-img &__answer-img {\n        display: none;\n    }\n\n    &__word-img.answer-ok &__answer-img {\n        display: block;\n    }\n\n    &__word-img.answer-ok &__question-img {\n        display: none;\n    }\n\n    &__answer-img,\n    &__question-img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n    }\n\n    &__word, \n    &__word-translate {\n        padding: 1rem;\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-dark, 1rem);\n    }\n\n    &__test-field {\n        position: absolute;\n        width: 150px;\n        height: 50px;\n        border: 1px solid black;\n        font-size: 20px;\n        left: 50%;\n        top: 30%;\n    }\n}\n\n.active {\n    transition: .2s all;\n    transform: translateY(3px);\n}",".modal {\n    position: absolute;\n    z-index: 10;\n    top: 0;\n    right: 0;\n    display: flex;\n    flex-direction: column;\n    align-content: center;\n    justify-content: flex-start;\n    padding: 3rem;\n    min-width: 40vw;\n    height: 100vh;\n\n    .modal__title {\n        margin-bottom: 2rem;\n    }\n\n    .modal__form {\n        display: flex;\n        flex-direction: column;\n        gap: 1rem;\n        margin-bottom: 2rem;\n\n        .registration__regbtn {\n            width: fit-content;\n            padding: 0 1rem;\n            margin-top: 2rem;\n        }\n\n        .form-input {\n            line-height: 2rem;\n        }\n    }\n}\n\n.modal_hidden,\n.btn_hidden {\n    display: none;\n}\n\n.wrapper {\n    position: relative;\n}","@import '../utils/variables';\n\n.blackout {\n    width: 100vw;\n    height: 100vh;\n    position: absolute;\n    top: 0;\n    z-index: 5;\n    background-color: $blackout;\n}\n\n.overflow-hidden {\n    overflow: hidden;\n}\n\n.blackout_hidden {\n    display: none;\n}\n\n.body {\n    position: relative;\n}",".body_hidden {\n    display: none;\n}",".statistics {\n    padding: 50px 0px;\n    position: relative;\n    overflow: hidden;\n \n    &__title {\n        text-align: center;\n    }\n\n    &__today-item {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        padding: 20px;\n        width: 200px;\n    }\n\n    &__value {\n        @include addFont('Philosopher', normal, 600, 7rem, 0.01em, $text-dark, 7.5rem);\n    }\n\n    &__hint {\n        @include addFont('Philosopher', normal, 400, 2rem, 0.01em, $text-dark, 2.2rem);\n        text-align: center\n    }\n\n    &__total-title {\n        text-align: center\n    }\n\n    &__total-desc {\n        @include addFont('Philosopher', normal, 600, 3rem, 0.01em, $text-dark, 4rem);\n        text-align: center;\n    }\n\n    &__total-graph-wrap {\n        width: 80%;\n        height: 500px;\n        background-color: $background-dark;\n    }\n}\n",".handbook {\n  display: flex;\n  flex-direction: column;\n  margin: 40px 20px;\n  gap: 20px;\n}\n\n.handbook__views {\n  display: flex;\n  gap: 10px;\n}\n\n.active-handbook-page {\n  color: $text-dark;\n}\n\n.handbook__levels .active-level-card:nth-child(1),\n.A1 .active-word-card,\n.A1 .word-card-info__complicated-words-button,\n.A1 .word-card-info__play-audio-button,\n.A1 .word-card-info__headings,\n.A1 .word-card-info__learned-words-button,\n.A1 .words-pagination__curr-page {\n  background-color: $handbook-A1-lvl-bg;\n}\n\n.handbook__levels .active-level-card:nth-child(2),\n.A2 .active-word-card,\n.A2 .word-card-info__complicated-words-button,\n.A2 .word-card-info__play-audio-button,\n.A2 .word-card-info__headings,\n.A2 .word-card-info__learned-words-button,\n.A2 .words-pagination__curr-page {\n  background-color: $handbook-A2-lvl-bg;\n}\n\n.handbook__levels .active-level-card:nth-child(3),\n.B1 .active-word-card,\n.B1 .word-card-info__complicated-words-button,\n.B1 .word-card-info__play-audio-button,\n.B1 .word-card-info__headings,\n.B1 .word-card-info__learned-words-button,\n.B1 .words-pagination__curr-page {\n  background-color: $handbook-B1-lvl-bg;\n}\n\n.handbook__levels .active-level-card:nth-child(4),\n.B2 .active-word-card,\n.B2 .word-card-info__complicated-words-button,\n.B2 .word-card-info__play-audio-button,\n.B2 .word-card-info__headings,\n.B2 .word-card-info__learned-words-button,\n.B2 .words-pagination__curr-page {\nbackground-color: $handbook-B2-lvl-bg;\n}\n\n.handbook__levels .active-level-card:nth-child(5),\n.C1 .active-word-card,\n.C1 .word-card-info__complicated-words-button,\n.C1 .word-card-info__play-audio-button,\n.C1 .word-card-info__headings,\n.C1 .word-card-info__learned-words-button,\n.C1 .words-pagination__curr-page {\n  background-color: $handbook-C1-lvl-bg;\n}\n\n.handbook__levels .active-level-card:nth-child(6),\n.C2 .active-word-card,\n.C2 .word-card-info__complicated-words-button,\n.C2 .word-card-info__play-audio-button,\n.C2 .word-card-info__headings,\n.C2 .word-card-info__learned-words-button,\n.C2 .words-pagination__curr-page {\n  background-color: $handbook-C2-lvl-bg;\n}\n\n.complicated-words .active-word-card,\n.complicated-words .word-card-info__complicated-words-button,\n.complicated-words .word-card-info__play-audio-button,\n.complicated-words .word-card-info__headings,\n.complicated-words .word-card-info__learned-words-button,\n.complicated-words .word-card-info__remove-button,\n.complicated-words .words-pagination__curr-page  {\n  background-color: $handbook-complicated-words;\n}\n\n.learned::after {\n  background: center/cover $text-white no-repeat url('./public/assets/icons/handbook-learned.svg');\n}\n\n.hard::after {\n  background: center/cover $text-white no-repeat url('./public/assets/icons/handbook-hard.svg');\n}\n\n.hard::after, .learned::after {\n  position: absolute;\n  content: '';\n  top: 5px;\n  right: 5px;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n}\n\n.all-words-learned::after {\n  position: absolute;\n  content: '';\n  top: 2px;\n  right: 2px;\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  border: 3px solid white;\n}\n\n.page-learned::after {\n  position: absolute;\n  content: '';\n  top: -2px;\n  left: 90px;\n  width: 35px;\n  height: 35px;\n  border-radius: 50%;\n  background: center/cover $handbook-card-bg no-repeat url('./public/assets/icons/handbook-learned.svg');\n}\n\n.disabled {\n  pointer-events: none;\n}\n\n.disabled .handbook__game-title {\n  color: $handbook-disabled-font-clr;\n  backdrop-filter: blur(2px) grayscale(100%);\n  background-color: rgba(255, 255, 255, 0.8);\n}"],sourceRoot:""}]);const S=m},3645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var A=[].concat(e[c]);r&&a[A[0]]||(void 0!==o&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=o),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),i&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=i):A[4]="".concat(i)),n.push(A))}},n}},1667:e=>{"use strict";e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},7537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),a=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([o]).join("\n")}return[n].join("\n")}},6486:function(e,n,t){var r;e=t.nmd(e),function(){var i,o="Expected a function",a="__lodash_hash_undefined__",s="__lodash_placeholder__",l=32,c=128,A=1/0,d=9007199254740991,u=NaN,p=4294967295,h=[["ary",c],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",l],["partialRight",64],["rearg",256]],C="[object Arguments]",g="[object Array]",f="[object Boolean]",m="[object Date]",_="[object Error]",w="[object Function]",B="[object GeneratorFunction]",b="[object Map]",v="[object Number]",x="[object Object]",y="[object Promise]",k="[object RegExp]",E="[object Set]",S="[object String]",D="[object Symbol]",I="[object WeakMap]",L="[object ArrayBuffer]",j="[object DataView]",W="[object Float32Array]",q="[object Float64Array]",$="[object Int8Array]",R="[object Int16Array]",G="[object Int32Array]",P="[object Uint8Array]",Y="[object Uint8ClampedArray]",U="[object Uint16Array]",F="[object Uint32Array]",T=/\b__p \+= '';/g,J=/\b(__p \+=) '' \+/g,O=/(__e\(.*?\)|\b__t\)) \+\n'';/g,z=/&(?:amp|lt|gt|quot|#39);/g,H=/[&<>"']/g,N=RegExp(z.source),Q=RegExp(H.source),K=/<%-([\s\S]+?)%>/g,M=/<%([\s\S]+?)%>/g,V=/<%=([\s\S]+?)%>/g,X=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Z=/^\w*$/,ee=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ne=/[\\^$.*+?()[\]{}|]/g,te=RegExp(ne.source),re=/^\s+/,ie=/\s/,oe=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ae=/\{\n\/\* \[wrapped with (.+)\] \*/,se=/,? & /,le=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ce=/[()=,{}\[\]\/\s]/,Ae=/\\(\\)?/g,de=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ue=/\w*$/,pe=/^[-+]0x[0-9a-f]+$/i,he=/^0b[01]+$/i,Ce=/^\[object .+?Constructor\]$/,ge=/^0o[0-7]+$/i,fe=/^(?:0|[1-9]\d*)$/,me=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,_e=/($^)/,we=/['\n\r\u2028\u2029\\]/g,Be="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",be="a-z\\xdf-\\xf6\\xf8-\\xff",ve="A-Z\\xc0-\\xd6\\xd8-\\xde",xe="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",ye="["+xe+"]",ke="["+Be+"]",Ee="\\d+",Se="["+be+"]",De="[^\\ud800-\\udfff"+xe+Ee+"\\u2700-\\u27bf"+be+ve+"]",Ie="\\ud83c[\\udffb-\\udfff]",Le="[^\\ud800-\\udfff]",je="(?:\\ud83c[\\udde6-\\uddff]){2}",We="[\\ud800-\\udbff][\\udc00-\\udfff]",qe="["+ve+"]",$e="(?:"+Se+"|"+De+")",Re="(?:"+qe+"|"+De+")",Ge="(?:['’](?:d|ll|m|re|s|t|ve))?",Pe="(?:['’](?:D|LL|M|RE|S|T|VE))?",Ye="(?:"+ke+"|"+Ie+")?",Ue="[\\ufe0e\\ufe0f]?",Fe=Ue+Ye+"(?:\\u200d(?:"+[Le,je,We].join("|")+")"+Ue+Ye+")*",Te="(?:"+["[\\u2700-\\u27bf]",je,We].join("|")+")"+Fe,Je="(?:"+[Le+ke+"?",ke,je,We,"[\\ud800-\\udfff]"].join("|")+")",Oe=RegExp("['’]","g"),ze=RegExp(ke,"g"),He=RegExp(Ie+"(?="+Ie+")|"+Je+Fe,"g"),Ne=RegExp([qe+"?"+Se+"+"+Ge+"(?="+[ye,qe,"$"].join("|")+")",Re+"+"+Pe+"(?="+[ye,qe+$e,"$"].join("|")+")",qe+"?"+$e+"+"+Ge,qe+"+"+Pe,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Ee,Te].join("|"),"g"),Qe=RegExp("[\\u200d\\ud800-\\udfff"+Be+"\\ufe0e\\ufe0f]"),Ke=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Me=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Ve=-1,Xe={};Xe[W]=Xe[q]=Xe[$]=Xe[R]=Xe[G]=Xe[P]=Xe[Y]=Xe[U]=Xe[F]=!0,Xe[C]=Xe[g]=Xe[L]=Xe[f]=Xe[j]=Xe[m]=Xe[_]=Xe[w]=Xe[b]=Xe[v]=Xe[x]=Xe[k]=Xe[E]=Xe[S]=Xe[I]=!1;var Ze={};Ze[C]=Ze[g]=Ze[L]=Ze[j]=Ze[f]=Ze[m]=Ze[W]=Ze[q]=Ze[$]=Ze[R]=Ze[G]=Ze[b]=Ze[v]=Ze[x]=Ze[k]=Ze[E]=Ze[S]=Ze[D]=Ze[P]=Ze[Y]=Ze[U]=Ze[F]=!0,Ze[_]=Ze[w]=Ze[I]=!1;var en={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},nn=parseFloat,tn=parseInt,rn="object"==typeof t.g&&t.g&&t.g.Object===Object&&t.g,on="object"==typeof self&&self&&self.Object===Object&&self,an=rn||on||Function("return this")(),sn=n&&!n.nodeType&&n,ln=sn&&e&&!e.nodeType&&e,cn=ln&&ln.exports===sn,An=cn&&rn.process,dn=function(){try{return ln&&ln.require&&ln.require("util").types||An&&An.binding&&An.binding("util")}catch(e){}}(),un=dn&&dn.isArrayBuffer,pn=dn&&dn.isDate,hn=dn&&dn.isMap,Cn=dn&&dn.isRegExp,gn=dn&&dn.isSet,fn=dn&&dn.isTypedArray;function mn(e,n,t){switch(t.length){case 0:return e.call(n);case 1:return e.call(n,t[0]);case 2:return e.call(n,t[0],t[1]);case 3:return e.call(n,t[0],t[1],t[2])}return e.apply(n,t)}function _n(e,n,t,r){for(var i=-1,o=null==e?0:e.length;++i<o;){var a=e[i];n(r,a,t(a),e)}return r}function wn(e,n){for(var t=-1,r=null==e?0:e.length;++t<r&&!1!==n(e[t],t,e););return e}function Bn(e,n){for(var t=null==e?0:e.length;t--&&!1!==n(e[t],t,e););return e}function bn(e,n){for(var t=-1,r=null==e?0:e.length;++t<r;)if(!n(e[t],t,e))return!1;return!0}function vn(e,n){for(var t=-1,r=null==e?0:e.length,i=0,o=[];++t<r;){var a=e[t];n(a,t,e)&&(o[i++]=a)}return o}function xn(e,n){return!(null==e||!e.length)&&qn(e,n,0)>-1}function yn(e,n,t){for(var r=-1,i=null==e?0:e.length;++r<i;)if(t(n,e[r]))return!0;return!1}function kn(e,n){for(var t=-1,r=null==e?0:e.length,i=Array(r);++t<r;)i[t]=n(e[t],t,e);return i}function En(e,n){for(var t=-1,r=n.length,i=e.length;++t<r;)e[i+t]=n[t];return e}function Sn(e,n,t,r){var i=-1,o=null==e?0:e.length;for(r&&o&&(t=e[++i]);++i<o;)t=n(t,e[i],i,e);return t}function Dn(e,n,t,r){var i=null==e?0:e.length;for(r&&i&&(t=e[--i]);i--;)t=n(t,e[i],i,e);return t}function In(e,n){for(var t=-1,r=null==e?0:e.length;++t<r;)if(n(e[t],t,e))return!0;return!1}var Ln=Pn("length");function jn(e,n,t){var r;return t(e,(function(e,t,i){if(n(e,t,i))return r=t,!1})),r}function Wn(e,n,t,r){for(var i=e.length,o=t+(r?1:-1);r?o--:++o<i;)if(n(e[o],o,e))return o;return-1}function qn(e,n,t){return n==n?function(e,n,t){for(var r=t-1,i=e.length;++r<i;)if(e[r]===n)return r;return-1}(e,n,t):Wn(e,Rn,t)}function $n(e,n,t,r){for(var i=t-1,o=e.length;++i<o;)if(r(e[i],n))return i;return-1}function Rn(e){return e!=e}function Gn(e,n){var t=null==e?0:e.length;return t?Fn(e,n)/t:u}function Pn(e){return function(n){return null==n?i:n[e]}}function Yn(e){return function(n){return null==e?i:e[n]}}function Un(e,n,t,r,i){return i(e,(function(e,i,o){t=r?(r=!1,e):n(t,e,i,o)})),t}function Fn(e,n){for(var t,r=-1,o=e.length;++r<o;){var a=n(e[r]);a!==i&&(t=t===i?a:t+a)}return t}function Tn(e,n){for(var t=-1,r=Array(e);++t<e;)r[t]=n(t);return r}function Jn(e){return e?e.slice(0,st(e)+1).replace(re,""):e}function On(e){return function(n){return e(n)}}function zn(e,n){return kn(n,(function(n){return e[n]}))}function Hn(e,n){return e.has(n)}function Nn(e,n){for(var t=-1,r=e.length;++t<r&&qn(n,e[t],0)>-1;);return t}function Qn(e,n){for(var t=e.length;t--&&qn(n,e[t],0)>-1;);return t}function Kn(e,n){for(var t=e.length,r=0;t--;)e[t]===n&&++r;return r}var Mn=Yn({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Vn=Yn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Xn(e){return"\\"+en[e]}function Zn(e){return Qe.test(e)}function et(e){var n=-1,t=Array(e.size);return e.forEach((function(e,r){t[++n]=[r,e]})),t}function nt(e,n){return function(t){return e(n(t))}}function tt(e,n){for(var t=-1,r=e.length,i=0,o=[];++t<r;){var a=e[t];a!==n&&a!==s||(e[t]=s,o[i++]=t)}return o}function rt(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=e})),t}function it(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=[e,e]})),t}function ot(e){return Zn(e)?function(e){for(var n=He.lastIndex=0;He.test(e);)++n;return n}(e):Ln(e)}function at(e){return Zn(e)?function(e){return e.match(He)||[]}(e):function(e){return e.split("")}(e)}function st(e){for(var n=e.length;n--&&ie.test(e.charAt(n)););return n}var lt=Yn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),ct=function e(n){var t,r=(n=null==n?an:ct.defaults(an.Object(),n,ct.pick(an,Me))).Array,ie=n.Date,Be=n.Error,be=n.Function,ve=n.Math,xe=n.Object,ye=n.RegExp,ke=n.String,Ee=n.TypeError,Se=r.prototype,De=be.prototype,Ie=xe.prototype,Le=n["__core-js_shared__"],je=De.toString,We=Ie.hasOwnProperty,qe=0,$e=(t=/[^.]+$/.exec(Le&&Le.keys&&Le.keys.IE_PROTO||""))?"Symbol(src)_1."+t:"",Re=Ie.toString,Ge=je.call(xe),Pe=an._,Ye=ye("^"+je.call(We).replace(ne,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ue=cn?n.Buffer:i,Fe=n.Symbol,Te=n.Uint8Array,Je=Ue?Ue.allocUnsafe:i,He=nt(xe.getPrototypeOf,xe),Qe=xe.create,en=Ie.propertyIsEnumerable,rn=Se.splice,on=Fe?Fe.isConcatSpreadable:i,sn=Fe?Fe.iterator:i,ln=Fe?Fe.toStringTag:i,An=function(){try{var e=co(xe,"defineProperty");return e({},"",{}),e}catch(e){}}(),dn=n.clearTimeout!==an.clearTimeout&&n.clearTimeout,Ln=ie&&ie.now!==an.Date.now&&ie.now,Yn=n.setTimeout!==an.setTimeout&&n.setTimeout,At=ve.ceil,dt=ve.floor,ut=xe.getOwnPropertySymbols,pt=Ue?Ue.isBuffer:i,ht=n.isFinite,Ct=Se.join,gt=nt(xe.keys,xe),ft=ve.max,mt=ve.min,_t=ie.now,wt=n.parseInt,Bt=ve.random,bt=Se.reverse,vt=co(n,"DataView"),xt=co(n,"Map"),yt=co(n,"Promise"),kt=co(n,"Set"),Et=co(n,"WeakMap"),St=co(xe,"create"),Dt=Et&&new Et,It={},Lt=Yo(vt),jt=Yo(xt),Wt=Yo(yt),qt=Yo(kt),$t=Yo(Et),Rt=Fe?Fe.prototype:i,Gt=Rt?Rt.valueOf:i,Pt=Rt?Rt.toString:i;function Yt(e){if(ts(e)&&!za(e)&&!(e instanceof Jt)){if(e instanceof Tt)return e;if(We.call(e,"__wrapped__"))return Uo(e)}return new Tt(e)}var Ut=function(){function e(){}return function(n){if(!ns(n))return{};if(Qe)return Qe(n);e.prototype=n;var t=new e;return e.prototype=i,t}}();function Ft(){}function Tt(e,n){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=i}function Jt(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function Ot(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var r=e[n];this.set(r[0],r[1])}}function zt(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var r=e[n];this.set(r[0],r[1])}}function Ht(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var r=e[n];this.set(r[0],r[1])}}function Nt(e){var n=-1,t=null==e?0:e.length;for(this.__data__=new Ht;++n<t;)this.add(e[n])}function Qt(e){var n=this.__data__=new zt(e);this.size=n.size}function Kt(e,n){var t=za(e),r=!t&&Oa(e),i=!t&&!r&&Ka(e),o=!t&&!r&&!i&&As(e),a=t||r||i||o,s=a?Tn(e.length,ke):[],l=s.length;for(var c in e)!n&&!We.call(e,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||fo(c,l))||s.push(c);return s}function Mt(e){var n=e.length;return n?e[Hr(0,n-1)]:i}function Vt(e,n){return qo(Ei(e),ar(n,0,e.length))}function Xt(e){return qo(Ei(e))}function Zt(e,n,t){(t!==i&&!Fa(e[n],t)||t===i&&!(n in e))&&ir(e,n,t)}function er(e,n,t){var r=e[n];We.call(e,n)&&Fa(r,t)&&(t!==i||n in e)||ir(e,n,t)}function nr(e,n){for(var t=e.length;t--;)if(Fa(e[t][0],n))return t;return-1}function tr(e,n,t,r){return dr(e,(function(e,i,o){n(r,e,t(e),o)})),r}function rr(e,n){return e&&Si(n,js(n),e)}function ir(e,n,t){"__proto__"==n&&An?An(e,n,{configurable:!0,enumerable:!0,value:t,writable:!0}):e[n]=t}function or(e,n){for(var t=-1,o=n.length,a=r(o),s=null==e;++t<o;)a[t]=s?i:Es(e,n[t]);return a}function ar(e,n,t){return e==e&&(t!==i&&(e=e<=t?e:t),n!==i&&(e=e>=n?e:n)),e}function sr(e,n,t,r,o,a){var s,l=1&n,c=2&n,A=4&n;if(t&&(s=o?t(e,r,o,a):t(e)),s!==i)return s;if(!ns(e))return e;var d=za(e);if(d){if(s=function(e){var n=e.length,t=new e.constructor(n);return n&&"string"==typeof e[0]&&We.call(e,"index")&&(t.index=e.index,t.input=e.input),t}(e),!l)return Ei(e,s)}else{var u=po(e),p=u==w||u==B;if(Ka(e))return Bi(e,l);if(u==x||u==C||p&&!o){if(s=c||p?{}:Co(e),!l)return c?function(e,n){return Si(e,uo(e),n)}(e,function(e,n){return e&&Si(n,Ws(n),e)}(s,e)):function(e,n){return Si(e,Ao(e),n)}(e,rr(s,e))}else{if(!Ze[u])return o?e:{};s=function(e,n,t){var r,i=e.constructor;switch(n){case L:return bi(e);case f:case m:return new i(+e);case j:return function(e,n){var t=n?bi(e.buffer):e.buffer;return new e.constructor(t,e.byteOffset,e.byteLength)}(e,t);case W:case q:case $:case R:case G:case P:case Y:case U:case F:return vi(e,t);case b:return new i;case v:case S:return new i(e);case k:return function(e){var n=new e.constructor(e.source,ue.exec(e));return n.lastIndex=e.lastIndex,n}(e);case E:return new i;case D:return r=e,Gt?xe(Gt.call(r)):{}}}(e,u,l)}}a||(a=new Qt);var h=a.get(e);if(h)return h;a.set(e,s),ss(e)?e.forEach((function(r){s.add(sr(r,n,t,r,e,a))})):rs(e)&&e.forEach((function(r,i){s.set(i,sr(r,n,t,i,e,a))}));var g=d?i:(A?c?to:no:c?Ws:js)(e);return wn(g||e,(function(r,i){g&&(r=e[i=r]),er(s,i,sr(r,n,t,i,e,a))})),s}function lr(e,n,t){var r=t.length;if(null==e)return!r;for(e=xe(e);r--;){var o=t[r],a=n[o],s=e[o];if(s===i&&!(o in e)||!a(s))return!1}return!0}function cr(e,n,t){if("function"!=typeof e)throw new Ee(o);return Io((function(){e.apply(i,t)}),n)}function Ar(e,n,t,r){var i=-1,o=xn,a=!0,s=e.length,l=[],c=n.length;if(!s)return l;t&&(n=kn(n,On(t))),r?(o=yn,a=!1):n.length>=200&&(o=Hn,a=!1,n=new Nt(n));e:for(;++i<s;){var A=e[i],d=null==t?A:t(A);if(A=r||0!==A?A:0,a&&d==d){for(var u=c;u--;)if(n[u]===d)continue e;l.push(A)}else o(n,d,r)||l.push(A)}return l}Yt.templateSettings={escape:K,evaluate:M,interpolate:V,variable:"",imports:{_:Yt}},Yt.prototype=Ft.prototype,Yt.prototype.constructor=Yt,Tt.prototype=Ut(Ft.prototype),Tt.prototype.constructor=Tt,Jt.prototype=Ut(Ft.prototype),Jt.prototype.constructor=Jt,Ot.prototype.clear=function(){this.__data__=St?St(null):{},this.size=0},Ot.prototype.delete=function(e){var n=this.has(e)&&delete this.__data__[e];return this.size-=n?1:0,n},Ot.prototype.get=function(e){var n=this.__data__;if(St){var t=n[e];return t===a?i:t}return We.call(n,e)?n[e]:i},Ot.prototype.has=function(e){var n=this.__data__;return St?n[e]!==i:We.call(n,e)},Ot.prototype.set=function(e,n){var t=this.__data__;return this.size+=this.has(e)?0:1,t[e]=St&&n===i?a:n,this},zt.prototype.clear=function(){this.__data__=[],this.size=0},zt.prototype.delete=function(e){var n=this.__data__,t=nr(n,e);return!(t<0||(t==n.length-1?n.pop():rn.call(n,t,1),--this.size,0))},zt.prototype.get=function(e){var n=this.__data__,t=nr(n,e);return t<0?i:n[t][1]},zt.prototype.has=function(e){return nr(this.__data__,e)>-1},zt.prototype.set=function(e,n){var t=this.__data__,r=nr(t,e);return r<0?(++this.size,t.push([e,n])):t[r][1]=n,this},Ht.prototype.clear=function(){this.size=0,this.__data__={hash:new Ot,map:new(xt||zt),string:new Ot}},Ht.prototype.delete=function(e){var n=so(this,e).delete(e);return this.size-=n?1:0,n},Ht.prototype.get=function(e){return so(this,e).get(e)},Ht.prototype.has=function(e){return so(this,e).has(e)},Ht.prototype.set=function(e,n){var t=so(this,e),r=t.size;return t.set(e,n),this.size+=t.size==r?0:1,this},Nt.prototype.add=Nt.prototype.push=function(e){return this.__data__.set(e,a),this},Nt.prototype.has=function(e){return this.__data__.has(e)},Qt.prototype.clear=function(){this.__data__=new zt,this.size=0},Qt.prototype.delete=function(e){var n=this.__data__,t=n.delete(e);return this.size=n.size,t},Qt.prototype.get=function(e){return this.__data__.get(e)},Qt.prototype.has=function(e){return this.__data__.has(e)},Qt.prototype.set=function(e,n){var t=this.__data__;if(t instanceof zt){var r=t.__data__;if(!xt||r.length<199)return r.push([e,n]),this.size=++t.size,this;t=this.__data__=new Ht(r)}return t.set(e,n),this.size=t.size,this};var dr=Li(_r),ur=Li(wr,!0);function pr(e,n){var t=!0;return dr(e,(function(e,r,i){return t=!!n(e,r,i)})),t}function hr(e,n,t){for(var r=-1,o=e.length;++r<o;){var a=e[r],s=n(a);if(null!=s&&(l===i?s==s&&!cs(s):t(s,l)))var l=s,c=a}return c}function Cr(e,n){var t=[];return dr(e,(function(e,r,i){n(e,r,i)&&t.push(e)})),t}function gr(e,n,t,r,i){var o=-1,a=e.length;for(t||(t=go),i||(i=[]);++o<a;){var s=e[o];n>0&&t(s)?n>1?gr(s,n-1,t,r,i):En(i,s):r||(i[i.length]=s)}return i}var fr=ji(),mr=ji(!0);function _r(e,n){return e&&fr(e,n,js)}function wr(e,n){return e&&mr(e,n,js)}function Br(e,n){return vn(n,(function(n){return Xa(e[n])}))}function br(e,n){for(var t=0,r=(n=fi(n,e)).length;null!=e&&t<r;)e=e[Po(n[t++])];return t&&t==r?e:i}function vr(e,n,t){var r=n(e);return za(e)?r:En(r,t(e))}function xr(e){return null==e?e===i?"[object Undefined]":"[object Null]":ln&&ln in xe(e)?function(e){var n=We.call(e,ln),t=e[ln];try{e[ln]=i;var r=!0}catch(e){}var o=Re.call(e);return r&&(n?e[ln]=t:delete e[ln]),o}(e):function(e){return Re.call(e)}(e)}function yr(e,n){return e>n}function kr(e,n){return null!=e&&We.call(e,n)}function Er(e,n){return null!=e&&n in xe(e)}function Sr(e,n,t){for(var o=t?yn:xn,a=e[0].length,s=e.length,l=s,c=r(s),A=1/0,d=[];l--;){var u=e[l];l&&n&&(u=kn(u,On(n))),A=mt(u.length,A),c[l]=!t&&(n||a>=120&&u.length>=120)?new Nt(l&&u):i}u=e[0];var p=-1,h=c[0];e:for(;++p<a&&d.length<A;){var C=u[p],g=n?n(C):C;if(C=t||0!==C?C:0,!(h?Hn(h,g):o(d,g,t))){for(l=s;--l;){var f=c[l];if(!(f?Hn(f,g):o(e[l],g,t)))continue e}h&&h.push(g),d.push(C)}}return d}function Dr(e,n,t){var r=null==(e=ko(e,n=fi(n,e)))?e:e[Po(Vo(n))];return null==r?i:mn(r,e,t)}function Ir(e){return ts(e)&&xr(e)==C}function Lr(e,n,t,r,o){return e===n||(null==e||null==n||!ts(e)&&!ts(n)?e!=e&&n!=n:function(e,n,t,r,o,a){var s=za(e),l=za(n),c=s?g:po(e),A=l?g:po(n),d=(c=c==C?x:c)==x,u=(A=A==C?x:A)==x,p=c==A;if(p&&Ka(e)){if(!Ka(n))return!1;s=!0,d=!1}if(p&&!d)return a||(a=new Qt),s||As(e)?Zi(e,n,t,r,o,a):function(e,n,t,r,i,o,a){switch(t){case j:if(e.byteLength!=n.byteLength||e.byteOffset!=n.byteOffset)return!1;e=e.buffer,n=n.buffer;case L:return!(e.byteLength!=n.byteLength||!o(new Te(e),new Te(n)));case f:case m:case v:return Fa(+e,+n);case _:return e.name==n.name&&e.message==n.message;case k:case S:return e==n+"";case b:var s=et;case E:var l=1&r;if(s||(s=rt),e.size!=n.size&&!l)return!1;var c=a.get(e);if(c)return c==n;r|=2,a.set(e,n);var A=Zi(s(e),s(n),r,i,o,a);return a.delete(e),A;case D:if(Gt)return Gt.call(e)==Gt.call(n)}return!1}(e,n,c,t,r,o,a);if(!(1&t)){var h=d&&We.call(e,"__wrapped__"),w=u&&We.call(n,"__wrapped__");if(h||w){var B=h?e.value():e,y=w?n.value():n;return a||(a=new Qt),o(B,y,t,r,a)}}return!!p&&(a||(a=new Qt),function(e,n,t,r,o,a){var s=1&t,l=no(e),c=l.length;if(c!=no(n).length&&!s)return!1;for(var A=c;A--;){var d=l[A];if(!(s?d in n:We.call(n,d)))return!1}var u=a.get(e),p=a.get(n);if(u&&p)return u==n&&p==e;var h=!0;a.set(e,n),a.set(n,e);for(var C=s;++A<c;){var g=e[d=l[A]],f=n[d];if(r)var m=s?r(f,g,d,n,e,a):r(g,f,d,e,n,a);if(!(m===i?g===f||o(g,f,t,r,a):m)){h=!1;break}C||(C="constructor"==d)}if(h&&!C){var _=e.constructor,w=n.constructor;_==w||!("constructor"in e)||!("constructor"in n)||"function"==typeof _&&_ instanceof _&&"function"==typeof w&&w instanceof w||(h=!1)}return a.delete(e),a.delete(n),h}(e,n,t,r,o,a))}(e,n,t,r,Lr,o))}function jr(e,n,t,r){var o=t.length,a=o,s=!r;if(null==e)return!a;for(e=xe(e);o--;){var l=t[o];if(s&&l[2]?l[1]!==e[l[0]]:!(l[0]in e))return!1}for(;++o<a;){var c=(l=t[o])[0],A=e[c],d=l[1];if(s&&l[2]){if(A===i&&!(c in e))return!1}else{var u=new Qt;if(r)var p=r(A,d,c,e,n,u);if(!(p===i?Lr(d,A,3,r,u):p))return!1}}return!0}function Wr(e){return!(!ns(e)||(n=e,$e&&$e in n))&&(Xa(e)?Ye:Ce).test(Yo(e));var n}function qr(e){return"function"==typeof e?e:null==e?il:"object"==typeof e?za(e)?Yr(e[0],e[1]):Pr(e):pl(e)}function $r(e){if(!bo(e))return gt(e);var n=[];for(var t in xe(e))We.call(e,t)&&"constructor"!=t&&n.push(t);return n}function Rr(e,n){return e<n}function Gr(e,n){var t=-1,i=Na(e)?r(e.length):[];return dr(e,(function(e,r,o){i[++t]=n(e,r,o)})),i}function Pr(e){var n=lo(e);return 1==n.length&&n[0][2]?xo(n[0][0],n[0][1]):function(t){return t===e||jr(t,e,n)}}function Yr(e,n){return _o(e)&&vo(n)?xo(Po(e),n):function(t){var r=Es(t,e);return r===i&&r===n?Ss(t,e):Lr(n,r,3)}}function Ur(e,n,t,r,o){e!==n&&fr(n,(function(a,s){if(o||(o=new Qt),ns(a))!function(e,n,t,r,o,a,s){var l=So(e,t),c=So(n,t),A=s.get(c);if(A)Zt(e,t,A);else{var d=a?a(l,c,t+"",e,n,s):i,u=d===i;if(u){var p=za(c),h=!p&&Ka(c),C=!p&&!h&&As(c);d=c,p||h||C?za(l)?d=l:Qa(l)?d=Ei(l):h?(u=!1,d=Bi(c,!0)):C?(u=!1,d=vi(c,!0)):d=[]:os(c)||Oa(c)?(d=l,Oa(l)?d=ms(l):ns(l)&&!Xa(l)||(d=Co(c))):u=!1}u&&(s.set(c,d),o(d,c,r,a,s),s.delete(c)),Zt(e,t,d)}}(e,n,s,t,Ur,r,o);else{var l=r?r(So(e,s),a,s+"",e,n,o):i;l===i&&(l=a),Zt(e,s,l)}}),Ws)}function Fr(e,n){var t=e.length;if(t)return fo(n+=n<0?t:0,t)?e[n]:i}function Tr(e,n,t){n=n.length?kn(n,(function(e){return za(e)?function(n){return br(n,1===e.length?e[0]:e)}:e})):[il];var r=-1;n=kn(n,On(ao()));var i=Gr(e,(function(e,t,i){var o=kn(n,(function(n){return n(e)}));return{criteria:o,index:++r,value:e}}));return function(e,n){var r=e.length;for(e.sort((function(e,n){return function(e,n,t){for(var r=-1,i=e.criteria,o=n.criteria,a=i.length,s=t.length;++r<a;){var l=xi(i[r],o[r]);if(l)return r>=s?l:l*("desc"==t[r]?-1:1)}return e.index-n.index}(e,n,t)}));r--;)e[r]=e[r].value;return e}(i)}function Jr(e,n,t){for(var r=-1,i=n.length,o={};++r<i;){var a=n[r],s=br(e,a);t(s,a)&&Vr(o,fi(a,e),s)}return o}function Or(e,n,t,r){var i=r?$n:qn,o=-1,a=n.length,s=e;for(e===n&&(n=Ei(n)),t&&(s=kn(e,On(t)));++o<a;)for(var l=0,c=n[o],A=t?t(c):c;(l=i(s,A,l,r))>-1;)s!==e&&rn.call(s,l,1),rn.call(e,l,1);return e}function zr(e,n){for(var t=e?n.length:0,r=t-1;t--;){var i=n[t];if(t==r||i!==o){var o=i;fo(i)?rn.call(e,i,1):ci(e,i)}}return e}function Hr(e,n){return e+dt(Bt()*(n-e+1))}function Nr(e,n){var t="";if(!e||n<1||n>d)return t;do{n%2&&(t+=e),(n=dt(n/2))&&(e+=e)}while(n);return t}function Qr(e,n){return Lo(yo(e,n,il),e+"")}function Kr(e){return Mt(Fs(e))}function Mr(e,n){var t=Fs(e);return qo(t,ar(n,0,t.length))}function Vr(e,n,t,r){if(!ns(e))return e;for(var o=-1,a=(n=fi(n,e)).length,s=a-1,l=e;null!=l&&++o<a;){var c=Po(n[o]),A=t;if("__proto__"===c||"constructor"===c||"prototype"===c)return e;if(o!=s){var d=l[c];(A=r?r(d,c,l):i)===i&&(A=ns(d)?d:fo(n[o+1])?[]:{})}er(l,c,A),l=l[c]}return e}var Xr=Dt?function(e,n){return Dt.set(e,n),e}:il,Zr=An?function(e,n){return An(e,"toString",{configurable:!0,enumerable:!1,value:nl(n),writable:!0})}:il;function ei(e){return qo(Fs(e))}function ni(e,n,t){var i=-1,o=e.length;n<0&&(n=-n>o?0:o+n),(t=t>o?o:t)<0&&(t+=o),o=n>t?0:t-n>>>0,n>>>=0;for(var a=r(o);++i<o;)a[i]=e[i+n];return a}function ti(e,n){var t;return dr(e,(function(e,r,i){return!(t=n(e,r,i))})),!!t}function ri(e,n,t){var r=0,i=null==e?r:e.length;if("number"==typeof n&&n==n&&i<=2147483647){for(;r<i;){var o=r+i>>>1,a=e[o];null!==a&&!cs(a)&&(t?a<=n:a<n)?r=o+1:i=o}return i}return ii(e,n,il,t)}function ii(e,n,t,r){var o=0,a=null==e?0:e.length;if(0===a)return 0;for(var s=(n=t(n))!=n,l=null===n,c=cs(n),A=n===i;o<a;){var d=dt((o+a)/2),u=t(e[d]),p=u!==i,h=null===u,C=u==u,g=cs(u);if(s)var f=r||C;else f=A?C&&(r||p):l?C&&p&&(r||!h):c?C&&p&&!h&&(r||!g):!h&&!g&&(r?u<=n:u<n);f?o=d+1:a=d}return mt(a,4294967294)}function oi(e,n){for(var t=-1,r=e.length,i=0,o=[];++t<r;){var a=e[t],s=n?n(a):a;if(!t||!Fa(s,l)){var l=s;o[i++]=0===a?0:a}}return o}function ai(e){return"number"==typeof e?e:cs(e)?u:+e}function si(e){if("string"==typeof e)return e;if(za(e))return kn(e,si)+"";if(cs(e))return Pt?Pt.call(e):"";var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}function li(e,n,t){var r=-1,i=xn,o=e.length,a=!0,s=[],l=s;if(t)a=!1,i=yn;else if(o>=200){var c=n?null:Ni(e);if(c)return rt(c);a=!1,i=Hn,l=new Nt}else l=n?[]:s;e:for(;++r<o;){var A=e[r],d=n?n(A):A;if(A=t||0!==A?A:0,a&&d==d){for(var u=l.length;u--;)if(l[u]===d)continue e;n&&l.push(d),s.push(A)}else i(l,d,t)||(l!==s&&l.push(d),s.push(A))}return s}function ci(e,n){return null==(e=ko(e,n=fi(n,e)))||delete e[Po(Vo(n))]}function Ai(e,n,t,r){return Vr(e,n,t(br(e,n)),r)}function di(e,n,t,r){for(var i=e.length,o=r?i:-1;(r?o--:++o<i)&&n(e[o],o,e););return t?ni(e,r?0:o,r?o+1:i):ni(e,r?o+1:0,r?i:o)}function ui(e,n){var t=e;return t instanceof Jt&&(t=t.value()),Sn(n,(function(e,n){return n.func.apply(n.thisArg,En([e],n.args))}),t)}function pi(e,n,t){var i=e.length;if(i<2)return i?li(e[0]):[];for(var o=-1,a=r(i);++o<i;)for(var s=e[o],l=-1;++l<i;)l!=o&&(a[o]=Ar(a[o]||s,e[l],n,t));return li(gr(a,1),n,t)}function hi(e,n,t){for(var r=-1,o=e.length,a=n.length,s={};++r<o;){var l=r<a?n[r]:i;t(s,e[r],l)}return s}function Ci(e){return Qa(e)?e:[]}function gi(e){return"function"==typeof e?e:il}function fi(e,n){return za(e)?e:_o(e,n)?[e]:Go(_s(e))}var mi=Qr;function _i(e,n,t){var r=e.length;return t=t===i?r:t,!n&&t>=r?e:ni(e,n,t)}var wi=dn||function(e){return an.clearTimeout(e)};function Bi(e,n){if(n)return e.slice();var t=e.length,r=Je?Je(t):new e.constructor(t);return e.copy(r),r}function bi(e){var n=new e.constructor(e.byteLength);return new Te(n).set(new Te(e)),n}function vi(e,n){var t=n?bi(e.buffer):e.buffer;return new e.constructor(t,e.byteOffset,e.length)}function xi(e,n){if(e!==n){var t=e!==i,r=null===e,o=e==e,a=cs(e),s=n!==i,l=null===n,c=n==n,A=cs(n);if(!l&&!A&&!a&&e>n||a&&s&&c&&!l&&!A||r&&s&&c||!t&&c||!o)return 1;if(!r&&!a&&!A&&e<n||A&&t&&o&&!r&&!a||l&&t&&o||!s&&o||!c)return-1}return 0}function yi(e,n,t,i){for(var o=-1,a=e.length,s=t.length,l=-1,c=n.length,A=ft(a-s,0),d=r(c+A),u=!i;++l<c;)d[l]=n[l];for(;++o<s;)(u||o<a)&&(d[t[o]]=e[o]);for(;A--;)d[l++]=e[o++];return d}function ki(e,n,t,i){for(var o=-1,a=e.length,s=-1,l=t.length,c=-1,A=n.length,d=ft(a-l,0),u=r(d+A),p=!i;++o<d;)u[o]=e[o];for(var h=o;++c<A;)u[h+c]=n[c];for(;++s<l;)(p||o<a)&&(u[h+t[s]]=e[o++]);return u}function Ei(e,n){var t=-1,i=e.length;for(n||(n=r(i));++t<i;)n[t]=e[t];return n}function Si(e,n,t,r){var o=!t;t||(t={});for(var a=-1,s=n.length;++a<s;){var l=n[a],c=r?r(t[l],e[l],l,t,e):i;c===i&&(c=e[l]),o?ir(t,l,c):er(t,l,c)}return t}function Di(e,n){return function(t,r){var i=za(t)?_n:tr,o=n?n():{};return i(t,e,ao(r,2),o)}}function Ii(e){return Qr((function(n,t){var r=-1,o=t.length,a=o>1?t[o-1]:i,s=o>2?t[2]:i;for(a=e.length>3&&"function"==typeof a?(o--,a):i,s&&mo(t[0],t[1],s)&&(a=o<3?i:a,o=1),n=xe(n);++r<o;){var l=t[r];l&&e(n,l,r,a)}return n}))}function Li(e,n){return function(t,r){if(null==t)return t;if(!Na(t))return e(t,r);for(var i=t.length,o=n?i:-1,a=xe(t);(n?o--:++o<i)&&!1!==r(a[o],o,a););return t}}function ji(e){return function(n,t,r){for(var i=-1,o=xe(n),a=r(n),s=a.length;s--;){var l=a[e?s:++i];if(!1===t(o[l],l,o))break}return n}}function Wi(e){return function(n){var t=Zn(n=_s(n))?at(n):i,r=t?t[0]:n.charAt(0),o=t?_i(t,1).join(""):n.slice(1);return r[e]()+o}}function qi(e){return function(n){return Sn(Xs(Os(n).replace(Oe,"")),e,"")}}function $i(e){return function(){var n=arguments;switch(n.length){case 0:return new e;case 1:return new e(n[0]);case 2:return new e(n[0],n[1]);case 3:return new e(n[0],n[1],n[2]);case 4:return new e(n[0],n[1],n[2],n[3]);case 5:return new e(n[0],n[1],n[2],n[3],n[4]);case 6:return new e(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new e(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var t=Ut(e.prototype),r=e.apply(t,n);return ns(r)?r:t}}function Ri(e){return function(n,t,r){var o=xe(n);if(!Na(n)){var a=ao(t,3);n=js(n),t=function(e){return a(o[e],e,o)}}var s=e(n,t,r);return s>-1?o[a?n[s]:s]:i}}function Gi(e){return eo((function(n){var t=n.length,r=t,a=Tt.prototype.thru;for(e&&n.reverse();r--;){var s=n[r];if("function"!=typeof s)throw new Ee(o);if(a&&!l&&"wrapper"==io(s))var l=new Tt([],!0)}for(r=l?r:t;++r<t;){var c=io(s=n[r]),A="wrapper"==c?ro(s):i;l=A&&wo(A[0])&&424==A[1]&&!A[4].length&&1==A[9]?l[io(A[0])].apply(l,A[3]):1==s.length&&wo(s)?l[c]():l.thru(s)}return function(){var e=arguments,r=e[0];if(l&&1==e.length&&za(r))return l.plant(r).value();for(var i=0,o=t?n[i].apply(this,e):r;++i<t;)o=n[i].call(this,o);return o}}))}function Pi(e,n,t,o,a,s,l,A,d,u){var p=n&c,h=1&n,C=2&n,g=24&n,f=512&n,m=C?i:$i(e);return function i(){for(var c=arguments.length,_=r(c),w=c;w--;)_[w]=arguments[w];if(g)var B=oo(i),b=Kn(_,B);if(o&&(_=yi(_,o,a,g)),s&&(_=ki(_,s,l,g)),c-=b,g&&c<u){var v=tt(_,B);return zi(e,n,Pi,i.placeholder,t,_,v,A,d,u-c)}var x=h?t:this,y=C?x[e]:e;return c=_.length,A?_=Eo(_,A):f&&c>1&&_.reverse(),p&&d<c&&(_.length=d),this&&this!==an&&this instanceof i&&(y=m||$i(y)),y.apply(x,_)}}function Yi(e,n){return function(t,r){return function(e,n,t,r){return _r(e,(function(e,i,o){n(r,t(e),i,o)})),r}(t,e,n(r),{})}}function Ui(e,n){return function(t,r){var o;if(t===i&&r===i)return n;if(t!==i&&(o=t),r!==i){if(o===i)return r;"string"==typeof t||"string"==typeof r?(t=si(t),r=si(r)):(t=ai(t),r=ai(r)),o=e(t,r)}return o}}function Fi(e){return eo((function(n){return n=kn(n,On(ao())),Qr((function(t){var r=this;return e(n,(function(e){return mn(e,r,t)}))}))}))}function Ti(e,n){var t=(n=n===i?" ":si(n)).length;if(t<2)return t?Nr(n,e):n;var r=Nr(n,At(e/ot(n)));return Zn(n)?_i(at(r),0,e).join(""):r.slice(0,e)}function Ji(e){return function(n,t,o){return o&&"number"!=typeof o&&mo(n,t,o)&&(t=o=i),n=hs(n),t===i?(t=n,n=0):t=hs(t),function(e,n,t,i){for(var o=-1,a=ft(At((n-e)/(t||1)),0),s=r(a);a--;)s[i?a:++o]=e,e+=t;return s}(n,t,o=o===i?n<t?1:-1:hs(o),e)}}function Oi(e){return function(n,t){return"string"==typeof n&&"string"==typeof t||(n=fs(n),t=fs(t)),e(n,t)}}function zi(e,n,t,r,o,a,s,c,A,d){var u=8&n;n|=u?l:64,4&(n&=~(u?64:l))||(n&=-4);var p=[e,n,o,u?a:i,u?s:i,u?i:a,u?i:s,c,A,d],h=t.apply(i,p);return wo(e)&&Do(h,p),h.placeholder=r,jo(h,e,n)}function Hi(e){var n=ve[e];return function(e,t){if(e=fs(e),(t=null==t?0:mt(Cs(t),292))&&ht(e)){var r=(_s(e)+"e").split("e");return+((r=(_s(n(r[0]+"e"+(+r[1]+t)))+"e").split("e"))[0]+"e"+(+r[1]-t))}return n(e)}}var Ni=kt&&1/rt(new kt([,-0]))[1]==A?function(e){return new kt(e)}:cl;function Qi(e){return function(n){var t=po(n);return t==b?et(n):t==E?it(n):function(e,n){return kn(n,(function(n){return[n,e[n]]}))}(n,e(n))}}function Ki(e,n,t,a,A,d,u,p){var h=2&n;if(!h&&"function"!=typeof e)throw new Ee(o);var C=a?a.length:0;if(C||(n&=-97,a=A=i),u=u===i?u:ft(Cs(u),0),p=p===i?p:Cs(p),C-=A?A.length:0,64&n){var g=a,f=A;a=A=i}var m=h?i:ro(e),_=[e,n,t,a,A,g,f,d,u,p];if(m&&function(e,n){var t=e[1],r=n[1],i=t|r,o=i<131,a=r==c&&8==t||r==c&&256==t&&e[7].length<=n[8]||384==r&&n[7].length<=n[8]&&8==t;if(!o&&!a)return e;1&r&&(e[2]=n[2],i|=1&t?0:4);var l=n[3];if(l){var A=e[3];e[3]=A?yi(A,l,n[4]):l,e[4]=A?tt(e[3],s):n[4]}(l=n[5])&&(A=e[5],e[5]=A?ki(A,l,n[6]):l,e[6]=A?tt(e[5],s):n[6]),(l=n[7])&&(e[7]=l),r&c&&(e[8]=null==e[8]?n[8]:mt(e[8],n[8])),null==e[9]&&(e[9]=n[9]),e[0]=n[0],e[1]=i}(_,m),e=_[0],n=_[1],t=_[2],a=_[3],A=_[4],!(p=_[9]=_[9]===i?h?0:e.length:ft(_[9]-C,0))&&24&n&&(n&=-25),n&&1!=n)w=8==n||16==n?function(e,n,t){var o=$i(e);return function a(){for(var s=arguments.length,l=r(s),c=s,A=oo(a);c--;)l[c]=arguments[c];var d=s<3&&l[0]!==A&&l[s-1]!==A?[]:tt(l,A);return(s-=d.length)<t?zi(e,n,Pi,a.placeholder,i,l,d,i,i,t-s):mn(this&&this!==an&&this instanceof a?o:e,this,l)}}(e,n,p):n!=l&&33!=n||A.length?Pi.apply(i,_):function(e,n,t,i){var o=1&n,a=$i(e);return function n(){for(var s=-1,l=arguments.length,c=-1,A=i.length,d=r(A+l),u=this&&this!==an&&this instanceof n?a:e;++c<A;)d[c]=i[c];for(;l--;)d[c++]=arguments[++s];return mn(u,o?t:this,d)}}(e,n,t,a);else var w=function(e,n,t){var r=1&n,i=$i(e);return function n(){return(this&&this!==an&&this instanceof n?i:e).apply(r?t:this,arguments)}}(e,n,t);return jo((m?Xr:Do)(w,_),e,n)}function Mi(e,n,t,r){return e===i||Fa(e,Ie[t])&&!We.call(r,t)?n:e}function Vi(e,n,t,r,o,a){return ns(e)&&ns(n)&&(a.set(n,e),Ur(e,n,i,Vi,a),a.delete(n)),e}function Xi(e){return os(e)?i:e}function Zi(e,n,t,r,o,a){var s=1&t,l=e.length,c=n.length;if(l!=c&&!(s&&c>l))return!1;var A=a.get(e),d=a.get(n);if(A&&d)return A==n&&d==e;var u=-1,p=!0,h=2&t?new Nt:i;for(a.set(e,n),a.set(n,e);++u<l;){var C=e[u],g=n[u];if(r)var f=s?r(g,C,u,n,e,a):r(C,g,u,e,n,a);if(f!==i){if(f)continue;p=!1;break}if(h){if(!In(n,(function(e,n){if(!Hn(h,n)&&(C===e||o(C,e,t,r,a)))return h.push(n)}))){p=!1;break}}else if(C!==g&&!o(C,g,t,r,a)){p=!1;break}}return a.delete(e),a.delete(n),p}function eo(e){return Lo(yo(e,i,Ho),e+"")}function no(e){return vr(e,js,Ao)}function to(e){return vr(e,Ws,uo)}var ro=Dt?function(e){return Dt.get(e)}:cl;function io(e){for(var n=e.name+"",t=It[n],r=We.call(It,n)?t.length:0;r--;){var i=t[r],o=i.func;if(null==o||o==e)return i.name}return n}function oo(e){return(We.call(Yt,"placeholder")?Yt:e).placeholder}function ao(){var e=Yt.iteratee||ol;return e=e===ol?qr:e,arguments.length?e(arguments[0],arguments[1]):e}function so(e,n){var t,r,i=e.__data__;return("string"==(r=typeof(t=n))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==t:null===t)?i["string"==typeof n?"string":"hash"]:i.map}function lo(e){for(var n=js(e),t=n.length;t--;){var r=n[t],i=e[r];n[t]=[r,i,vo(i)]}return n}function co(e,n){var t=function(e,n){return null==e?i:e[n]}(e,n);return Wr(t)?t:i}var Ao=ut?function(e){return null==e?[]:(e=xe(e),vn(ut(e),(function(n){return en.call(e,n)})))}:gl,uo=ut?function(e){for(var n=[];e;)En(n,Ao(e)),e=He(e);return n}:gl,po=xr;function ho(e,n,t){for(var r=-1,i=(n=fi(n,e)).length,o=!1;++r<i;){var a=Po(n[r]);if(!(o=null!=e&&t(e,a)))break;e=e[a]}return o||++r!=i?o:!!(i=null==e?0:e.length)&&es(i)&&fo(a,i)&&(za(e)||Oa(e))}function Co(e){return"function"!=typeof e.constructor||bo(e)?{}:Ut(He(e))}function go(e){return za(e)||Oa(e)||!!(on&&e&&e[on])}function fo(e,n){var t=typeof e;return!!(n=null==n?d:n)&&("number"==t||"symbol"!=t&&fe.test(e))&&e>-1&&e%1==0&&e<n}function mo(e,n,t){if(!ns(t))return!1;var r=typeof n;return!!("number"==r?Na(t)&&fo(n,t.length):"string"==r&&n in t)&&Fa(t[n],e)}function _o(e,n){if(za(e))return!1;var t=typeof e;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=e&&!cs(e))||Z.test(e)||!X.test(e)||null!=n&&e in xe(n)}function wo(e){var n=io(e),t=Yt[n];if("function"!=typeof t||!(n in Jt.prototype))return!1;if(e===t)return!0;var r=ro(t);return!!r&&e===r[0]}(vt&&po(new vt(new ArrayBuffer(1)))!=j||xt&&po(new xt)!=b||yt&&po(yt.resolve())!=y||kt&&po(new kt)!=E||Et&&po(new Et)!=I)&&(po=function(e){var n=xr(e),t=n==x?e.constructor:i,r=t?Yo(t):"";if(r)switch(r){case Lt:return j;case jt:return b;case Wt:return y;case qt:return E;case $t:return I}return n});var Bo=Le?Xa:fl;function bo(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||Ie)}function vo(e){return e==e&&!ns(e)}function xo(e,n){return function(t){return null!=t&&t[e]===n&&(n!==i||e in xe(t))}}function yo(e,n,t){return n=ft(n===i?e.length-1:n,0),function(){for(var i=arguments,o=-1,a=ft(i.length-n,0),s=r(a);++o<a;)s[o]=i[n+o];o=-1;for(var l=r(n+1);++o<n;)l[o]=i[o];return l[n]=t(s),mn(e,this,l)}}function ko(e,n){return n.length<2?e:br(e,ni(n,0,-1))}function Eo(e,n){for(var t=e.length,r=mt(n.length,t),o=Ei(e);r--;){var a=n[r];e[r]=fo(a,t)?o[a]:i}return e}function So(e,n){if(("constructor"!==n||"function"!=typeof e[n])&&"__proto__"!=n)return e[n]}var Do=Wo(Xr),Io=Yn||function(e,n){return an.setTimeout(e,n)},Lo=Wo(Zr);function jo(e,n,t){var r=n+"";return Lo(e,function(e,n){var t=n.length;if(!t)return e;var r=t-1;return n[r]=(t>1?"& ":"")+n[r],n=n.join(t>2?", ":" "),e.replace(oe,"{\n/* [wrapped with "+n+"] */\n")}(r,function(e,n){return wn(h,(function(t){var r="_."+t[0];n&t[1]&&!xn(e,r)&&e.push(r)})),e.sort()}(function(e){var n=e.match(ae);return n?n[1].split(se):[]}(r),t)))}function Wo(e){var n=0,t=0;return function(){var r=_t(),o=16-(r-t);if(t=r,o>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(i,arguments)}}function qo(e,n){var t=-1,r=e.length,o=r-1;for(n=n===i?r:n;++t<n;){var a=Hr(t,o),s=e[a];e[a]=e[t],e[t]=s}return e.length=n,e}var $o,Ro,Go=($o=$a((function(e){var n=[];return 46===e.charCodeAt(0)&&n.push(""),e.replace(ee,(function(e,t,r,i){n.push(r?i.replace(Ae,"$1"):t||e)})),n}),(function(e){return 500===Ro.size&&Ro.clear(),e})),Ro=$o.cache,$o);function Po(e){if("string"==typeof e||cs(e))return e;var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}function Yo(e){if(null!=e){try{return je.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Uo(e){if(e instanceof Jt)return e.clone();var n=new Tt(e.__wrapped__,e.__chain__);return n.__actions__=Ei(e.__actions__),n.__index__=e.__index__,n.__values__=e.__values__,n}var Fo=Qr((function(e,n){return Qa(e)?Ar(e,gr(n,1,Qa,!0)):[]})),To=Qr((function(e,n){var t=Vo(n);return Qa(t)&&(t=i),Qa(e)?Ar(e,gr(n,1,Qa,!0),ao(t,2)):[]})),Jo=Qr((function(e,n){var t=Vo(n);return Qa(t)&&(t=i),Qa(e)?Ar(e,gr(n,1,Qa,!0),i,t):[]}));function Oo(e,n,t){var r=null==e?0:e.length;if(!r)return-1;var i=null==t?0:Cs(t);return i<0&&(i=ft(r+i,0)),Wn(e,ao(n,3),i)}function zo(e,n,t){var r=null==e?0:e.length;if(!r)return-1;var o=r-1;return t!==i&&(o=Cs(t),o=t<0?ft(r+o,0):mt(o,r-1)),Wn(e,ao(n,3),o,!0)}function Ho(e){return null!=e&&e.length?gr(e,1):[]}function No(e){return e&&e.length?e[0]:i}var Qo=Qr((function(e){var n=kn(e,Ci);return n.length&&n[0]===e[0]?Sr(n):[]})),Ko=Qr((function(e){var n=Vo(e),t=kn(e,Ci);return n===Vo(t)?n=i:t.pop(),t.length&&t[0]===e[0]?Sr(t,ao(n,2)):[]})),Mo=Qr((function(e){var n=Vo(e),t=kn(e,Ci);return(n="function"==typeof n?n:i)&&t.pop(),t.length&&t[0]===e[0]?Sr(t,i,n):[]}));function Vo(e){var n=null==e?0:e.length;return n?e[n-1]:i}var Xo=Qr(Zo);function Zo(e,n){return e&&e.length&&n&&n.length?Or(e,n):e}var ea=eo((function(e,n){var t=null==e?0:e.length,r=or(e,n);return zr(e,kn(n,(function(e){return fo(e,t)?+e:e})).sort(xi)),r}));function na(e){return null==e?e:bt.call(e)}var ta=Qr((function(e){return li(gr(e,1,Qa,!0))})),ra=Qr((function(e){var n=Vo(e);return Qa(n)&&(n=i),li(gr(e,1,Qa,!0),ao(n,2))})),ia=Qr((function(e){var n=Vo(e);return n="function"==typeof n?n:i,li(gr(e,1,Qa,!0),i,n)}));function oa(e){if(!e||!e.length)return[];var n=0;return e=vn(e,(function(e){if(Qa(e))return n=ft(e.length,n),!0})),Tn(n,(function(n){return kn(e,Pn(n))}))}function aa(e,n){if(!e||!e.length)return[];var t=oa(e);return null==n?t:kn(t,(function(e){return mn(n,i,e)}))}var sa=Qr((function(e,n){return Qa(e)?Ar(e,n):[]})),la=Qr((function(e){return pi(vn(e,Qa))})),ca=Qr((function(e){var n=Vo(e);return Qa(n)&&(n=i),pi(vn(e,Qa),ao(n,2))})),Aa=Qr((function(e){var n=Vo(e);return n="function"==typeof n?n:i,pi(vn(e,Qa),i,n)})),da=Qr(oa),ua=Qr((function(e){var n=e.length,t=n>1?e[n-1]:i;return t="function"==typeof t?(e.pop(),t):i,aa(e,t)}));function pa(e){var n=Yt(e);return n.__chain__=!0,n}function ha(e,n){return n(e)}var Ca=eo((function(e){var n=e.length,t=n?e[0]:0,r=this.__wrapped__,o=function(n){return or(n,e)};return!(n>1||this.__actions__.length)&&r instanceof Jt&&fo(t)?((r=r.slice(t,+t+(n?1:0))).__actions__.push({func:ha,args:[o],thisArg:i}),new Tt(r,this.__chain__).thru((function(e){return n&&!e.length&&e.push(i),e}))):this.thru(o)})),ga=Di((function(e,n,t){We.call(e,t)?++e[t]:ir(e,t,1)})),fa=Ri(Oo),ma=Ri(zo);function _a(e,n){return(za(e)?wn:dr)(e,ao(n,3))}function wa(e,n){return(za(e)?Bn:ur)(e,ao(n,3))}var Ba=Di((function(e,n,t){We.call(e,t)?e[t].push(n):ir(e,t,[n])})),ba=Qr((function(e,n,t){var i=-1,o="function"==typeof n,a=Na(e)?r(e.length):[];return dr(e,(function(e){a[++i]=o?mn(n,e,t):Dr(e,n,t)})),a})),va=Di((function(e,n,t){ir(e,t,n)}));function xa(e,n){return(za(e)?kn:Gr)(e,ao(n,3))}var ya=Di((function(e,n,t){e[t?0:1].push(n)}),(function(){return[[],[]]})),ka=Qr((function(e,n){if(null==e)return[];var t=n.length;return t>1&&mo(e,n[0],n[1])?n=[]:t>2&&mo(n[0],n[1],n[2])&&(n=[n[0]]),Tr(e,gr(n,1),[])})),Ea=Ln||function(){return an.Date.now()};function Sa(e,n,t){return n=t?i:n,n=e&&null==n?e.length:n,Ki(e,c,i,i,i,i,n)}function Da(e,n){var t;if("function"!=typeof n)throw new Ee(o);return e=Cs(e),function(){return--e>0&&(t=n.apply(this,arguments)),e<=1&&(n=i),t}}var Ia=Qr((function(e,n,t){var r=1;if(t.length){var i=tt(t,oo(Ia));r|=l}return Ki(e,r,n,t,i)})),La=Qr((function(e,n,t){var r=3;if(t.length){var i=tt(t,oo(La));r|=l}return Ki(n,r,e,t,i)}));function ja(e,n,t){var r,a,s,l,c,A,d=0,u=!1,p=!1,h=!0;if("function"!=typeof e)throw new Ee(o);function C(n){var t=r,o=a;return r=a=i,d=n,l=e.apply(o,t)}function g(e){return d=e,c=Io(m,n),u?C(e):l}function f(e){var t=e-A;return A===i||t>=n||t<0||p&&e-d>=s}function m(){var e=Ea();if(f(e))return _(e);c=Io(m,function(e){var t=n-(e-A);return p?mt(t,s-(e-d)):t}(e))}function _(e){return c=i,h&&r?C(e):(r=a=i,l)}function w(){var e=Ea(),t=f(e);if(r=arguments,a=this,A=e,t){if(c===i)return g(A);if(p)return wi(c),c=Io(m,n),C(A)}return c===i&&(c=Io(m,n)),l}return n=fs(n)||0,ns(t)&&(u=!!t.leading,s=(p="maxWait"in t)?ft(fs(t.maxWait)||0,n):s,h="trailing"in t?!!t.trailing:h),w.cancel=function(){c!==i&&wi(c),d=0,r=A=a=c=i},w.flush=function(){return c===i?l:_(Ea())},w}var Wa=Qr((function(e,n){return cr(e,1,n)})),qa=Qr((function(e,n,t){return cr(e,fs(n)||0,t)}));function $a(e,n){if("function"!=typeof e||null!=n&&"function"!=typeof n)throw new Ee(o);var t=function(){var r=arguments,i=n?n.apply(this,r):r[0],o=t.cache;if(o.has(i))return o.get(i);var a=e.apply(this,r);return t.cache=o.set(i,a)||o,a};return t.cache=new($a.Cache||Ht),t}function Ra(e){if("function"!=typeof e)throw new Ee(o);return function(){var n=arguments;switch(n.length){case 0:return!e.call(this);case 1:return!e.call(this,n[0]);case 2:return!e.call(this,n[0],n[1]);case 3:return!e.call(this,n[0],n[1],n[2])}return!e.apply(this,n)}}$a.Cache=Ht;var Ga=mi((function(e,n){var t=(n=1==n.length&&za(n[0])?kn(n[0],On(ao())):kn(gr(n,1),On(ao()))).length;return Qr((function(r){for(var i=-1,o=mt(r.length,t);++i<o;)r[i]=n[i].call(this,r[i]);return mn(e,this,r)}))})),Pa=Qr((function(e,n){var t=tt(n,oo(Pa));return Ki(e,l,i,n,t)})),Ya=Qr((function(e,n){var t=tt(n,oo(Ya));return Ki(e,64,i,n,t)})),Ua=eo((function(e,n){return Ki(e,256,i,i,i,n)}));function Fa(e,n){return e===n||e!=e&&n!=n}var Ta=Oi(yr),Ja=Oi((function(e,n){return e>=n})),Oa=Ir(function(){return arguments}())?Ir:function(e){return ts(e)&&We.call(e,"callee")&&!en.call(e,"callee")},za=r.isArray,Ha=un?On(un):function(e){return ts(e)&&xr(e)==L};function Na(e){return null!=e&&es(e.length)&&!Xa(e)}function Qa(e){return ts(e)&&Na(e)}var Ka=pt||fl,Ma=pn?On(pn):function(e){return ts(e)&&xr(e)==m};function Va(e){if(!ts(e))return!1;var n=xr(e);return n==_||"[object DOMException]"==n||"string"==typeof e.message&&"string"==typeof e.name&&!os(e)}function Xa(e){if(!ns(e))return!1;var n=xr(e);return n==w||n==B||"[object AsyncFunction]"==n||"[object Proxy]"==n}function Za(e){return"number"==typeof e&&e==Cs(e)}function es(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=d}function ns(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)}function ts(e){return null!=e&&"object"==typeof e}var rs=hn?On(hn):function(e){return ts(e)&&po(e)==b};function is(e){return"number"==typeof e||ts(e)&&xr(e)==v}function os(e){if(!ts(e)||xr(e)!=x)return!1;var n=He(e);if(null===n)return!0;var t=We.call(n,"constructor")&&n.constructor;return"function"==typeof t&&t instanceof t&&je.call(t)==Ge}var as=Cn?On(Cn):function(e){return ts(e)&&xr(e)==k},ss=gn?On(gn):function(e){return ts(e)&&po(e)==E};function ls(e){return"string"==typeof e||!za(e)&&ts(e)&&xr(e)==S}function cs(e){return"symbol"==typeof e||ts(e)&&xr(e)==D}var As=fn?On(fn):function(e){return ts(e)&&es(e.length)&&!!Xe[xr(e)]},ds=Oi(Rr),us=Oi((function(e,n){return e<=n}));function ps(e){if(!e)return[];if(Na(e))return ls(e)?at(e):Ei(e);if(sn&&e[sn])return function(e){for(var n,t=[];!(n=e.next()).done;)t.push(n.value);return t}(e[sn]());var n=po(e);return(n==b?et:n==E?rt:Fs)(e)}function hs(e){return e?(e=fs(e))===A||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function Cs(e){var n=hs(e),t=n%1;return n==n?t?n-t:n:0}function gs(e){return e?ar(Cs(e),0,p):0}function fs(e){if("number"==typeof e)return e;if(cs(e))return u;if(ns(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=ns(n)?n+"":n}if("string"!=typeof e)return 0===e?e:+e;e=Jn(e);var t=he.test(e);return t||ge.test(e)?tn(e.slice(2),t?2:8):pe.test(e)?u:+e}function ms(e){return Si(e,Ws(e))}function _s(e){return null==e?"":si(e)}var ws=Ii((function(e,n){if(bo(n)||Na(n))Si(n,js(n),e);else for(var t in n)We.call(n,t)&&er(e,t,n[t])})),Bs=Ii((function(e,n){Si(n,Ws(n),e)})),bs=Ii((function(e,n,t,r){Si(n,Ws(n),e,r)})),vs=Ii((function(e,n,t,r){Si(n,js(n),e,r)})),xs=eo(or),ys=Qr((function(e,n){e=xe(e);var t=-1,r=n.length,o=r>2?n[2]:i;for(o&&mo(n[0],n[1],o)&&(r=1);++t<r;)for(var a=n[t],s=Ws(a),l=-1,c=s.length;++l<c;){var A=s[l],d=e[A];(d===i||Fa(d,Ie[A])&&!We.call(e,A))&&(e[A]=a[A])}return e})),ks=Qr((function(e){return e.push(i,Vi),mn($s,i,e)}));function Es(e,n,t){var r=null==e?i:br(e,n);return r===i?t:r}function Ss(e,n){return null!=e&&ho(e,n,Er)}var Ds=Yi((function(e,n,t){null!=n&&"function"!=typeof n.toString&&(n=Re.call(n)),e[n]=t}),nl(il)),Is=Yi((function(e,n,t){null!=n&&"function"!=typeof n.toString&&(n=Re.call(n)),We.call(e,n)?e[n].push(t):e[n]=[t]}),ao),Ls=Qr(Dr);function js(e){return Na(e)?Kt(e):$r(e)}function Ws(e){return Na(e)?Kt(e,!0):function(e){if(!ns(e))return function(e){var n=[];if(null!=e)for(var t in xe(e))n.push(t);return n}(e);var n=bo(e),t=[];for(var r in e)("constructor"!=r||!n&&We.call(e,r))&&t.push(r);return t}(e)}var qs=Ii((function(e,n,t){Ur(e,n,t)})),$s=Ii((function(e,n,t,r){Ur(e,n,t,r)})),Rs=eo((function(e,n){var t={};if(null==e)return t;var r=!1;n=kn(n,(function(n){return n=fi(n,e),r||(r=n.length>1),n})),Si(e,to(e),t),r&&(t=sr(t,7,Xi));for(var i=n.length;i--;)ci(t,n[i]);return t})),Gs=eo((function(e,n){return null==e?{}:function(e,n){return Jr(e,n,(function(n,t){return Ss(e,t)}))}(e,n)}));function Ps(e,n){if(null==e)return{};var t=kn(to(e),(function(e){return[e]}));return n=ao(n),Jr(e,t,(function(e,t){return n(e,t[0])}))}var Ys=Qi(js),Us=Qi(Ws);function Fs(e){return null==e?[]:zn(e,js(e))}var Ts=qi((function(e,n,t){return n=n.toLowerCase(),e+(t?Js(n):n)}));function Js(e){return Vs(_s(e).toLowerCase())}function Os(e){return(e=_s(e))&&e.replace(me,Mn).replace(ze,"")}var zs=qi((function(e,n,t){return e+(t?"-":"")+n.toLowerCase()})),Hs=qi((function(e,n,t){return e+(t?" ":"")+n.toLowerCase()})),Ns=Wi("toLowerCase"),Qs=qi((function(e,n,t){return e+(t?"_":"")+n.toLowerCase()})),Ks=qi((function(e,n,t){return e+(t?" ":"")+Vs(n)})),Ms=qi((function(e,n,t){return e+(t?" ":"")+n.toUpperCase()})),Vs=Wi("toUpperCase");function Xs(e,n,t){return e=_s(e),(n=t?i:n)===i?function(e){return Ke.test(e)}(e)?function(e){return e.match(Ne)||[]}(e):function(e){return e.match(le)||[]}(e):e.match(n)||[]}var Zs=Qr((function(e,n){try{return mn(e,i,n)}catch(e){return Va(e)?e:new Be(e)}})),el=eo((function(e,n){return wn(n,(function(n){n=Po(n),ir(e,n,Ia(e[n],e))})),e}));function nl(e){return function(){return e}}var tl=Gi(),rl=Gi(!0);function il(e){return e}function ol(e){return qr("function"==typeof e?e:sr(e,1))}var al=Qr((function(e,n){return function(t){return Dr(t,e,n)}})),sl=Qr((function(e,n){return function(t){return Dr(e,t,n)}}));function ll(e,n,t){var r=js(n),i=Br(n,r);null!=t||ns(n)&&(i.length||!r.length)||(t=n,n=e,e=this,i=Br(n,js(n)));var o=!(ns(t)&&"chain"in t&&!t.chain),a=Xa(e);return wn(i,(function(t){var r=n[t];e[t]=r,a&&(e.prototype[t]=function(){var n=this.__chain__;if(o||n){var t=e(this.__wrapped__),i=t.__actions__=Ei(this.__actions__);return i.push({func:r,args:arguments,thisArg:e}),t.__chain__=n,t}return r.apply(e,En([this.value()],arguments))})})),e}function cl(){}var Al=Fi(kn),dl=Fi(bn),ul=Fi(In);function pl(e){return _o(e)?Pn(Po(e)):function(e){return function(n){return br(n,e)}}(e)}var hl=Ji(),Cl=Ji(!0);function gl(){return[]}function fl(){return!1}var ml,_l=Ui((function(e,n){return e+n}),0),wl=Hi("ceil"),Bl=Ui((function(e,n){return e/n}),1),bl=Hi("floor"),vl=Ui((function(e,n){return e*n}),1),xl=Hi("round"),yl=Ui((function(e,n){return e-n}),0);return Yt.after=function(e,n){if("function"!=typeof n)throw new Ee(o);return e=Cs(e),function(){if(--e<1)return n.apply(this,arguments)}},Yt.ary=Sa,Yt.assign=ws,Yt.assignIn=Bs,Yt.assignInWith=bs,Yt.assignWith=vs,Yt.at=xs,Yt.before=Da,Yt.bind=Ia,Yt.bindAll=el,Yt.bindKey=La,Yt.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return za(e)?e:[e]},Yt.chain=pa,Yt.chunk=function(e,n,t){n=(t?mo(e,n,t):n===i)?1:ft(Cs(n),0);var o=null==e?0:e.length;if(!o||n<1)return[];for(var a=0,s=0,l=r(At(o/n));a<o;)l[s++]=ni(e,a,a+=n);return l},Yt.compact=function(e){for(var n=-1,t=null==e?0:e.length,r=0,i=[];++n<t;){var o=e[n];o&&(i[r++]=o)}return i},Yt.concat=function(){var e=arguments.length;if(!e)return[];for(var n=r(e-1),t=arguments[0],i=e;i--;)n[i-1]=arguments[i];return En(za(t)?Ei(t):[t],gr(n,1))},Yt.cond=function(e){var n=null==e?0:e.length,t=ao();return e=n?kn(e,(function(e){if("function"!=typeof e[1])throw new Ee(o);return[t(e[0]),e[1]]})):[],Qr((function(t){for(var r=-1;++r<n;){var i=e[r];if(mn(i[0],this,t))return mn(i[1],this,t)}}))},Yt.conforms=function(e){return function(e){var n=js(e);return function(t){return lr(t,e,n)}}(sr(e,1))},Yt.constant=nl,Yt.countBy=ga,Yt.create=function(e,n){var t=Ut(e);return null==n?t:rr(t,n)},Yt.curry=function e(n,t,r){var o=Ki(n,8,i,i,i,i,i,t=r?i:t);return o.placeholder=e.placeholder,o},Yt.curryRight=function e(n,t,r){var o=Ki(n,16,i,i,i,i,i,t=r?i:t);return o.placeholder=e.placeholder,o},Yt.debounce=ja,Yt.defaults=ys,Yt.defaultsDeep=ks,Yt.defer=Wa,Yt.delay=qa,Yt.difference=Fo,Yt.differenceBy=To,Yt.differenceWith=Jo,Yt.drop=function(e,n,t){var r=null==e?0:e.length;return r?ni(e,(n=t||n===i?1:Cs(n))<0?0:n,r):[]},Yt.dropRight=function(e,n,t){var r=null==e?0:e.length;return r?ni(e,0,(n=r-(n=t||n===i?1:Cs(n)))<0?0:n):[]},Yt.dropRightWhile=function(e,n){return e&&e.length?di(e,ao(n,3),!0,!0):[]},Yt.dropWhile=function(e,n){return e&&e.length?di(e,ao(n,3),!0):[]},Yt.fill=function(e,n,t,r){var o=null==e?0:e.length;return o?(t&&"number"!=typeof t&&mo(e,n,t)&&(t=0,r=o),function(e,n,t,r){var o=e.length;for((t=Cs(t))<0&&(t=-t>o?0:o+t),(r=r===i||r>o?o:Cs(r))<0&&(r+=o),r=t>r?0:gs(r);t<r;)e[t++]=n;return e}(e,n,t,r)):[]},Yt.filter=function(e,n){return(za(e)?vn:Cr)(e,ao(n,3))},Yt.flatMap=function(e,n){return gr(xa(e,n),1)},Yt.flatMapDeep=function(e,n){return gr(xa(e,n),A)},Yt.flatMapDepth=function(e,n,t){return t=t===i?1:Cs(t),gr(xa(e,n),t)},Yt.flatten=Ho,Yt.flattenDeep=function(e){return null!=e&&e.length?gr(e,A):[]},Yt.flattenDepth=function(e,n){return null!=e&&e.length?gr(e,n=n===i?1:Cs(n)):[]},Yt.flip=function(e){return Ki(e,512)},Yt.flow=tl,Yt.flowRight=rl,Yt.fromPairs=function(e){for(var n=-1,t=null==e?0:e.length,r={};++n<t;){var i=e[n];r[i[0]]=i[1]}return r},Yt.functions=function(e){return null==e?[]:Br(e,js(e))},Yt.functionsIn=function(e){return null==e?[]:Br(e,Ws(e))},Yt.groupBy=Ba,Yt.initial=function(e){return null!=e&&e.length?ni(e,0,-1):[]},Yt.intersection=Qo,Yt.intersectionBy=Ko,Yt.intersectionWith=Mo,Yt.invert=Ds,Yt.invertBy=Is,Yt.invokeMap=ba,Yt.iteratee=ol,Yt.keyBy=va,Yt.keys=js,Yt.keysIn=Ws,Yt.map=xa,Yt.mapKeys=function(e,n){var t={};return n=ao(n,3),_r(e,(function(e,r,i){ir(t,n(e,r,i),e)})),t},Yt.mapValues=function(e,n){var t={};return n=ao(n,3),_r(e,(function(e,r,i){ir(t,r,n(e,r,i))})),t},Yt.matches=function(e){return Pr(sr(e,1))},Yt.matchesProperty=function(e,n){return Yr(e,sr(n,1))},Yt.memoize=$a,Yt.merge=qs,Yt.mergeWith=$s,Yt.method=al,Yt.methodOf=sl,Yt.mixin=ll,Yt.negate=Ra,Yt.nthArg=function(e){return e=Cs(e),Qr((function(n){return Fr(n,e)}))},Yt.omit=Rs,Yt.omitBy=function(e,n){return Ps(e,Ra(ao(n)))},Yt.once=function(e){return Da(2,e)},Yt.orderBy=function(e,n,t,r){return null==e?[]:(za(n)||(n=null==n?[]:[n]),za(t=r?i:t)||(t=null==t?[]:[t]),Tr(e,n,t))},Yt.over=Al,Yt.overArgs=Ga,Yt.overEvery=dl,Yt.overSome=ul,Yt.partial=Pa,Yt.partialRight=Ya,Yt.partition=ya,Yt.pick=Gs,Yt.pickBy=Ps,Yt.property=pl,Yt.propertyOf=function(e){return function(n){return null==e?i:br(e,n)}},Yt.pull=Xo,Yt.pullAll=Zo,Yt.pullAllBy=function(e,n,t){return e&&e.length&&n&&n.length?Or(e,n,ao(t,2)):e},Yt.pullAllWith=function(e,n,t){return e&&e.length&&n&&n.length?Or(e,n,i,t):e},Yt.pullAt=ea,Yt.range=hl,Yt.rangeRight=Cl,Yt.rearg=Ua,Yt.reject=function(e,n){return(za(e)?vn:Cr)(e,Ra(ao(n,3)))},Yt.remove=function(e,n){var t=[];if(!e||!e.length)return t;var r=-1,i=[],o=e.length;for(n=ao(n,3);++r<o;){var a=e[r];n(a,r,e)&&(t.push(a),i.push(r))}return zr(e,i),t},Yt.rest=function(e,n){if("function"!=typeof e)throw new Ee(o);return Qr(e,n=n===i?n:Cs(n))},Yt.reverse=na,Yt.sampleSize=function(e,n,t){return n=(t?mo(e,n,t):n===i)?1:Cs(n),(za(e)?Vt:Mr)(e,n)},Yt.set=function(e,n,t){return null==e?e:Vr(e,n,t)},Yt.setWith=function(e,n,t,r){return r="function"==typeof r?r:i,null==e?e:Vr(e,n,t,r)},Yt.shuffle=function(e){return(za(e)?Xt:ei)(e)},Yt.slice=function(e,n,t){var r=null==e?0:e.length;return r?(t&&"number"!=typeof t&&mo(e,n,t)?(n=0,t=r):(n=null==n?0:Cs(n),t=t===i?r:Cs(t)),ni(e,n,t)):[]},Yt.sortBy=ka,Yt.sortedUniq=function(e){return e&&e.length?oi(e):[]},Yt.sortedUniqBy=function(e,n){return e&&e.length?oi(e,ao(n,2)):[]},Yt.split=function(e,n,t){return t&&"number"!=typeof t&&mo(e,n,t)&&(n=t=i),(t=t===i?p:t>>>0)?(e=_s(e))&&("string"==typeof n||null!=n&&!as(n))&&!(n=si(n))&&Zn(e)?_i(at(e),0,t):e.split(n,t):[]},Yt.spread=function(e,n){if("function"!=typeof e)throw new Ee(o);return n=null==n?0:ft(Cs(n),0),Qr((function(t){var r=t[n],i=_i(t,0,n);return r&&En(i,r),mn(e,this,i)}))},Yt.tail=function(e){var n=null==e?0:e.length;return n?ni(e,1,n):[]},Yt.take=function(e,n,t){return e&&e.length?ni(e,0,(n=t||n===i?1:Cs(n))<0?0:n):[]},Yt.takeRight=function(e,n,t){var r=null==e?0:e.length;return r?ni(e,(n=r-(n=t||n===i?1:Cs(n)))<0?0:n,r):[]},Yt.takeRightWhile=function(e,n){return e&&e.length?di(e,ao(n,3),!1,!0):[]},Yt.takeWhile=function(e,n){return e&&e.length?di(e,ao(n,3)):[]},Yt.tap=function(e,n){return n(e),e},Yt.throttle=function(e,n,t){var r=!0,i=!0;if("function"!=typeof e)throw new Ee(o);return ns(t)&&(r="leading"in t?!!t.leading:r,i="trailing"in t?!!t.trailing:i),ja(e,n,{leading:r,maxWait:n,trailing:i})},Yt.thru=ha,Yt.toArray=ps,Yt.toPairs=Ys,Yt.toPairsIn=Us,Yt.toPath=function(e){return za(e)?kn(e,Po):cs(e)?[e]:Ei(Go(_s(e)))},Yt.toPlainObject=ms,Yt.transform=function(e,n,t){var r=za(e),i=r||Ka(e)||As(e);if(n=ao(n,4),null==t){var o=e&&e.constructor;t=i?r?new o:[]:ns(e)&&Xa(o)?Ut(He(e)):{}}return(i?wn:_r)(e,(function(e,r,i){return n(t,e,r,i)})),t},Yt.unary=function(e){return Sa(e,1)},Yt.union=ta,Yt.unionBy=ra,Yt.unionWith=ia,Yt.uniq=function(e){return e&&e.length?li(e):[]},Yt.uniqBy=function(e,n){return e&&e.length?li(e,ao(n,2)):[]},Yt.uniqWith=function(e,n){return n="function"==typeof n?n:i,e&&e.length?li(e,i,n):[]},Yt.unset=function(e,n){return null==e||ci(e,n)},Yt.unzip=oa,Yt.unzipWith=aa,Yt.update=function(e,n,t){return null==e?e:Ai(e,n,gi(t))},Yt.updateWith=function(e,n,t,r){return r="function"==typeof r?r:i,null==e?e:Ai(e,n,gi(t),r)},Yt.values=Fs,Yt.valuesIn=function(e){return null==e?[]:zn(e,Ws(e))},Yt.without=sa,Yt.words=Xs,Yt.wrap=function(e,n){return Pa(gi(n),e)},Yt.xor=la,Yt.xorBy=ca,Yt.xorWith=Aa,Yt.zip=da,Yt.zipObject=function(e,n){return hi(e||[],n||[],er)},Yt.zipObjectDeep=function(e,n){return hi(e||[],n||[],Vr)},Yt.zipWith=ua,Yt.entries=Ys,Yt.entriesIn=Us,Yt.extend=Bs,Yt.extendWith=bs,ll(Yt,Yt),Yt.add=_l,Yt.attempt=Zs,Yt.camelCase=Ts,Yt.capitalize=Js,Yt.ceil=wl,Yt.clamp=function(e,n,t){return t===i&&(t=n,n=i),t!==i&&(t=(t=fs(t))==t?t:0),n!==i&&(n=(n=fs(n))==n?n:0),ar(fs(e),n,t)},Yt.clone=function(e){return sr(e,4)},Yt.cloneDeep=function(e){return sr(e,5)},Yt.cloneDeepWith=function(e,n){return sr(e,5,n="function"==typeof n?n:i)},Yt.cloneWith=function(e,n){return sr(e,4,n="function"==typeof n?n:i)},Yt.conformsTo=function(e,n){return null==n||lr(e,n,js(n))},Yt.deburr=Os,Yt.defaultTo=function(e,n){return null==e||e!=e?n:e},Yt.divide=Bl,Yt.endsWith=function(e,n,t){e=_s(e),n=si(n);var r=e.length,o=t=t===i?r:ar(Cs(t),0,r);return(t-=n.length)>=0&&e.slice(t,o)==n},Yt.eq=Fa,Yt.escape=function(e){return(e=_s(e))&&Q.test(e)?e.replace(H,Vn):e},Yt.escapeRegExp=function(e){return(e=_s(e))&&te.test(e)?e.replace(ne,"\\$&"):e},Yt.every=function(e,n,t){var r=za(e)?bn:pr;return t&&mo(e,n,t)&&(n=i),r(e,ao(n,3))},Yt.find=fa,Yt.findIndex=Oo,Yt.findKey=function(e,n){return jn(e,ao(n,3),_r)},Yt.findLast=ma,Yt.findLastIndex=zo,Yt.findLastKey=function(e,n){return jn(e,ao(n,3),wr)},Yt.floor=bl,Yt.forEach=_a,Yt.forEachRight=wa,Yt.forIn=function(e,n){return null==e?e:fr(e,ao(n,3),Ws)},Yt.forInRight=function(e,n){return null==e?e:mr(e,ao(n,3),Ws)},Yt.forOwn=function(e,n){return e&&_r(e,ao(n,3))},Yt.forOwnRight=function(e,n){return e&&wr(e,ao(n,3))},Yt.get=Es,Yt.gt=Ta,Yt.gte=Ja,Yt.has=function(e,n){return null!=e&&ho(e,n,kr)},Yt.hasIn=Ss,Yt.head=No,Yt.identity=il,Yt.includes=function(e,n,t,r){e=Na(e)?e:Fs(e),t=t&&!r?Cs(t):0;var i=e.length;return t<0&&(t=ft(i+t,0)),ls(e)?t<=i&&e.indexOf(n,t)>-1:!!i&&qn(e,n,t)>-1},Yt.indexOf=function(e,n,t){var r=null==e?0:e.length;if(!r)return-1;var i=null==t?0:Cs(t);return i<0&&(i=ft(r+i,0)),qn(e,n,i)},Yt.inRange=function(e,n,t){return n=hs(n),t===i?(t=n,n=0):t=hs(t),function(e,n,t){return e>=mt(n,t)&&e<ft(n,t)}(e=fs(e),n,t)},Yt.invoke=Ls,Yt.isArguments=Oa,Yt.isArray=za,Yt.isArrayBuffer=Ha,Yt.isArrayLike=Na,Yt.isArrayLikeObject=Qa,Yt.isBoolean=function(e){return!0===e||!1===e||ts(e)&&xr(e)==f},Yt.isBuffer=Ka,Yt.isDate=Ma,Yt.isElement=function(e){return ts(e)&&1===e.nodeType&&!os(e)},Yt.isEmpty=function(e){if(null==e)return!0;if(Na(e)&&(za(e)||"string"==typeof e||"function"==typeof e.splice||Ka(e)||As(e)||Oa(e)))return!e.length;var n=po(e);if(n==b||n==E)return!e.size;if(bo(e))return!$r(e).length;for(var t in e)if(We.call(e,t))return!1;return!0},Yt.isEqual=function(e,n){return Lr(e,n)},Yt.isEqualWith=function(e,n,t){var r=(t="function"==typeof t?t:i)?t(e,n):i;return r===i?Lr(e,n,i,t):!!r},Yt.isError=Va,Yt.isFinite=function(e){return"number"==typeof e&&ht(e)},Yt.isFunction=Xa,Yt.isInteger=Za,Yt.isLength=es,Yt.isMap=rs,Yt.isMatch=function(e,n){return e===n||jr(e,n,lo(n))},Yt.isMatchWith=function(e,n,t){return t="function"==typeof t?t:i,jr(e,n,lo(n),t)},Yt.isNaN=function(e){return is(e)&&e!=+e},Yt.isNative=function(e){if(Bo(e))throw new Be("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Wr(e)},Yt.isNil=function(e){return null==e},Yt.isNull=function(e){return null===e},Yt.isNumber=is,Yt.isObject=ns,Yt.isObjectLike=ts,Yt.isPlainObject=os,Yt.isRegExp=as,Yt.isSafeInteger=function(e){return Za(e)&&e>=-9007199254740991&&e<=d},Yt.isSet=ss,Yt.isString=ls,Yt.isSymbol=cs,Yt.isTypedArray=As,Yt.isUndefined=function(e){return e===i},Yt.isWeakMap=function(e){return ts(e)&&po(e)==I},Yt.isWeakSet=function(e){return ts(e)&&"[object WeakSet]"==xr(e)},Yt.join=function(e,n){return null==e?"":Ct.call(e,n)},Yt.kebabCase=zs,Yt.last=Vo,Yt.lastIndexOf=function(e,n,t){var r=null==e?0:e.length;if(!r)return-1;var o=r;return t!==i&&(o=(o=Cs(t))<0?ft(r+o,0):mt(o,r-1)),n==n?function(e,n,t){for(var r=t+1;r--;)if(e[r]===n)return r;return r}(e,n,o):Wn(e,Rn,o,!0)},Yt.lowerCase=Hs,Yt.lowerFirst=Ns,Yt.lt=ds,Yt.lte=us,Yt.max=function(e){return e&&e.length?hr(e,il,yr):i},Yt.maxBy=function(e,n){return e&&e.length?hr(e,ao(n,2),yr):i},Yt.mean=function(e){return Gn(e,il)},Yt.meanBy=function(e,n){return Gn(e,ao(n,2))},Yt.min=function(e){return e&&e.length?hr(e,il,Rr):i},Yt.minBy=function(e,n){return e&&e.length?hr(e,ao(n,2),Rr):i},Yt.stubArray=gl,Yt.stubFalse=fl,Yt.stubObject=function(){return{}},Yt.stubString=function(){return""},Yt.stubTrue=function(){return!0},Yt.multiply=vl,Yt.nth=function(e,n){return e&&e.length?Fr(e,Cs(n)):i},Yt.noConflict=function(){return an._===this&&(an._=Pe),this},Yt.noop=cl,Yt.now=Ea,Yt.pad=function(e,n,t){e=_s(e);var r=(n=Cs(n))?ot(e):0;if(!n||r>=n)return e;var i=(n-r)/2;return Ti(dt(i),t)+e+Ti(At(i),t)},Yt.padEnd=function(e,n,t){e=_s(e);var r=(n=Cs(n))?ot(e):0;return n&&r<n?e+Ti(n-r,t):e},Yt.padStart=function(e,n,t){e=_s(e);var r=(n=Cs(n))?ot(e):0;return n&&r<n?Ti(n-r,t)+e:e},Yt.parseInt=function(e,n,t){return t||null==n?n=0:n&&(n=+n),wt(_s(e).replace(re,""),n||0)},Yt.random=function(e,n,t){if(t&&"boolean"!=typeof t&&mo(e,n,t)&&(n=t=i),t===i&&("boolean"==typeof n?(t=n,n=i):"boolean"==typeof e&&(t=e,e=i)),e===i&&n===i?(e=0,n=1):(e=hs(e),n===i?(n=e,e=0):n=hs(n)),e>n){var r=e;e=n,n=r}if(t||e%1||n%1){var o=Bt();return mt(e+o*(n-e+nn("1e-"+((o+"").length-1))),n)}return Hr(e,n)},Yt.reduce=function(e,n,t){var r=za(e)?Sn:Un,i=arguments.length<3;return r(e,ao(n,4),t,i,dr)},Yt.reduceRight=function(e,n,t){var r=za(e)?Dn:Un,i=arguments.length<3;return r(e,ao(n,4),t,i,ur)},Yt.repeat=function(e,n,t){return n=(t?mo(e,n,t):n===i)?1:Cs(n),Nr(_s(e),n)},Yt.replace=function(){var e=arguments,n=_s(e[0]);return e.length<3?n:n.replace(e[1],e[2])},Yt.result=function(e,n,t){var r=-1,o=(n=fi(n,e)).length;for(o||(o=1,e=i);++r<o;){var a=null==e?i:e[Po(n[r])];a===i&&(r=o,a=t),e=Xa(a)?a.call(e):a}return e},Yt.round=xl,Yt.runInContext=e,Yt.sample=function(e){return(za(e)?Mt:Kr)(e)},Yt.size=function(e){if(null==e)return 0;if(Na(e))return ls(e)?ot(e):e.length;var n=po(e);return n==b||n==E?e.size:$r(e).length},Yt.snakeCase=Qs,Yt.some=function(e,n,t){var r=za(e)?In:ti;return t&&mo(e,n,t)&&(n=i),r(e,ao(n,3))},Yt.sortedIndex=function(e,n){return ri(e,n)},Yt.sortedIndexBy=function(e,n,t){return ii(e,n,ao(t,2))},Yt.sortedIndexOf=function(e,n){var t=null==e?0:e.length;if(t){var r=ri(e,n);if(r<t&&Fa(e[r],n))return r}return-1},Yt.sortedLastIndex=function(e,n){return ri(e,n,!0)},Yt.sortedLastIndexBy=function(e,n,t){return ii(e,n,ao(t,2),!0)},Yt.sortedLastIndexOf=function(e,n){if(null!=e&&e.length){var t=ri(e,n,!0)-1;if(Fa(e[t],n))return t}return-1},Yt.startCase=Ks,Yt.startsWith=function(e,n,t){return e=_s(e),t=null==t?0:ar(Cs(t),0,e.length),n=si(n),e.slice(t,t+n.length)==n},Yt.subtract=yl,Yt.sum=function(e){return e&&e.length?Fn(e,il):0},Yt.sumBy=function(e,n){return e&&e.length?Fn(e,ao(n,2)):0},Yt.template=function(e,n,t){var r=Yt.templateSettings;t&&mo(e,n,t)&&(n=i),e=_s(e),n=bs({},n,r,Mi);var o,a,s=bs({},n.imports,r.imports,Mi),l=js(s),c=zn(s,l),A=0,d=n.interpolate||_e,u="__p += '",p=ye((n.escape||_e).source+"|"+d.source+"|"+(d===V?de:_e).source+"|"+(n.evaluate||_e).source+"|$","g"),h="//# sourceURL="+(We.call(n,"sourceURL")?(n.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Ve+"]")+"\n";e.replace(p,(function(n,t,r,i,s,l){return r||(r=i),u+=e.slice(A,l).replace(we,Xn),t&&(o=!0,u+="' +\n__e("+t+") +\n'"),s&&(a=!0,u+="';\n"+s+";\n__p += '"),r&&(u+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),A=l+n.length,n})),u+="';\n";var C=We.call(n,"variable")&&n.variable;if(C){if(ce.test(C))throw new Be("Invalid `variable` option passed into `_.template`")}else u="with (obj) {\n"+u+"\n}\n";u=(a?u.replace(T,""):u).replace(J,"$1").replace(O,"$1;"),u="function("+(C||"obj")+") {\n"+(C?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+u+"return __p\n}";var g=Zs((function(){return be(l,h+"return "+u).apply(i,c)}));if(g.source=u,Va(g))throw g;return g},Yt.times=function(e,n){if((e=Cs(e))<1||e>d)return[];var t=p,r=mt(e,p);n=ao(n),e-=p;for(var i=Tn(r,n);++t<e;)n(t);return i},Yt.toFinite=hs,Yt.toInteger=Cs,Yt.toLength=gs,Yt.toLower=function(e){return _s(e).toLowerCase()},Yt.toNumber=fs,Yt.toSafeInteger=function(e){return e?ar(Cs(e),-9007199254740991,d):0===e?e:0},Yt.toString=_s,Yt.toUpper=function(e){return _s(e).toUpperCase()},Yt.trim=function(e,n,t){if((e=_s(e))&&(t||n===i))return Jn(e);if(!e||!(n=si(n)))return e;var r=at(e),o=at(n);return _i(r,Nn(r,o),Qn(r,o)+1).join("")},Yt.trimEnd=function(e,n,t){if((e=_s(e))&&(t||n===i))return e.slice(0,st(e)+1);if(!e||!(n=si(n)))return e;var r=at(e);return _i(r,0,Qn(r,at(n))+1).join("")},Yt.trimStart=function(e,n,t){if((e=_s(e))&&(t||n===i))return e.replace(re,"");if(!e||!(n=si(n)))return e;var r=at(e);return _i(r,Nn(r,at(n))).join("")},Yt.truncate=function(e,n){var t=30,r="...";if(ns(n)){var o="separator"in n?n.separator:o;t="length"in n?Cs(n.length):t,r="omission"in n?si(n.omission):r}var a=(e=_s(e)).length;if(Zn(e)){var s=at(e);a=s.length}if(t>=a)return e;var l=t-ot(r);if(l<1)return r;var c=s?_i(s,0,l).join(""):e.slice(0,l);if(o===i)return c+r;if(s&&(l+=c.length-l),as(o)){if(e.slice(l).search(o)){var A,d=c;for(o.global||(o=ye(o.source,_s(ue.exec(o))+"g")),o.lastIndex=0;A=o.exec(d);)var u=A.index;c=c.slice(0,u===i?l:u)}}else if(e.indexOf(si(o),l)!=l){var p=c.lastIndexOf(o);p>-1&&(c=c.slice(0,p))}return c+r},Yt.unescape=function(e){return(e=_s(e))&&N.test(e)?e.replace(z,lt):e},Yt.uniqueId=function(e){var n=++qe;return _s(e)+n},Yt.upperCase=Ms,Yt.upperFirst=Vs,Yt.each=_a,Yt.eachRight=wa,Yt.first=No,ll(Yt,(ml={},_r(Yt,(function(e,n){We.call(Yt.prototype,n)||(ml[n]=e)})),ml),{chain:!1}),Yt.VERSION="4.17.21",wn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){Yt[e].placeholder=Yt})),wn(["drop","take"],(function(e,n){Jt.prototype[e]=function(t){t=t===i?1:ft(Cs(t),0);var r=this.__filtered__&&!n?new Jt(this):this.clone();return r.__filtered__?r.__takeCount__=mt(t,r.__takeCount__):r.__views__.push({size:mt(t,p),type:e+(r.__dir__<0?"Right":"")}),r},Jt.prototype[e+"Right"]=function(n){return this.reverse()[e](n).reverse()}})),wn(["filter","map","takeWhile"],(function(e,n){var t=n+1,r=1==t||3==t;Jt.prototype[e]=function(e){var n=this.clone();return n.__iteratees__.push({iteratee:ao(e,3),type:t}),n.__filtered__=n.__filtered__||r,n}})),wn(["head","last"],(function(e,n){var t="take"+(n?"Right":"");Jt.prototype[e]=function(){return this[t](1).value()[0]}})),wn(["initial","tail"],(function(e,n){var t="drop"+(n?"":"Right");Jt.prototype[e]=function(){return this.__filtered__?new Jt(this):this[t](1)}})),Jt.prototype.compact=function(){return this.filter(il)},Jt.prototype.find=function(e){return this.filter(e).head()},Jt.prototype.findLast=function(e){return this.reverse().find(e)},Jt.prototype.invokeMap=Qr((function(e,n){return"function"==typeof e?new Jt(this):this.map((function(t){return Dr(t,e,n)}))})),Jt.prototype.reject=function(e){return this.filter(Ra(ao(e)))},Jt.prototype.slice=function(e,n){e=Cs(e);var t=this;return t.__filtered__&&(e>0||n<0)?new Jt(t):(e<0?t=t.takeRight(-e):e&&(t=t.drop(e)),n!==i&&(t=(n=Cs(n))<0?t.dropRight(-n):t.take(n-e)),t)},Jt.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Jt.prototype.toArray=function(){return this.take(p)},_r(Jt.prototype,(function(e,n){var t=/^(?:filter|find|map|reject)|While$/.test(n),r=/^(?:head|last)$/.test(n),o=Yt[r?"take"+("last"==n?"Right":""):n],a=r||/^find/.test(n);o&&(Yt.prototype[n]=function(){var n=this.__wrapped__,s=r?[1]:arguments,l=n instanceof Jt,c=s[0],A=l||za(n),d=function(e){var n=o.apply(Yt,En([e],s));return r&&u?n[0]:n};A&&t&&"function"==typeof c&&1!=c.length&&(l=A=!1);var u=this.__chain__,p=!!this.__actions__.length,h=a&&!u,C=l&&!p;if(!a&&A){n=C?n:new Jt(this);var g=e.apply(n,s);return g.__actions__.push({func:ha,args:[d],thisArg:i}),new Tt(g,u)}return h&&C?e.apply(this,s):(g=this.thru(d),h?r?g.value()[0]:g.value():g)})})),wn(["pop","push","shift","sort","splice","unshift"],(function(e){var n=Se[e],t=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);Yt.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var i=this.value();return n.apply(za(i)?i:[],e)}return this[t]((function(t){return n.apply(za(t)?t:[],e)}))}})),_r(Jt.prototype,(function(e,n){var t=Yt[n];if(t){var r=t.name+"";We.call(It,r)||(It[r]=[]),It[r].push({name:n,func:t})}})),It[Pi(i,2).name]=[{name:"wrapper",func:i}],Jt.prototype.clone=function(){var e=new Jt(this.__wrapped__);return e.__actions__=Ei(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=Ei(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=Ei(this.__views__),e},Jt.prototype.reverse=function(){if(this.__filtered__){var e=new Jt(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},Jt.prototype.value=function(){var e=this.__wrapped__.value(),n=this.__dir__,t=za(e),r=n<0,i=t?e.length:0,o=function(e,n,t){for(var r=-1,i=t.length;++r<i;){var o=t[r],a=o.size;switch(o.type){case"drop":e+=a;break;case"dropRight":n-=a;break;case"take":n=mt(n,e+a);break;case"takeRight":e=ft(e,n-a)}}return{start:e,end:n}}(0,i,this.__views__),a=o.start,s=o.end,l=s-a,c=r?s:a-1,A=this.__iteratees__,d=A.length,u=0,p=mt(l,this.__takeCount__);if(!t||!r&&i==l&&p==l)return ui(e,this.__actions__);var h=[];e:for(;l--&&u<p;){for(var C=-1,g=e[c+=n];++C<d;){var f=A[C],m=f.iteratee,_=f.type,w=m(g);if(2==_)g=w;else if(!w){if(1==_)continue e;break e}}h[u++]=g}return h},Yt.prototype.at=Ca,Yt.prototype.chain=function(){return pa(this)},Yt.prototype.commit=function(){return new Tt(this.value(),this.__chain__)},Yt.prototype.next=function(){this.__values__===i&&(this.__values__=ps(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?i:this.__values__[this.__index__++]}},Yt.prototype.plant=function(e){for(var n,t=this;t instanceof Ft;){var r=Uo(t);r.__index__=0,r.__values__=i,n?o.__wrapped__=r:n=r;var o=r;t=t.__wrapped__}return o.__wrapped__=e,n},Yt.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof Jt){var n=e;return this.__actions__.length&&(n=new Jt(this)),(n=n.reverse()).__actions__.push({func:ha,args:[na],thisArg:i}),new Tt(n,this.__chain__)}return this.thru(na)},Yt.prototype.toJSON=Yt.prototype.valueOf=Yt.prototype.value=function(){return ui(this.__wrapped__,this.__actions__)},Yt.prototype.first=Yt.prototype.head,sn&&(Yt.prototype[sn]=function(){return this}),Yt}();an._=ct,(r=function(){return ct}.call(n,t,n,e))===i||(e.exports=r)}.call(this)},3379:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},a=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],A=o[c]||0,d="".concat(c," ").concat(A);o[c]=A+1;var u=t(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var h=i(p,r);r.byIndex=s,n.splice(s,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function i(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=t(o[a]);n[s].references--}for(var l=r(e,i),c=0;c<o.length;c++){var A=t(o[c]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}o=l}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},9216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},3565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},7795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},4589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},6241:(e,n,t)=>{"use strict";e.exports=t.p+"499a02316ea3cebc78fc.svg"},4281:(e,n,t)=>{"use strict";e.exports=t.p+"870244877d1443754e45.svg"},1537:(e,n,t)=>{"use strict";e.exports=t.p+"2aa4f1613e7b21a7eb37.svg"},9862:(e,n,t)=>{"use strict";e.exports=t.p+"df83b82a10ec3c9ff618.svg"},6126:(e,n,t)=>{"use strict";e.exports=t.p+"b5c4e20e1637207af80b.svg"},3427:(e,n,t)=>{"use strict";e.exports=t.p+"8afb99dac2c665687c2c.svg"},6333:(e,n,t)=>{"use strict";e.exports=t.p+"de8e842dea4b3fe1aed8.svg"},1201:(e,n,t)=>{"use strict";e.exports=t.p+"1695454a2f7028c1fa05.png"},5391:(e,n,t)=>{"use strict";e.exports=t.p+"ff65f90ac1eb9cf6f04e.png"}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={id:r,loaded:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{"use strict";const e=document.createElement("div");e.id="auth-modals",e.innerHTML='\n<div class="modal content__item" id="sign-in-modal">\n                    <h3 class="modal__title section-title">Вход</h3>\n                    <form class="modal__form sign-in-form" id="sign-in-form">\n                        <input type="email" placeholder="E-mail" name=\'email\' class="form-input" required>\n                        <input type="password" placeholder="Пароль" name=\'password\' class="form-input" required>\n                        <button type="submit" id="sign-in-btn" class="registration__regbtn button">Войти</button>\n                    </form>\n                    <p>У вас нет аккаунта? Давайте <a href=\'\' id="register-link">зарегистрируемся!</a></p>\n                </div>\n\n<div class="modal content__item modal_hidden" id="registration-modal">\n                <h3 class="modal__title section-title">Регистрация</h3>\n                <form class="modal__form registration-form" id="create-user-form">\n                    <input type="text" placeholder="Имя" name=\'name\' class="form-input" required>\n                    <input type="email" placeholder="E-mail" name=\'email\' class="form-input" required>\n                    <input type="password" placeholder="Пароль" name=\'password\' class="form-input" required>\n                    <input type="password" placeholder="Подтвердите пароль" name=\'confirmPassword\' class="form-input" required>\n                    <button type="submit" id="register-user-btn" class="registration__regbtn button">Зарегистрироваться</button>\n                </form>\n                <p>У вас уже есть аккаунта? Тогда срочно надо <a href=\'\' id="sign-in-link">войти!</a></p>\n            </div>\n';const n=e;var r=t(9669),i=t.n(r);const o="user",a={set:e=>{localStorage.setItem(o,JSON.stringify(e))},get:()=>{const e=localStorage.getItem(o);return e?JSON.parse(e):null},remove:()=>localStorage.removeItem(o)};var s;!function(e){e.hard="hard",e.learned="learned",e.process="process"}(s||(s={}));const l=new class{constructor(e){this.baseURL=e,this.setBaseUrlInAxios(),this.apiClient=i().create({baseURL:this.baseURL}),this.apiClient.interceptors.request.use((e=>{var n;const t=null===(n=a.get())||void 0===n?void 0:n.token;if((null==e?void 0:e.headers)&&t&&!e.headers.Authorization){const{headers:n}=e;n.Authorization=`Bearer ${t}`}return e}))}setBaseUrlInAxios(){i().defaults.baseURL||(i().defaults.baseURL=this.baseURL)}async createUser(e){return await this.apiClient.post("/users",e)}async signIn(e){return await this.apiClient.post("/signin",e)}async refreshTokens(e,n){return await this.apiClient.get(`/users/${e}/tokens`,{headers:{Authorization:`Bearer ${n}`}})}async getChunkOfWords(e,n){return await this.apiClient.get("/words",{params:{group:e,page:n}})}async getWordWithAssetsById(e){return await this.apiClient.get(`/words/${e}`)}async getUserWords(){return await this.apiClient.get(`/users/${a.get().userId}/words`)}async updateOrCreateUserWord(e,n,t){const r=s.process,i={serieRight:0,serieWrong:0,addTime:(new Date).toString(),games:{sprint:{right:0,wrong:0},audiocall:{right:0,wrong:0}}};if((await this.getUserWords()).data.map((e=>e.wordId)).includes(e)){const o=(await this.getUserWord(e)).data,a=n||o.difficulty||r,s=t||o.optional||i;await this.updateUserWord(e,a,s)}else{const o=n||r,l=t||i;await this.apiClient.post(`users/${a.get().userId}/words/${e}`,{difficulty:s[o],optional:l})}}async getUserWord(e){return await this.apiClient.get(`/users/${a.get().userId}/words/${e}`)}async setAggregatedWord(e,n,t){var r;let i={serieRight:0,serieWrong:0,addTime:Date(),games:{sprint:{right:0,wrong:0},audiocall:{right:0,wrong:0}}};try{const r=(await this.getUserWord(e)).data;let o=r.difficulty;i=r.optional,i.games[n][t]+=1,"right"===t&&(i.serieWrong=0,2===i.serieRight&&(o=s.learned),i.serieRight+=1),"wrong"===t&&(i.serieRight=0,2===i.serieWrong&&(o=s.hard),i.serieWrong+=1,o===s.learned&&(o=s.process)),this.updateOrCreateUserWord(e,o,i)}catch(o){404===(null===(r=o.response)||void 0===r?void 0:r.status)&&(i.games[n][t]=1,"right"===t?i.serieRight=1:i.serieWrong=1,this.updateOrCreateUserWord(e,s.process,i))}}async getAllUserAggregatedHardWords(e){return await this.apiClient.get(`/users/${a.get().userId}/aggregatedWords`,{params:{page:e,wordsPerPage:20,filter:'{"$or":[{"userWord.difficulty":"hard"}]}'}})}async updateUserWord(e,n,t){await this.apiClient.put(`/users/${a.get().userId}/words/${e}`,{difficulty:n,optional:t})}async getLearntUserWords(e){return this.apiClient.get(`/users/${e}/aggregatedWords`,{params:{wordsPerPage:4e3,filter:'{"userWord.difficulty":"learned"}'}})}getAudio(e){return this.apiClient.get(e)}async getWordStatistic(e){return(await this.getUserWords()).data.map((e=>e.wordId)).includes(e)?(await this.getUserWord(e)).data:null}}("https://rsschool-lang-app.herokuapp.com"),c=class{constructor(e,n){this.api=e,this.authStore=n}async authorizeUser(e){const n=await this.api.signIn(e),t={userId:n.data.userId,name:n.data.name,token:n.data.token,refreshToken:n.data.refreshToken};return this.authStore.set(t),t}async getNewToken(){var e;const n=a.get();if(n){try{const e=await this.api.refreshTokens(n.userId,n.refreshToken);n.token=e.data.token,n.refreshToken=e.data.refreshToken,this.authStore.set(n)}catch(n){if(401===(null===(e=n.response)||void 0===e?void 0:e.status))return void this.logOutUser()}setTimeout((()=>this.getNewToken()),144e5)}}logOutUser(){this.authStore.remove(),localStorage.removeItem("complicatedWordsPage"),localStorage.removeItem("handbookComplicatedWords")}};function A(e){var n;null===(n=e.parentElement)||void 0===n||n.removeChild(e)}function d(e,n){return Array.from(e.querySelectorAll("input")).reduce(((e,t)=>{const r=e;return n.includes(t.name)||(r[t.name]=t.value),r}),{})}function u(e){e.querySelectorAll("input").forEach((e=>{e.value=""}))}function p(e){const n=document.querySelector(".body");null==n||n.classList.toggle("overflow-hidden"),null==e||e.classList.toggle("blackout_hidden")}class h{constructor(e){this.registrationController=new class{constructor(){this.api=l}registerNewUser(e){this.api.createUser(e)}},this.authorizationController=new c(l,a),this.refreshPage=e}async initSignIn(e,n,t){e.preventDefault();const r=document.querySelector("#sign-in-form"),i=d(r,[]);r&&u(r),n&&t&&(A(t),p(n));try{await this.authorizationController.authorizeUser(i)}catch(e){return}const o=document.querySelector("#singin-btn"),a=document.querySelector("#log-out-btn");o&&a&&(null==o||o.classList.add("btn_hidden"),null==a||a.classList.remove("btn_hidden")),this.refreshPage(),setTimeout((()=>this.authorizationController.getNewToken()),144e5)}initRegistration(e,n,t){e.preventDefault();const r=document.querySelector("#create-user-form"),i=d(r,["confirmPassword"]);this.registrationController.registerNewUser(i),r&&u(r),n&&t&&(A(t),p(n))}renderAuthModal(e,n){var t,r,i,o;!function(e){const n=document.querySelector("#main");null==n||n.prepend(e.cloneNode(!0))}(n);const a={modalsContainer:document.querySelector("#auth-modals"),signInBtn:document.querySelector("#sign-in-btn"),logOutBtn:document.querySelector("#log-out-btn"),registerBtn:document.querySelector("#register-user-btn"),registrationModal:document.querySelector("#registration-modal"),signInModal:document.querySelector("#sign-in-modal"),registerLink:document.querySelector("#register-link"),signInLink:document.querySelector("#sign-in-link")};e&&p(e),null==e||e.addEventListener("click",(()=>{a.modalsContainer&&A(a.modalsContainer),p(e)}),{once:!0}),e&&(null===(t=a.signInBtn)||void 0===t||t.addEventListener("click",(n=>this.initSignIn(n,e,a.modalsContainer))),null===(r=a.registerBtn)||void 0===r||r.addEventListener("click",(n=>this.initRegistration(n,e,a.modalsContainer)))),null===(i=a.registerLink)||void 0===i||i.addEventListener("click",(e=>{var n,t;e.preventDefault(),null===(n=a.registrationModal)||void 0===n||n.classList.remove("modal_hidden"),null===(t=a.signInModal)||void 0===t||t.classList.add("modal_hidden")})),null===(o=a.signInLink)||void 0===o||o.addEventListener("click",(e=>{var n,t;e.preventDefault(),null===(n=a.registrationModal)||void 0===n||n.classList.add("modal_hidden"),null===(t=a.signInModal)||void 0===t||t.classList.remove("modal_hidden")}))}}const C={sections:['<section class="about content__item">\n                <h2 class="section-title about__title">RSlang</h2>\n                <p class="about__text">С нашим приложением учить английский язык легко и увлекательно! В этом вам помогут\n                    электронный учебник с различными уровнями сложности, а также мини-игры. Вы сможете следить за прогрессом обучения и вдохновляётесь результатами!</p>\n                <div class="about__image-wrap">\n                    <img src="./public/assets/images/about.png" width="50" height="50" alt="" class="about__image">\n                </div>\n                </section>','<section class="scope content__item">\n                <h2 class="section-title scope__title">Преимущества нашего приложения</h2>\n                <p class="scope__text">Мы разработали для вас удобные средства для скорейшего изучения языка и быстрого\n                    закрепления результата.</p>\n                <div class="scope-card scope__item">\n                    <img class="scope-card__img" src="./public/assets/icons/games.svg" alt="games">\n                    <h3 class="scope-card__title">Игры</h3>\n                    <p class="scope-card__text">Для изучения слов и усиления запоминания в приложении есть игры: Sprint\n                        и Audio Challenge,\n                        которые помогут вам "прокачать" свой словарный запас в игровой форме.</p>\n                </div>\n                <div class="scope-card scope__item">\n                    <img class="scope-card__img" src="./public/assets/icons/dictionary.svg" alt="handbook">\n                    <h3 class="scope-card__title">Продуманный учебник</h3>\n                    <p class="scope-card__text">Наш учебник состоит из семи разделов, разделённых по уровням сложности.\n                        Словарь представляет собой интерактивные карточки, содержащие перевод\n                        слова, тематическое изображение, произношение как слова отдельно, так и в составе фразы.</p>\n                </div>\n                <div class="scope-card scope__item">\n                    <img class="scope-card__img" src="./public/assets/icons/statistics.svg" alt="statistics">\n                    <h3 class="scope-card__title">Статистика</h3>\n                    <p class="scope-card__text">Весь ход обучения можно просмотреть в статистике, в которой представлены\n                        данные за текущий день обучения в целом и с разделением по играм.</p>\n                </div>\n                <div class="scope-card scope__item">\n                    <img class="scope-card__img" src="./public/assets/icons/ui.svg" alt="interface">\n                    <h3 class="scope-card__title">Удобный интерфейс</h3>\n                    <p class="scope-card__text">Интерфейс приложения подстраивается под ваш уровень языка для облегчения\n                        процесса обучения.</p>\n                </div>\n            </section>','<section class="team content__item">\n                <h2 class="section-title team__title">Наша команда</h2>\n                <div class="member-card team__item">\n                    <img src="./public/assets/icons/avatar-2.svg" alt="memeber photo" class="member-card__photo">\n                    <p class="member-card__role">Team leader</p>\n                    <p class="member-card__name">Татьяна</p>\n                    <p class="member-card__contribution">\n                    Занималась настройкой сборки проекта, реализовала процесс авторизации и регистрации пользователя, разработала функционал игры Спринт, а также функцию получения слов для игр</p>\n                    <a href="https://github.com/Verigota/" class="member-card__github" target="_blank">\n                        <img class="member-card__github-img" src="./public/assets/icons/github.svg" alt="github">\n                        <span class="member-card__github-nickname">Verigota</span>\n                    </a>\n                </div>\n                <div class="member-card team__item">\n                    <img src="./public/assets/icons/avatar-1.svg" alt="memeber photo" class="member-card__photo">\n                    <p class="member-card__role">Developer</p>\n                    <p class="member-card__name">Артур</p>\n                    <p class="member-card__contribution">Разработал весь функционал раздела Учебник, в том числе отображение слов для авторизованного и анонимного пользователей, реализовал возможность добавления слов в изученные и сложные, а также оторажение статистики по отдельно взятому слову</p>\n                    <a href="https://github.com/Nozeil/" class="member-card__github" target="_blank">\n                        <img class="member-card__github-img" src="./public/assets/icons/github.svg" alt="github">\n                        <span class="member-card__github-nickname">Nozeil</span>\n                    </a>\n                </div>\n                <div class="member-card team__item">\n                    <img src="./public/assets/icons/avatar-3.svg" alt="memeber photo" class="member-card__photo">\n                    <p class="member-card__role">Developer</p>\n                    <p class="member-card__name">Евгений</p>\n                    <p class="member-card__contribution">Отвечал за верстку проекта, реализовал функционал игры Аудио Вызов, а также отображение и хранение дневной статистики</p>\n                    <a href="https://github.com/beaJeniuS/" class="member-card__github" target="_blank">\n                        <img class="member-card__github-img" src="./public/assets/icons/github.svg" alt="github">\n                        <span class="member-card__github-nickname">beaJeniuS</span>\n                    </a>\n                </div>\n                <div class="member-card team__item">\n                    <img src="./public/assets/icons/avatar-4.svg" alt="memeber photo" class="member-card__photo">\n                    <p class="member-card__role">Mentor</p>\n                    <p class="member-card__name">Дмитрий</p>\n                    <p class="member-card__contribution">Проводил кодревью, консультировал по сложным вопросам, возникавшим в ходе разработки</p>\n                </div>\n                </section>'],name:"main"},g={sections:['<section class="choice-panel content__item">\n                <div class="choice">\n                    <h2 class="choice__title">Мини игры</h2>\n                    <div class="choice__wrap sprint">\n                        <h3 class="choice__name">Спринт</h3>\n                        <img src="./public/assets/images/sprint.png" width="40" height="40" alt="" class="choice__img">\n                        <button class="choice__btn" id="sprint-game">\n                            <img src="./public/assets/icons/timer.svg" width="50" height="50" alt="">\n                        </button>\n                    </div>\n                    <div class="choice__wrap audio">\n                        <h3 class="choice__name">Аудиовызов</h3>\n                        <img src="./public/assets/images/audio.png" width="40" height="40" alt="" class="choice__img">\n                        <button class="choice__btn" id="audio-game">\n                            <img src="./public/assets/icons/sound.svg" width="50" height="50" alt="">\n                        </button>\n                    </div>\n                    <div class="choice__levels">\n                        <a id="A1" href="#" class="choice__level">A1</a>\n                        <a id="A2" href="#" class="choice__level">A2</a>\n                        <a id="B1" href="#" class="choice__level">B1</a>\n                        <a id="B2" href="#" class="choice__level">B2</a>\n                        <a id="C1" href="#" class="choice__level">C1</a>\n                        <a id="C2" href="#" class="choice__level">C2</a>\n                    </div>\n                    <div class="choice__hint">\n                        <p>Выберите уровень сложности</p>\n                    </div>\n                </div>\n            </section>'],name:"gamechoice"},f={sections:['\n            <section class="game content__item">\n                <div class="game__about">\n                    <h2 class="game__title">Аудиовызов</h2>\n                    <p class="game__desc">Используйте  эту тренировку для улучшения восприятия речи на слух.</p>\n                    <img class="game__icon" src="./public/assets/images/audio.png" width="300" height="150" alt="">\n                </div>\n                <div class="game__help">\n                    <p class="game__help-item">Для игры с помощью клавиатуры, используйте клавиши:</p>\n                    <p class="game__help-item">1, 2, 3, 4, 5 - чтобы дать ответ,</p>\n                    <p class="game__help-item">space - для воспроизведения звука,</p>\n                    <p class="game__help-item">enter - чтобы пропустить вопрос,</p>\n                    <p class="game__help-item">стрелка-вправо - чтобы перейти к следующему вопросу.</p>\n                </div>\n                <div class="game__start">\n                    <button class="game__start-btn button">Начнём!</button>\n                </div>\n            </section>'],name:"audiogame-start"},m={sections:['\n            <section class="game content__item" tabindex="-1">\n                <div class="game__audio">\n                    <a href="#" class="game__audio-btn">\n                        <img class="game__audio-question" src="./public/assets/icons/sound-beat.svg" alt="answer image">\n                        <img class="game__audio-answer" src="./public/assets/icons/question.svg" alt="question image">\n                    </a>\n                </div>\n                <div class="answers game__answers">\n                    <a id="answer1" href="#" class="answer answers__item">\n                        <img src="./public/assets/icons/success.svg" width="30" height="30" alt="ok" class="answer__ok">\n                        <img src="./public/assets/icons/cancel.svg" width="30" height="30" alt="fault" class="answer__fault">\n                        <p class="answer__help">1</p>\n                        <p class="answer__text">Перевод</p>\n                    </a>\n                    <a id="answer2" href="#" class="answer answers__item">\n                        <img src="./public/assets/icons/success.svg" width="30" height="30" alt="ok" class="answer__ok">\n                        <img src="./public/assets/icons/cancel.svg" width="30" height="30" alt="fault" class="answer__fault">\n                        <p class="answer__help">2</p>\n                        <p class="answer__text">Перевод</p>\n                    </a>\n                    <a id="answer3" href="#" class="answer answers__item">\n                        <img src="./public/assets/icons/success.svg" width="30" height="30" alt="ok" class="answer__ok">\n                        <img src="./public/assets/icons/cancel.svg" width="30" height="30" alt="fault" class="answer__fault">\n                        <p class="answer__help">3</p>\n                        <p class="answer__text">Перевод</p>\n                    </a>\n                    <a id="answer4" href="#" class="answer answers__item">\n                        <img src="./public/assets/icons/success.svg" width="30" height="30" alt="ok" class="answer__ok">\n                        <img src="./public/assets/icons/cancel.svg" width="30" height="30" alt="fault" class="answer__fault">\n                        <p class="answer__help">4</p>\n                        <p class="answer__text">Перевод</p>\n                    </a>\n                    <a id="answer5" href="#" class="answer answers__item">\n                        <img src="./public/assets/icons/success.svg" width="30" height="30" alt="ok" class="answer__ok">\n                        <img src="./public/assets/icons/cancel.svg" width="30" height="30" alt="fault" class="answer__fault">\n                        <p class="answer__help">5</p>\n                        <p class="answer__text">Перевод</p>\n                    </a>\n                </div>\n                <div class="game__skip">\n                    <button class="game__skip-btn button" data-word="не знаю">Не знаю</button>\n                </div>\n            </section>'],name:"audiogame-body"},_={sections:['\n            <section class="game content__item">\n                <div class="game__about">\n                    <h2 class="game__title">Спринт</h2>\n                    <p class="game__desc">Используйте эту тренировку для того, чтобы проверить насколько хорошо вы запомнили слова</p>\n                    <img class="game__icon" src="./public/assets/images/sprint.png" width="300" height="150" alt="">\n                </div>\n                <div class="game__help sprint__help">\n                    <p class="game__help-item">Чтобы дать ответ с помощью клавиатуры, используйте клавиши:</p>\n                    <p class="game__help-item">стрелка влево, стрелка вправо</p>\n                </div>\n                <div class="game__start">\n                    <button class="game__start-btn button">Начнём!</button>\n                </div>\n            </section>'],name:"sprintgame-start"},w={sections:['\n<section class="game content__item" tabindex="-1">\n                    <div class="game__timer-wrap">\n                        <div class="timer">\n                            <div class="timer__line"></div>\n                            <div class="timer__body">\n                                <div class="timer__counter">\n                                    <span>1</span>\n                                    <span>2</span>\n                                    <span>3</span>\n                                    <span>4</span>\n                                    <span>5</span>\n                                    <span>6</span>\n                                    <span>7</span>\n                                    <span>8</span>\n                                    <span>9</span>\n                                    <span>10</span>\n                                    <span>11</span>\n                                    <span>12</span>\n                                    <span>13</span>\n                                    <span>14</span>\n                                    <span>15</span>\n                                    <span>16</span>\n                                    <span>17</span>\n                                    <span>18</span>\n                                    <span>19</span>\n                                    <span>20</span>\n                                    <span>21</span>\n                                    <span>22</span>\n                                    <span>23</span>\n                                    <span>24</span>\n                                    <span>25</span>\n                                    <span>26</span>\n                                    <span>27</span>\n                                    <span>28</span>\n                                    <span>29</span>\n                                    <span>30</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="game__questions">\n                        <p class="game__word" id="engWord">Слово</p>\n                        <p class="game__word-translate" id="translation">Перевод</p>\n                    </div>\n                    <div class="game__answer-btns">\n                        <button id="answer1" href="#" class="answer answer-btns__item" name="right">\n                            <img src="./public/assets/icons/success.svg" width="30" height="30" alt="ok" class="answer__ok">\n                            <img src="./public/assets/icons/cancel.svg" width="30" height="30" alt="fault" class="answer__fault">\n                            <p class="answer__text">Верно</p>\n                        </button>\n                        <button id="answer2" href="#" class="answer answer-btns__item" name="wrong">\n                            <img src="./public/assets/icons/success.svg" width="30" height="30" alt="ok" class="answer__ok">\n                            <img src="./public/assets/icons/cancel.svg" width="30" height="30" alt="fault" class="answer__fault">\n                            <p class="answer__text">Не верно</p>\n                        </button>\n                    </div>\n               </section>'],name:"sprintgame-body"},B={sections:['\n                <a href="#header" class="popup__area"></a>\n                <div class="popup__body">\n                    <div class="popup__content">\n                        <a href="#header" class="popup__close">\n                            <img src="./public/assets/icons/cross.svg" alt="close">\n                        </a>\n                        <div class="popup__title">\n                            <h2 id="popup-title" class="popup__title-text">Заголовок попап</h2>\n                        </div>\n                        <p class="popup__message">Не вызывает сомнений, что курс на социально-ориентированный национальный проект напрямую зависит от поэтапного и последовательного развития общества. Следует отметить, что социально-экономическое развитие напрямую зависит от дальнейших направлений развития. Значимость этих проблем настолько очевидна, что реализация намеченных плановых заданий способствует повышению качества экономической целесообразности принимаемых изменений. Для современного мира социально-экономическое развитие играет важную роль в формировании прогресса профессионального общества. Идейные соображения высшего порядка, а также курс на социально-ориентированный национальный проект позволяет выполнять важные задания по разработке системы массового участия. Прежде всего начало повседневной работы по формированию позиции обеспечивает широкому кругу специалистов направлений прогрессивного развития. Прежде всего консультация с широким активом напрямую зависит от системы массового участия. Не вызывает сомнений, что новая модель организационной деятельности напрямую зависит от поставленных обществом и правительством задач. Прежде всего новая модель организационной деятельности напрямую зависит от системы массового участия. Для современного мира рамки и место обучения кадров позволяет выполнять важные задания по разработке направлений прогрессивного развития.</p>\n                        <button class="popup__close-btn">Закрыть</button>\n                    </div>\n                </div>\n'],name:"message"},b={sections:['\n                <a href="#header" class="popup__area"></a>\n                <div class="popup__content game-stat">\n                    <a href="#header" class="popup__close">\n                        <img src="./public/assets/icons/cross.svg" alt="close">\n                    </a>\n                    <div class="game-stat__about">\n                        <h2 class="game-stat__title">Результаты игры</h2>\n                        <p class="game-stat__result">Ваш результат <span class="game-stat__result-val">250</span></p>\n                        <p class="game-stat__serie">Длина серии: <span class="game-stat__serie-val">10</span></p>\n                    </div>\n                    <div class="game-stat__container">\n                        <div class="game-stat__slider">\n                            <div id="game-stat-common" class="game-stat__item">\n                                <div class="game-stat__percent"><span>50</span>%</div>\n                            </div>\n                            <div id="game-stat-answers" class="game-stat__item">\n                                <p class="stat-header header-errors">Ошибки: <span class="game-stat__errors">10</span></p>\n                                <div class="game-stat__errors-words"></div>\n                                <div class="stat-separator"></span></div>\n                                <p class="stat-header header-rights">Правильные: <span class="game-stat__rights">5</span></p>\n                                <div class="game-stat__rights-words"></div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="game-stat__pagination">\n                        <a id="game-stat-left" href="#" class="game-stat__pag-btn active-page"></a>\n                        <a id="game-stat-right" href="#" class="game-stat__pag-btn"></a>\n                    </div>\n                    <div class="game-stat__action">\n                        <button class="button game-stat__restart">Cнова</button>\n                        <button class="button game-stat__game-select">Игры</button>\n                    </div>\n                </div>'],name:"game-statistics"},v={sections:['\n            <section class="statistics content__item">\n                <div class="statistics__today">\n                    <h2 class="section-title statistics__title">Статистика за сегодня</h2>\n                    <div class="statistics__today-item">\n                        <p class="statistics__value" id="statistics-newwords">0</p>\n                        <p class="statistics__hint">новых слов</p>\n                    </div>\n                    <div class="statistics__today-item">\n                        <p class="statistics__value"><span id="statistics-percent">0</span>%</p>\n                        <p class="statistics__hint">правильных ответов</p>\n                    </div>\n                    <div class="statistics__today-item">\n                        <p class="statistics__value" id="statistics-learnt">0</p>\n                        <p class="statistics__hint">слов изучено</p>\n                    </div>\n                </div>\n                <div class="statistics__games">\n                    <div class="game-stat-el statistics__games-item">\n                        <h3 class="game-stat-el__title">Спринт</h3>\n                        <div class="game-stat-el__item">\n                            <img class="game-stat-el__item-img" src="./public/assets/icons/stat-learnt.svg" width="30" height="30" alt="learnt">\n                            <p class="game-stat-el__item-text">Изучено <span id="sprint-learnt">0</span> слов.</p>\n                        </div>\n                        <div class="game-stat-el__item">\n                            <img class="game-stat-el__item-img" src="./public/assets/icons/stat-rights.svg" width="30" height="30" alt="learnt">\n                            <p class="game-stat-el__item-text">Правильных ответов: <span id="sprint-right-answers">0</span>%.</p>\n                        </div>\n                        <div class="game-stat-el__item">\n                            <img class="game-stat-el__item-img" src="./public/assets/icons/stat-longserie.svg" width="30" height="30" alt="learnt">\n                            <p class="game-stat-el__item-text">Самая длинная цепочка <span id="sprint-longest-serie">0</span> слов.</p>\n                        </div>\n                        <div class="game-stat-el__decor"></div>\n                    </div>\n                    <div class="game-stat-el statistics__games-item">\n                        <h3 class="game-stat-el__title">Аудио вызов</h3>\n                        <div class="game-stat-el__item">\n                            <img class="game-stat-el__item-img" src="./public/assets/icons/stat-learnt.svg" width="30" height="30" alt="learnt">\n                            <p class="game-stat-el__item-text">Изучено <span id="audiocall-learnt">0</span> слов.</p>\n                        </div>\n                        <div class="game-stat-el__item">\n                            <img class="game-stat-el__item-img" src="./public/assets/icons/stat-rights.svg" width="30" height="30" alt="learnt">\n                            <p class="game-stat-el__item-text">Правильных ответов: <span id="audiocall-right-answers">0</span>%.</p>\n                        </div>\n                        <div class="game-stat-el__item">\n                            <img class="game-stat-el__item-img" src="./public/assets/icons/stat-longserie.svg" width="30" height="30" alt="learnt">\n                            <p class="game-stat-el__item-text">Самая длинная цепочка <span id="audiocall-longest-serie">0</span> слов.</p>\n                        </div>\n                        <div class="game-stat-el__decor"></div>\n                    </div>\n                </div>\n            </section>'],name:"statistics"},x=class{constructor(){this.content=null,this.currentView="",this.content=document.querySelector(".content"),this.content.innerHTML=""}render(){return null!==this.content&&(this.content.innerHTML=C.sections.join("")),Promise.resolve()}},y="rsLangHandbookData",k="handbookComplicatedWords",E="complicatedWordsPage";function S(){return JSON.parse(localStorage.getItem(y))}function D(e,n,t,r){localStorage.setItem(y,JSON.stringify({group:e,page:n,currPage:t,activeWordCardIndex:r}))}function I(){return JSON.parse(localStorage.getItem(k))}function L(e,n,t){localStorage.setItem(k,JSON.stringify({page:e,currPage:n,activeWordCardIndex:t}))}class j{constructor(){this.wordInfoAudioHandler=(e,n,t)=>{const[r,i,o]=[[e.audioMeaning,e.audioExample,e.audio],n,t];i.src=`${this.baseURL}/${r[o.numOfPlays]}`,o.numOfPlays+=1,o.numOfPlays!==r.length?i.play():o.numOfPlays=0},this.herokuApi=l,this.baseURL=i().defaults.baseURL,this.diffBetweenArrIndexAndPageNum=1,this.firstCardIndex=0}async getChunkOfWords(e,n){return await this.herokuApi.getChunkOfWords(e,n)}async getWordWithAssetsById(e){return await this.herokuApi.getWordWithAssetsById(e)}async getAllUserAggregatedHardWords(e){return this.herokuApi.getAllUserAggregatedHardWords(e)}async complicatedWordsCardHandler(){return await this.herokuApi.getUserWords()}async handbookButtonHandler(){S()||D(0,0,1,0);const e=S(),{group:n,page:t}=e;return{wordsData:(await this.getChunkOfWords(n,t)).data,rsLangHandbookData:e}}async levelCardHandler(e,n,t,r,i,o,a,s,l){e.classList.remove("active-level-card"),n.classList.add("active-level-card");const[c,A,d,u]=[(await this.getChunkOfWords(t,r)).data,a,s,l];return D(t,r,i,o),A.textContent="1",d.disabled=!0,u.disabled=!1,c}complicatedWordsButtonHandler(e,n){this.herokuApi.updateOrCreateUserWord(e,n),L(0,1,0)}learnedWordsButtonHandler(e,n){this.herokuApi.updateOrCreateUserWord(e,n)}async wordCardHandler(e,n,t,r){n.classList.remove("active-word-card"),e.classList.add("active-word-card"),"complicatedWords"===r?function(e,n){const t=I();L(t.currPage-e,t.currPage,n)}(this.diffBetweenArrIndexAndPageNum,t):function(e,n){const t=S();D(t.group,t.currPage-e,t.currPage,n)}(this.diffBetweenArrIndexAndPageNum,t)}async wordsPaginationButtonHandler(e,n,t,r,i,o){const a="handbook"===o,s=a?S():I(),[l,c,A]=[n,e,r];l.disabled=!1,s.currPage+=t,s.page+=t,s.currPage===i&&(c.disabled=!0),a?D(s.group,s.currPage-this.diffBetweenArrIndexAndPageNum,s.currPage,this.firstCardIndex):L(s.currPage-this.diffBetweenArrIndexAndPageNum,s.currPage,this.firstCardIndex);const d=a?(await this.getChunkOfWords(s.group,s.page)).data:(await this.getAllUserAggregatedHardWords(s.page)).data[0].paginatedResults;return A.textContent=`${s.currPage}`,d}async removeCardButtonHandler(e,n,t,r){const i="id"in e?e.id:e._id;await this.herokuApi.updateOrCreateUserWord(i,s.process);const o=I();L(1===t&&o.page>0?o.page-1:o.page,1===t&&o.currPage>1?o.currPage-1:o.currPage,0),n(r,this)}async getUserWords(){return await this.herokuApi.getUserWords()}async getWordStatistic(e){return this.herokuApi.getWordStatistic(e)}}var W;!function(e){e.handbook="handbook",e.complicatedWords="complicatedWords"}(W||(W={}));const q=W;class ${constructor(){this.content=document.querySelector("#main")}render(){return this.content.innerHTML=m.sections.join(""),Promise.resolve()}}function R(e,n){const t=e[0].paginatedResults.map((e=>e._id));return n.filter((e=>!t.includes(e.id)))}async function G(e){if(void 0!==e.page){const n=a.get(),t=localStorage.getItem("complicatedWordsPage");let{page:r}=e;if(n){if(t){const e=localStorage.getItem("handbookComplicatedWords");let n=JSON.parse(e).page,t=(await l.getAllUserAggregatedHardWords(n)).data[0].paginatedResults;for(;t.length<20&&n>0;){n-=1;const e=(await l.getAllUserAggregatedHardWords(n)).data[0].paginatedResults;t=t.concat(e)}return t.map((e=>Object.assign(Object.assign({},e),{id:e._id})))}const i=[l.getLearntUserWords(n.userId),l.getChunkOfWords(e.level,r)],[o,a]=await Promise.all(i);let s=R(o.data,a.data);for(;s.length<20&&r>0;){r-=1;const n=await l.getChunkOfWords(e.level,r);s=s.concat(R(o.data,n.data))}return s}return(await l.getChunkOfWords(e.level,e.page)).data}const n=Math.floor(31*Math.random());return(await l.getChunkOfWords(e.level,n)).data}function P(){return{date:Date(),allGamesRight:0,allGamesWrong:0,allGamesRightPercent:0,allNewWords:0,wordList:[],games:{audiocall:{rightPercent:0,bestSerie:0,right:0,wrong:0,newWords:0,wordList:[]},sprint:{rightPercent:0,bestSerie:0,right:0,wrong:0,newWords:0,wordList:[]}}}}class Y{constructor(){this.currentSerieLength=0;const e=localStorage.getItem("user");this.user=null===e?{token:"",refreshToken:"",userId:"unauthorized",name:"unauthorized"}:JSON.parse(e),this.currentStat=this.getCurrentUserStatistics()}getCurrentUserStatistics(){const e=localStorage.getItem(`stat-${this.user.userId}`);if(null!==e){const n=JSON.parse(e),t=new Date,r=new Date(n.date);return t.getDate()===r.getDate()&&t.getMonth()===r.getMonth()&&t.getFullYear()===r.getFullYear()?n:(this.currentStat=P(),this.setCurrentUserStatistics(),this.currentStat)}return this.currentStat=P(),this.setCurrentUserStatistics(),this.currentStat}setCurrentUserStatistics(){null!==this.currentStat&&localStorage.setItem(`stat-${this.user.userId}`,JSON.stringify(this.currentStat))}updateGameStat(e,n){var t;const r=Object.assign({},null===(t=this.currentStat)||void 0===t?void 0:t.games[e]);Object.prototype.hasOwnProperty.call(r,"wrong")?r.wrong+=n.wrong:r.wrong=n.wrong,Object.prototype.hasOwnProperty.call(r,"right")?r.right+=n.right:r.right=n.right,Object.prototype.hasOwnProperty.call(r,"bestSerie")?r.bestSerie<n.bestSerie&&(r.bestSerie=n.bestSerie):r.bestSerie=n.bestSerie,r.rightPercent=r.right/(r.right+r.wrong),n.wordList.forEach((e=>{r.wordList.find((n=>n.id===e.id))||r.wordList.push(e)})),r.newWords=n.wordList.length,this.updateUserStat()}updateWord(e,n,t){"right"===t?(this.currentStat.games[e].right+=1,this.currentSerieLength+=1,this.currentSerieLength>this.currentStat.games[e].bestSerie&&(this.currentStat.games[e].bestSerie=this.currentSerieLength)):(this.currentSerieLength=0,this.currentStat.games[e].wrong+=1),this.currentStat.games[e].rightPercent=Math.trunc(this.currentStat.games[e].right/(this.currentStat.games[e].right+this.currentStat.games[e].wrong)*100),this.currentStat.games[e].wordList.find((e=>e.id===n.id))||(this.currentStat.games[e].wordList.push(n),this.currentStat.games[e].newWords=this.currentStat.games[e].wordList.length),this.updateUserStat(),l.setAggregatedWord(n.id,e,t)}getGameStat(e){var n;return null===(n=this.currentStat)||void 0===n?void 0:n.games[e]}updateUserStat(){var e,n,t,r,i,o;if(Number.isNaN(null===(e=this.currentStat)||void 0===e?void 0:e.games.sprint.right)||Number.isNaN(null===(n=this.currentStat)||void 0===n?void 0:n.games.audiocall.right)||(this.currentStat.allGamesRight=this.currentStat.games.audiocall.right+this.currentStat.games.sprint.right),Number.isNaN(null===(t=this.currentStat)||void 0===t?void 0:t.games.sprint.wrong)||Number.isNaN(null===(r=this.currentStat)||void 0===r?void 0:r.games.audiocall.wrong)||(this.currentStat.allGamesWrong=this.currentStat.games.audiocall.wrong+this.currentStat.games.sprint.wrong),!Number.isNaN(null===(i=this.currentStat)||void 0===i?void 0:i.games.sprint.wrong)&&!Number.isNaN(null===(o=this.currentStat)||void 0===o?void 0:o.games.audiocall.wrong)){const e=this.currentStat.games.audiocall.wrong,n=this.currentStat.games.audiocall.right,t=this.currentStat.games.sprint.wrong,r=this.currentStat.games.sprint.right;this.currentStat.allGamesRightPercent=Math.trunc((n+r)/(e+n+t+r)*100)}this.currentStat.games.audiocall.wordList.length>0&&this.currentStat.games.audiocall.wordList.forEach((e=>{this.currentStat.wordList.find((n=>n.id===e.id))||this.currentStat.wordList.push(e)})),this.currentStat.games.sprint.wordList.length>0&&this.currentStat.games.sprint.wordList.forEach((e=>{this.currentStat.wordList.find((n=>n.id===e.id))||this.currentStat.wordList.push(e)})),this.currentStat.allNewWords=this.currentStat.wordList.length,this.setCurrentUserStatistics()}}var U=t(6486),F=t.n(U);function T(e){return e.rightTranslation===e.translation?"right":"wrong"}class J{constructor(e){this.gameWords=e,this.currentStage=this.createNewStage(),this.api=l}getRandomWord(){const e=this.gameWords.length,n=Math.floor(Math.random()*e);return this.gameWords[n]}createNewStage(){var e,n;const t=this.getRandomWord(),r=null==t?void 0:t.word,i=null==t?void 0:t.wordTranslate,o=F().shuffle([i,null===(e=this.getRandomWord())||void 0===e?void 0:e.wordTranslate,null===(n=this.getRandomWord())||void 0===n?void 0:n.wordTranslate]);return{engWord:r,rightTranslation:i,translation:o[0]?o[0]:o[1],sound:null==t?void 0:t.audio,word:t}}goToNextStage(){this.currentStage=this.createNewStage()}}const O={childList:!0};class z{constructor(e,n){this.bestSerie=0,this.currSerie=0,this.game=new J(e),this.content=document.querySelector("#main"),this.api=l,this.currentAudio=new Audio,this.rightAnswerAudio=new Audio("public/assets/audio/right.mp3"),this.wrongAnswerAudio=new Audio("public/assets/audio/wrong.mp3"),this.wrongAnswers=[],this.rightAnswers=[],this.dayStat=new Y,this.words=e,this.returnView=n,this.keyDownHandler=this.keyDownHandler.bind(this),this.timerId=null,this.counter=0}renderStage(){var e;if(this.words.length<5&&this.words.length<=this.counter)new Z(this.bestSerie,this.wrongAnswers,this.rightAnswers,new z(this.words,this.returnView),this.returnView).render(),this.timerId&&clearTimeout(this.timerId),null===(e=document.querySelector(".timer"))||void 0===e||e.classList.remove("start");else{const e=this.content.querySelectorAll(".answer");null==e||e.forEach((e=>null==e?void 0:e.classList.remove("fault","ok")));const n=this.content.querySelector("#engWord");this.currentAudio=new Audio(`${i().defaults.baseURL}/${this.game.currentStage.sound}`),this.currentAudio.play();const t=this.content.querySelector("#translation");n.innerHTML=this.game.currentStage.engWord,t.innerHTML=this.game.currentStage.translation}}render(){var e;return this.content.innerHTML=w.sections.join(""),this.addEventHandlers(),this.timerId=setTimeout((()=>{new Z(this.bestSerie,this.wrongAnswers,this.rightAnswers,new z(this.words,this.returnView),this.returnView).render()}),3e4),new MutationObserver((e=>{e.forEach((e=>{"childList"===e.type&&this.timerId&&(clearTimeout(this.timerId),document.removeEventListener("keydown",this.keyDownHandler))}))})).observe(this.content,O),this.renderStage(),null===(e=document.querySelector(".timer"))||void 0===e||e.classList.add("start"),Promise.resolve()}start(){this.render()}restart(){this.render()}addEventHandlers(){const e=this.content.querySelectorAll(".answer");null==e||e.forEach((e=>{e.addEventListener("click",(()=>{this.counter+=1,e.name===T(this.game.currentStage)?(null==e||e.classList.add("ok"),this.rightAnswerAudio.play(),this.currSerie+=1,this.bestSerie<this.currSerie&&(this.bestSerie=this.currSerie),this.rightAnswers.push(Object.assign({},this.game.currentStage.word)),this.dayStat.updateWord("sprint",this.game.currentStage.word,"right")):(null==e||e.classList.add("fault"),this.wrongAnswerAudio.play(),this.currSerie=0,this.wrongAnswers.push(Object.assign({},this.game.currentStage.word)),this.dayStat.updateWord("sprint",this.game.currentStage.word,"wrong")),this.game.goToNextStage(),setTimeout((()=>this.renderStage()),600)}))})),document.addEventListener("keydown",this.keyDownHandler)}keyDownHandler(e){var n,t,r,i;"ArrowRight"===e.code&&(this.counter+=1,e.stopPropagation(),"wrong"===T(this.game.currentStage)?(null===(n=this.content.querySelector("#answer2"))||void 0===n||n.classList.add("ok"),this.rightAnswerAudio.play(),this.currSerie+=1,this.bestSerie<this.currSerie&&(this.bestSerie=this.currSerie),this.rightAnswers.push(Object.assign({},this.game.currentStage.word)),this.dayStat.updateWord("sprint",this.game.currentStage.word,"right")):(null===(t=this.content.querySelector("#answer2"))||void 0===t||t.classList.add("fault"),this.wrongAnswerAudio.play(),this.currSerie=0,this.wrongAnswers.push(Object.assign({},this.game.currentStage.word)),this.dayStat.updateWord("sprint",this.game.currentStage.word,"wrong")),this.game.goToNextStage(),setTimeout((()=>this.renderStage()),600)),"ArrowLeft"===e.code&&(this.counter+=1,e.stopPropagation(),"right"===T(this.game.currentStage)?(null===(r=this.content.querySelector("#answer1"))||void 0===r||r.classList.add("ok"),this.rightAnswerAudio.play(),this.currSerie+=1,this.bestSerie<this.currSerie&&(this.bestSerie=this.currSerie),this.rightAnswers.push(Object.assign({},this.game.currentStage.word)),this.dayStat.updateWord("sprint",this.game.currentStage.word,"right")):(null===(i=this.content.querySelector("#answer1"))||void 0===i||i.classList.add("fault"),this.wrongAnswerAudio.play(),this.currSerie=0,this.wrongAnswers.push(Object.assign({},this.game.currentStage.word)),this.dayStat.updateWord("sprint",this.game.currentStage.word,"wrong")),this.game.goToNextStage(),setTimeout((()=>this.renderStage()),600))}}class H{constructor(e,n){this.content=document.querySelector("#main"),this.selectedLevel=null==e?void 0:e.level,this.page=e.page,this.returnView=n}async render(){var e;if(null===(e=document.querySelector(".footer"))||void 0===e||e.classList.add("hidden"),this.content.innerHTML=_.sections.join(""),null!==this.selectedLevel){const e=null!==this.page?await G({level:this.selectedLevel,page:this.page}):await G({level:this.selectedLevel});this.setGamesButtonsActions(e)}}setGamesButtonsActions(e){document.querySelector(".game__start-btn").addEventListener("click",(()=>{new z(e,this.returnView).render()}))}}class N{constructor(e,n){this.content=document.querySelector("body"),this.title=e,this.message=n}render(){const e=document.createElement("div");e.classList.add("popup"),e.setAttribute("id","message"),e.innerHTML=B.sections.join(""),this.content.append(e),setTimeout((()=>{e.classList.add("open")}),100);const n=e.querySelector("#popup-title"),t=e.querySelector(".popup__message");return n.innerText=this.title,t.innerText=this.message,[e.querySelector(".popup__area"),e.querySelector(".popup__close"),e.querySelector(".popup__close-btn")].forEach((n=>{n.addEventListener("click",(()=>{e.classList.remove("open"),e.remove(),setTimeout((()=>{e.remove()}),500)}))})),Promise.resolve()}}const Q={A1:0,A2:1,B1:2,B2:3,C1:4,C2:5};class K{constructor(){this.content=document.querySelector("#main"),this.selectedLevel=null}render(){this.content.innerHTML=g.sections.join(""),function(){const e=document.querySelectorAll(".choice__level");e.forEach((n=>{n.addEventListener("click",(()=>{const t=n.classList.contains("selected");e.forEach((e=>{e.classList.remove("selected")})),t||n.classList.add("selected")}))}))}(),document.querySelector("#sprint-game").addEventListener("click",(()=>{null!=this.selectedLevel?new H({level:this.selectedLevel},this).render():new N("Не выбран уровень сложности!","Выберите уровень сложности, чтобы продолжить!").render()})),document.querySelector("#audio-game").addEventListener("click",(()=>{null!=this.selectedLevel?new te({level:this.selectedLevel},this).render():new N("Не выбран уровень сложности!","Выберите уровень сложности, чтобы продолжить!").render()}));const e=document.querySelector(".choice__levels");return null==e||e.addEventListener("click",(e=>{const n=e.target;this.setSelectedLevel(n.id)})),Promise.resolve()}setSelectedLevel(e){this.selectedLevel=Q[e]}}const M=()=>{const e=document.querySelector(".popup");e.classList.remove("open"),setTimeout((()=>{e.remove()}),500)},V=i().defaults.baseURL;function X(e,n){const t="right"===e?document.querySelector(".game-stat__rights-words"):document.querySelector(".game-stat__errors-words");n.forEach((e=>{const n=document.createElement("div");n.classList.add("game-stat__el"),n.innerHTML='\n                            <a href="#" class="game-stat__el-play">\n                                <img src="./public/assets/icons/play.svg" alt="play">\n                                <p class="game-stat__el-word"></p>\n                                <p class="game-stat__el-dash">-</p>\n                                <p class="game-stat__el-transl"></p>\n                            </a>'.replace('<p class="game-stat__el-word"></p>',`<p class="game-stat__el-word">${e.word}</p>`).replace('<p class="game-stat__el-transl"></p>',`<p class="game-stat__el-transl">${e.wordTranslate}</p>`).replace('<a href="#" class="game-stat__el-play">',`<a href="#" class="game-stat__el-play" data-audio="${e.audio}">`),t.appendChild(n),n.addEventListener("click",(()=>{new Audio(`${V}/${e.audio}`).play()}))}))}class Z{constructor(e,n,t,r,i){this.content=document.querySelector("body"),this.wrongWords=[...n],this.rightWords=[...t],this.game=r,this.returnToView=i,this.bestSerie=e}render(){const e=document.createElement("div");e.classList.add("popup"),e.setAttribute("id","game-stat"),e.innerHTML=b.sections.join(""),this.content.append(e),setTimeout((()=>{e.classList.add("open")}),100);const n=document.querySelector(".game-stat__rights"),t=document.querySelector(".game-stat__rights-words"),r=document.querySelector(".header-rights"),i=document.querySelector(".game-stat__errors"),o=document.querySelector(".game-stat__errors-words"),a=document.querySelector(".header-errors"),s=document.querySelector(".stat-separator");this.rightWords.length>0?(n.innerText=this.rightWords.length.toString(),X("right",this.rightWords)):(r.classList.add("hide"),t.classList.add("hide"),s.classList.add("hide")),this.wrongWords.length>0?(i.innerText=this.wrongWords.length.toString(),X("wrong",this.wrongWords)):(a.classList.add("hide"),o.classList.add("hide"),s.classList.add("hide"));const l=e.querySelector(".game-stat__game-select");l.addEventListener("click",(()=>{(new K).render()})),l.addEventListener("click",M);const c=e.querySelector(".game-stat__restart");c.addEventListener("click",M),c.addEventListener("click",(()=>{this.game.restart()})),e.querySelector(".popup__close").addEventListener("click",(n=>{n.preventDefault(),e.classList.remove("open"),this.returnToView.render(),setTimeout((()=>{e.remove()}),500)}));const A=e.querySelector(".game-stat__slider"),d=e.querySelector("#game-stat-left"),u=e.querySelector("#game-stat-right");d.addEventListener("click",(()=>{A.classList.remove("shift"),null==d||d.classList.toggle("active-page"),null==u||u.classList.toggle("active-page")})),u.addEventListener("click",(()=>{A.classList.add("shift"),null==d||d.classList.toggle("active-page"),null==u||u.classList.toggle("active-page")}));const p=this.wrongWords.length+this.rightWords.length,h=e.querySelector(".game-stat__percent span");if(p){const e=Math.trunc(this.rightWords.length/p*100);h.innerText=e.toString()}else h.innerText="0";return e.querySelector(".game-stat__result-val").innerText=(10*this.rightWords.length).toString(),e.querySelector(".game-stat__serie-val").innerText=this.bestSerie.toString(),Promise.resolve()}}function ee(e,n){const t=[["реклама","знают","батарея","черный","чистый","город","страна","развивать","электрический","в конце концов","стакан","факт","история","природа","никогда","пластик","люди","проблема","улица","считать"],["древний","академия","доска","век","концерт","округ","подсказка","толковый словарь","существовать","квартира","джентльмен","скрытый","может быть","офицер","фунт","обработать","оригинальный","публиковать","театр","богатство"],["скамейка","ромашка","спор","пустой","ужастик","инцидент","туман","объект","сирота","беременный","сюжет","ярость","месть","позор","вздох","красться","запасной","стебель","ужин","тендер"],["астрология","пара","отклоняться","дифференцировать","сорвать","уравнение","ошибочный","неистовый","непреднамеренное","импровизировать","моряк","широта","множество","неизменность","вращаются","неприятность","успокаивают","мель","техника"],["аффект","автограф","шарик","заварить","очарование","судьба","оборудование","рог","раздраженный","лаг","кошмарный сон","питательный","белок","подпись","материал","подсознание","ван","предупредить","разрабатывать","увеличить"],["аккумулируют","антенна","устройство","разрядка","лавина","нетронутый","согласованность","эпизод","смертный","горький","предзнаменование","пасмурная погода","следопыт","щебень","боком","рыдать","уединиться","трезвый","пятнышко","воспитание"]],r=n.map((e=>e.wordTranslate)).filter((n=>n!==e.wordTranslate)).sort((()=>.5-Math.random())).slice(0,4);if(r.length<4){const n=t[e.group].sort((()=>.5-Math.random()));for(let e=0;e<n.length&&(r.includes(n[e])||r.push(n[e]),4!==r.length);e+=1);}return r}class ne{constructor(e,n){this.stages=[],this.gameCtrls=null,this.view=null,this.bestSerie=0,this.currSerie=0,this.api=l,this.words=[...e.sort((()=>.5-Math.random()))],this.createStages(),this.currentStage=0,this.baseURL=i().defaults.baseURL,this.wrongAnswers=[],this.rightAnswers=[],this.returnToView=n,this.currentAudio=new Audio,this.rightAnswerAudio=new Audio("public/assets/audio/right.mp3"),this.wrongAnswerAudio=new Audio("public/assets/audio/wrong.mp3"),this.dayStat=new Y,this.answerClick=e=>{e.stopPropagation(),this.resetMouseEvents();let n=null;n=e.target instanceof HTMLParagraphElement?e.target.parentElement:e.target;const t=n.getAttribute("data-word");this.checkAnswer(t,n),this.resetKeyboardEvents()},this.keyDownHandler=e=>{e.stopPropagation();let n=null;switch(e.code){case"Digit1":case"Numpad1":n=this.gameCtrls.answers[0];break;case"Digit2":case"Numpad2":n=this.gameCtrls.answers[1];break;case"Digit3":case"Numpad3":n=this.gameCtrls.answers[2];break;case"Digit4":case"Numpad4":n=this.gameCtrls.answers[3];break;case"Digit5":case"Numpad5":n=this.gameCtrls.answers[4];break;case"Space":this.currentAudio.play();break;case"Enter":case"NumpadEnter":case"ArrowRight":n=document.querySelector(".game__skip-btn")}if(null!=n){e.preventDefault(),n.classList.add("active"),setTimeout((()=>{null!=n&&n.classList.remove("active")}),200);const t=n.getAttribute("data-word");this.checkAnswer(t,n),this.resetKeyboardEvents()}}}start(){this.view=new $,this.view.render().then((()=>{this.gameCtrls=function(){const e={playBtn:null,skipBtn:null,answers:[],texts:[]};e.playBtn=document.querySelector(".game__audio-btn"),e.skipBtn=document.querySelector(".game__skip-btn");for(let n=1;n<=5;n+=1){const t=document.querySelector(`#answer${n} .answer__text`);e.texts.push(t);const r=document.querySelector(`#answer${n}`);e.answers.push(r)}return e}()})).then((()=>{this.updateCurrentStage(),this.currentAudio.play()}))}checkAnswer(e,n){var t;if(null!==e){if(null==n||n.classList.add("hide-help"),e===this.stages[this.currentStage].word.wordTranslate)this.rightAnswerAudio.play(),this.currSerie+=1,this.bestSerie<this.currSerie&&(this.bestSerie=this.currSerie),this.rightAnswers.push(Object.assign({},this.stages[this.currentStage].word)),n.classList.add("ok"),this.dayStat.updateWord("audiocall",this.stages[this.currentStage].word,"right");else{const e=this.stages[this.currentStage].word.wordTranslate,r=null===(t=this.gameCtrls)||void 0===t?void 0:t.answers.find((n=>n.getAttribute("data-word")===e));r&&(r.classList.add("ok"),r.classList.add("hide-help")),this.wrongAnswerAudio.play(),this.currSerie=0,this.wrongAnswers.push(Object.assign({},this.stages[this.currentStage].word)),n.classList.add("fault"),this.dayStat.updateWord("audiocall",this.stages[this.currentStage].word,"wrong")}setTimeout((()=>{this.currentStage+=1,this.currentStage<this.stages.length?this.updateCurrentStage():new Z(this.bestSerie,this.wrongAnswers,this.rightAnswers,this,this.returnToView).render()}),500)}}setKeyboardEvents(){const e=document.querySelector(".game");e.focus(),e.addEventListener("keydown",this.keyDownHandler)}resetKeyboardEvents(){document.querySelector(".game").removeEventListener("keydown",this.keyDownHandler)}restart(){this.bestSerie=0,this.currSerie=0,this.createStages(),this.currentStage=0,this.wrongAnswers=[],this.rightAnswers=[],this.start()}setMouseEvents(){var e;this.gameCtrls.answers.forEach((e=>{e.addEventListener("click",this.answerClick)}));const n=document.querySelector(".game__audio-btn");null==n||n.addEventListener("click",(()=>{this.currentAudio.play()})),null===(e=document.querySelector(".game__skip-btn"))||void 0===e||e.addEventListener("click",this.answerClick)}resetMouseEvents(){this.gameCtrls.answers.forEach((e=>{e.removeEventListener("click",this.answerClick)}))}updateCurrentStage(){this.currentAudio=new Audio(`${this.baseURL}/${this.stages[this.currentStage].word.audio}`),this.currentAudio.play();const e=[...this.stages[this.currentStage].answers];e.push(this.stages[this.currentStage].word.wordTranslate),e.sort((()=>.5-Math.random()));for(let n=0;n<this.gameCtrls.texts.length;n+=1)this.gameCtrls.texts[n].innerText=e[n],this.gameCtrls.answers[n].setAttribute("data-word",e[n]),this.gameCtrls.answers[n].classList.remove("ok"),this.gameCtrls.answers[n].classList.remove("fault"),this.gameCtrls.answers[n].classList.remove("hide-help");setTimeout((()=>{this.setMouseEvents(),this.setKeyboardEvents()}),100)}createStages(){const e=[];this.words.forEach((n=>{e.push({word:Object.assign({},n),answers:ee(n,this.words)})})),this.stages=[...e]}}class te{constructor(e,n){this.content=document.querySelector("#main"),this.selectedLevel=null==e?void 0:e.level,this.page=e.page,this.returnView=n}render(){var e;return null===(e=document.querySelector(".footer"))||void 0===e||e.classList.add("hidden"),this.content.innerHTML=f.sections.join(""),this.setGamesButtonsActions(),Promise.resolve()}setGamesButtonsActions(){document.querySelector(".game__start-btn").addEventListener("click",(async()=>{if(null!==this.selectedLevel){const e=null!==this.page?await G({level:this.selectedLevel,page:this.page}):await G({level:this.selectedLevel});new ne(e,this.returnView).start()}}))}}function re(e,n,t){const r=document.createElement(e);return r.className=n,t&&(r.innerHTML=t),r}function ie(e,n,t){const r=new Image;return r.className=e,r.src=n,r.alt=t,r}function oe(e,n,t,r,i,o,a){const s=re("div",e);return s.append(re("h5",n,t),re("p",r,`${i}`),re("p",o,`${a}`)),s}class ae{constructor(){this.levelsSelector="#handbook__levels",this.levelCardsContent=["A1","A2","B1","B2","C1","C2"],this.defaultPage=0,this.defaultCurrPage=1,this.defaultActiveWordCardIndex=0}renderLevelCards(e,n,t){const r=document.querySelector(this.levelsSelector);r.innerHTML="";const i=S();this.levelCardsContent.forEach(((o,a)=>{const s=re("div","handbook__level-card",o);a===i.group&&(s.classList.add("active-level-card"),document.querySelector("#handbook__words").className=`handbook__words ${this.levelCardsContent[a]}`),s.addEventListener("click",(()=>{const r=document.querySelector(".active-level-card");document.querySelector("#handbook__words").className=`handbook__words ${this.levelCardsContent[a]}`,this.levelCardHandler(r,s,e,a,n,t)})),r.append(s)}))}async levelCardHandler(e,n,t,r,i,o){const[a,s,l]=[document.querySelector(".words-pagination__prev-button"),document.querySelector(".words-pagination__curr-page"),document.querySelector(".words-pagination__next-button")],c=await t.levelCardHandler(e,n,r,this.defaultPage,this.defaultCurrPage,this.defaultActiveWordCardIndex,s,a,l);i.renderWordCards(c,t,q.handbook),o.renderWordCardInfo(c[this.defaultActiveWordCardIndex],t,q.handbook)}}function se(e,n){const[t,r,i,o,a,s]=[document.querySelector(".active-word-card"),document.querySelectorAll(".handbook__word-card"),document.querySelector(".words-pagination__curr-page"),document.querySelector(".handbook__words"),document.querySelector(".handbook__sprint"),document.querySelector(".handbook__audio-call")];t.classList.add(e),t.classList.remove(n);const l=Array.from(r).every((e=>e.classList.contains("hard"))),c=Array.from(r).every((e=>e.classList.contains("hard")||e.classList.contains("learned")));if(l)return i.classList.remove("all-wrods-learned"),o.classList.remove("page-learned"),a.classList.remove("disabled"),void s.classList.remove("disabled");c&&(i.classList.add("all-words-learned"),o.classList.add("page-learned"),a.classList.add("disabled"),s.classList.add("disabled"))}class le{constructor(){this.baseURL=i().defaults.baseURL,this.wordCardInfoSelector="#handbook__word-card-info"}async renderWordCardInfo(e,n,t,r){const[i,o,s,l,c]=[document.querySelector(this.wordCardInfoSelector),ie("word-card-info__img",`${this.baseURL}/${e.image}`,"word-image"),re("button","word-card-info__play-audio-button"),new Audio(`${this.baseURL}/${e.audio}`),{numOfPlays:0}];i.innerHTML="",l.addEventListener("ended",(()=>{n.wordInfoAudioHandler(e,l,c)})),s.addEventListener("click",(()=>l.play()));const A=re("div","word-card-info__headings");if(A.append(re("h4","word-card-info__title",e.word),re("h5","word-card-info__subtitle",e.wordTranslate),re("h5","word-card-info__transcription",e.transcription)),i.append(o,l,A,s,oe("word-card-info__meaning-container","word-card-info__meaning-title","Значение","word-card-info__meaning-ru",e.textMeaning,"word-card-info__meaning-en",e.textMeaningTranslate),oe("word-card-info__example-container","word-card-info__example-title","Пример","word-card-info__example-ru",e.textExample,"word-card-info__example-en",e.textExampleTranslate)),a.get()&&"handbook"===t){this.renderCardButtonsAfterAuth(n,e);const t="_id";await this.renderWordStatistic(n,e.id||e[t])}if(a.get()&&"complicatedWords"===t&&r){this.renderRemoveButton(n,e,r);const t="_id";await this.renderWordStatistic(n,e.id||e[t])}}renderCardButtonsAfterAuth(e,n){const t=document.querySelector(this.wordCardInfoSelector),r=re("button","word-card-info__complicated-words-button","В сложные слова");r.addEventListener("click",(()=>{e.complicatedWordsButtonHandler(n.id,s.hard),se("hard","learned")}));const i=re("button","word-card-info__learned-words-button","В изученные слова");i.addEventListener("click",(()=>{e.learnedWordsButtonHandler(n.id,s.learned),se("learned","hard")}));const o=re("div","word-card-info__buttons");o.append(r,i),t.append(o)}renderRemoveButton(e,n,t){const r=document.querySelector(this.wordCardInfoSelector),i=re("button","word-card-info__remove-button","Удалить из сложных слов");i.addEventListener("click",(async()=>{const r=document.querySelector(".handbook__word-cards").children.length,i=document.querySelector("#handbook__levels");e.removeCardButtonHandler(n,t,r,i)})),r.append(i)}async renderWordStatistic(e,n){const t=await e.getWordStatistic(n),r=document.querySelector(this.wordCardInfoSelector),i=re("div","word-card-info__statistic"),o=(null==t?void 0:t.optional.games.sprint)||{right:0,wrong:0},a=(null==t?void 0:t.optional.games.audiocall)||{right:0,wrong:0},s=`\n    <div id='sprint-statistic'>\n      <h4 class="sprint-statistic__title">Спринт</h4>\n        <ul>\n          <li>Верно: ${o.right}</li>\n          <li>Неверно: ${o.wrong}</li>\n        </ul>\n      </div>\n    `,l=`\n    <div id='audio-call-statistic'>\n      <h4 class="audio-call-statistic__title">Аудиовызов</h4>\n        <ul>\n          <li>Верно: ${a.right}</li>\n          <li>Неверно: ${a.wrong}</li>\n        </ul>\n      </div>\n    `;i.insertAdjacentHTML("afterbegin",s),i.insertAdjacentHTML("afterbegin",l),r.append(i)}}class ce{constructor(){this.wordsSelector="#handbook__word-cards",this.wordCardInfo=new le}async renderWordCards(e,n,t,r){const i=document.querySelector(this.wordsSelector),o=a.get()?(await n.getUserWords()).data:null;i.innerHTML="";const s=await Promise.all(function(e){return e.sort(((e,n)=>e.group===n.group?e.page-n.page:e.group-n.page))}(e).map(((e,a)=>this.createCard(e,i,o,n,a,t,r))));!function(e){const[n,t,r,i]=[document.querySelector(".words-pagination__curr-page"),document.querySelector(".handbook__words"),document.querySelector(".handbook__sprint"),document.querySelector(".handbook__audio-call")],o=e.every((e=>e.classList.contains("hard"))),a=e.every((e=>e.classList.contains("hard")||e.classList.contains("learned")));if(o)return t.classList.remove("page-learned"),r.classList.remove("disabled"),void i.classList.remove("disabled");a?(n.classList.add("all-words-learned"),t.classList.add("page-learned"),r.classList.add("disabled"),i.classList.add("disabled")):(n.classList.remove("all-words-learned"),t.classList.remove("page-learned"),r.classList.remove("disabled"),i.classList.remove("disabled"))}(s),s[("handbook"===t?S():I()).activeWordCardIndex].classList.add("active-word-card")}async createCard(e,n,t,r,i,o,a){const s=re("div","handbook__word-card");s.append(re("h5","handbook__card-title",e.word),re("h6","handbook__card-subtitle",e.wordTranslate)),n.append(s);const l="id"in e?e.id:e._id;return t&&t.forEach((e=>{e.wordId===l&&s.classList.add(e.difficulty)})),s.addEventListener("click",(async()=>{const e=document.querySelector(".active-word-card");r.wordCardHandler(s,e,i,o),this.wordCardInfo.renderWordCardInfo((await r.getWordWithAssetsById(l)).data,r,o,a)})),s}}function Ae(e,n,t){n===t&&(e.disabled=!0)}class de{constructor(e){this.levelCards=new ae,this.wordCards=new ce,this.wordCardInfo=new le,this.startView=e}renderHandbook(e,n,t){const r=document.querySelector("#main");if(r.innerHTML="",r.insertAdjacentHTML("beforeend",'\n    <section id="handbook" class="handbook">\n      <div class="handbook__views">\n        <h4 id="handbook__title" class="handbook__title">Учебник</h4>\n      </div>\n      <div id="handbook__levels" class="handbook__levels">\n      </div>\n      <div id="handbook__games" class="handbook__games">\n        <h4 class="handbook__games-title">Игры</h4>\n        <div id="handbook__audio-call" class="handbook__audio-call">\n          <h5 class="handbook__game-title">Аудиовызов</h5>\n        </div>\n        <div id="handbook__sprint" class="handbook__sprint">\n          <h5 class="handbook__game-title">Спринт</h5>\n        </div>\n      </div>\n      <div id="handbook__words" class="handbook__words">\n        <h4 class="handbook__words-title">Слова</h4>\n        <div id="handbook__word-cards" class="handbook__word-cards">\n        </div>\n        <div id="handbook__word-card-info" class="handbook__word-card-info word-card-info">\n        </div>\n        <div id="handbook__words-pagination" class="handbook__words-pagination words-pagination">\n        </div>\n      </div>\n    </div>'),a.get()&&this.renderComplicatedWordsCard(t),localStorage.getItem(E)){this.complicatedWordsCardHandler(document.querySelector("#handbook__levels"),t);const e=document.querySelector(".handbook__complicated-words-title"),n=document.querySelector("#handbook__words");e.classList.add("active-handbook-page"),n.classList.add("complicated-words")}else this.levelCards.renderLevelCards(t,this.wordCards,this.wordCardInfo),this.wordCards.renderWordCards(e,t,q.handbook),this.wordCardInfo.renderWordCardInfo(n,t,q.handbook),this.handlePaginationButtons(t,1,30,q.handbook),document.querySelector("#handbook__title").classList.add("active-handbook-page");a.get()&&this.handbookTitleHandler(t);const i=document.querySelector("#handbook__audio-call"),o=document.querySelector("#handbook__sprint");null==o||o.addEventListener("click",(()=>{const e=S();new H({level:e.group,page:e.page},this.startView).render()})),null==i||i.addEventListener("click",(()=>{const e=S();new te({level:e.group,page:e.page},this.startView).render()}))}handbookTitleHandler(e){const n=document.querySelector("#handbook__title");n.addEventListener("click",(async()=>{document.querySelector("#handbook__words").classList.remove("complicated-words"),document.querySelector(".handbook__complicated-words-title").classList.remove("active-handbook-page"),n.classList.add("active-handbook-page"),localStorage.removeItem(E);const t=S(),r=(await e.getChunkOfWords(t.group,t.page)).data;this.levelCards.renderLevelCards(e,this.wordCards,this.wordCardInfo),this.wordCards.renderWordCards(r,e,q.handbook),this.wordCardInfo.renderWordCardInfo(r[t.activeWordCardIndex],e,q.handbook),this.handlePaginationButtons(e,1,30,q.handbook)}))}handlePaginationButtons(e,n,t,r){!function(){const e=document.querySelector("#handbook__words-pagination");e.innerHTML="",e.append(re("button","words-pagination__prev-button"),re("div","words-pagination__curr-page"),re("button","words-pagination__next-button"))}();const i="handbook"===r?S():I(),[o,a,s,l]=[document.querySelector(".words-pagination__prev-button"),document.querySelector(".words-pagination__curr-page"),document.querySelector(".words-pagination__next-button"),1];a.textContent=`${i.currPage}`,Ae(o,i.currPage,n),Ae(s,i.currPage,t),o.addEventListener("click",(()=>{this.paginationButtonHandler(e,o,s,-l,a,n,r)})),s.addEventListener("click",(()=>{this.paginationButtonHandler(e,s,o,l,a,t,r)}))}async paginationButtonHandler(e,n,t,r,i,o,a){const[s,l]=[await e.wordsPaginationButtonHandler(n,t,+r,i,o,a),0];this.wordCards.renderWordCards(s,e,a,"complicatedWords"===a?this.complicatedWordsCardHandler.bind(this):void 0),this.wordCardInfo.renderWordCardInfo(s[l],e,a,"complicatedWords"===a?this.complicatedWordsCardHandler.bind(this):void 0)}async renderComplicatedWordsCard(e){const n=document.querySelector("#handbook__title"),t=document.querySelector("#handbook__levels"),r=re("h4","handbook__complicated-words-title","Сложные слова");r.addEventListener("click",(()=>{this.complicatedWordsCardHandler(t,e),r.classList.add("active-handbook-page"),document.querySelector("#handbook__words").classList.add("complicated-words")})),n.after(r)}async complicatedWordsCardHandler(e,n){document.querySelector("#handbook__title").classList.remove("active-handbook-page"),localStorage.setItem(E,JSON.stringify(!0));const t=e;I()||L(0,1,0);const r=I(),i=(await n.getAllUserAggregatedHardWords(r.page)).data[0],{paginatedResults:o,totalCount:a}=i;t.innerHTML="",this.renderComplicatedWordsContent(a[0],o,n,r.activeWordCardIndex,this.complicatedWordsCardHandler.bind(this));const s=a[0]?Math.ceil(a[0].count/20):1;this.handlePaginationButtons(n,1,s,q.complicatedWords)}renderComplicatedWordsContent(e,n,t,r,i){if(e)this.wordCards.renderWordCards(n,t,q.complicatedWords,i),this.wordCardInfo.renderWordCardInfo(n[r],t,q.complicatedWords,i);else{const[e,n]=[document.querySelector("#handbook__word-cards"),document.querySelector("#handbook__word-card-info")];e.innerHTML="Для вас нет сложных слов",n.innerHTML=""}}}class ue{constructor(e){this.handbook=new de(this),this.getViewData=e}async render(){var e;null===(e=document.querySelector(".footer"))||void 0===e||e.classList.remove("hidden");const{wordData:n,wordsData:t,handbookController:r}=await this.getViewData();this.handbook.renderHandbook(t,n,r)}}class pe{constructor(){this.content=document.querySelector("#main")}render(){this.content.innerHTML=v.sections.join("");const e=(new Y).getCurrentUserStatistics(),n=document.querySelector("#statistics-newwords"),t=document.querySelector("#statistics-percent"),r=document.querySelector("#statistics-learnt"),i=document.querySelector("#sprint-learnt"),o=document.querySelector("#sprint-right-answers"),c=document.querySelector("#sprint-longest-serie"),A=document.querySelector("#audiocall-learnt"),d=document.querySelector("#audiocall-right-answers"),u=document.querySelector("#audiocall-longest-serie"),p=document.querySelector(".statistics__today");if(a.get()){const e=new Date;let n=0;l.getUserWords().then((t=>{const i=t.data.filter((e=>e.difficulty===s.learned)).filter((n=>{const t=new Date(n.optional.addTime);return e.getFullYear()===t.getFullYear()&&e.getMonth()===t.getMonth()&&e.getDate()===t.getDate()}));n=i.length,r.innerText=n.toString()}))}else p.classList.add("hide-learnt");return n.innerText=e.allGamesRight.toString(),t.innerText=e.allGamesRightPercent.toString(),i.innerText=e.games.sprint.right.toString(),o.innerText=e.games.sprint.rightPercent.toString(),c.innerText=e.games.sprint.bestSerie.toString(),A.innerText=e.games.audiocall.right.toString(),d.innerText=e.games.audiocall.rightPercent.toString(),u.innerText=e.games.audiocall.bestSerie.toString(),Promise.resolve()}}function he(e){const n=document.querySelector(".footer"),t=document.querySelector(".wrapper");e?(n.classList.add("hidden"),t.classList.add("hide-footer")):(n.classList.remove("hidden"),t.classList.remove("hide-footer"))}function Ce(e){const n=document.querySelector(".header__list");(null==n?void 0:n.querySelectorAll(".menu__item-link")).forEach((n=>{n.classList.remove("selected"),n.id===e&&n.classList.add("selected")}))}var ge=t(3379),fe=t.n(ge),me=t(7795),_e=t.n(me),we=t(569),Be=t.n(we),be=t(3565),ve=t.n(be),xe=t(9216),ye=t.n(xe),ke=t(4589),Ee=t.n(ke),Se=t(7192),De={};De.styleTagTransform=Ee(),De.setAttributes=ve(),De.insert=Be().bind(null,"head"),De.domAPI=_e(),De.insertStyleElement=ye(),fe()(Se.Z,De),Se.Z&&Se.Z.locals&&Se.Z.locals,(new class{constructor(){this.appView=new x,this.authEventHandlers=new h((()=>this.appView.render())),this.authorizationController=new c(l,a),this.handbookController=new j}start(){const e=document.querySelector("#singin-btn"),t=document.querySelector("#log-out-btn"),r=document.querySelector(".blackout");window.addEventListener("load",(async()=>{await this.authorizationController.getNewToken();const n=document.querySelector("body"),r=document.querySelector("#main-page");null==n||n.classList.remove("body_hidden"),r.classList.add("selected"),this.appView=new x,this.appView.render(),localStorage.getItem("user")&&(null==e||e.classList.add("btn_hidden"),null==t||t.classList.remove("btn_hidden"))})),window.addEventListener("storage",(()=>{localStorage.getItem("user")||(this.appView.render(),null==e||e.classList.remove("btn_hidden"),null==t||t.classList.add("btn_hidden"))})),r&&n&&(null==e||e.addEventListener("click",(()=>this.authEventHandlers.renderAuthModal(r,n)))),e&&(null==t||t.addEventListener("click",(()=>{this.authorizationController.logOutUser(),null==e||e.classList.remove("btn_hidden"),null==t||t.classList.add("btn_hidden"),this.appView.render()})));const i=document.querySelector("#main-page");null==i||i.addEventListener("click",(e=>{Ce(e.target.id),this.mainLinkHandler()}));const o=document.querySelector("#handbook-page");null==o||o.addEventListener("click",(e=>{Ce(e.target.id),this.handbookLinkHandler()}));const a=document.querySelector("#games-page");null==a||a.addEventListener("click",(e=>{Ce(e.target.id),this.gameSelectorLinkHandler()}));const s=document.querySelector("#stat-page");null==s||s.addEventListener("click",(e=>{Ce(e.target.id),this.statisticsLinkHandler()}))}async handbookLinkHandler(){const e=this.handbookController;this.appView=new ue((async()=>{const{wordsData:n,rsLangHandbookData:t}=await e.handbookButtonHandler();return{wordsData:n,handbookController:e,wordData:n[t.activeWordCardIndex]}})),this.appView.render(),he(!1)}gameSelectorLinkHandler(){this.appView=new K,this.appView.render(),he(!0)}mainLinkHandler(){this.appView=new x,this.appView.render(),he(!1)}statisticsLinkHandler(){this.appView=new pe,this.appView.render(),he(!1)}}).start()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,