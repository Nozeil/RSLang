/*! For license information please see index.js.LICENSE.txt */
(()=>{var r={9669:(r,e,n)=>{r.exports=n(1609)},5448:(r,e,n)=>{"use strict";var t=n(4867),i=n(6026),o=n(4372),a=n(5327),s=n(4097),l=n(4109),c=n(7985),A=n(7874),d=n(2648),u=n(644),p=n(205);r.exports=function(r){return new Promise((function(e,n){var h,C=r.data,g=r.headers,f=r.responseType;function m(){r.cancelToken&&r.cancelToken.unsubscribe(h),r.signal&&r.signal.removeEventListener("abort",h)}t.isFormData(C)&&t.isStandardBrowserEnv()&&delete g["Content-Type"];var _=new XMLHttpRequest;if(r.auth){var w=r.auth.username||"",B=r.auth.password?unescape(encodeURIComponent(r.auth.password)):"";g.Authorization="Basic "+btoa(w+":"+B)}var b=s(r.baseURL,r.url);function v(){if(_){var t="getAllResponseHeaders"in _?l(_.getAllResponseHeaders()):null,o={data:f&&"text"!==f&&"json"!==f?_.response:_.responseText,status:_.status,statusText:_.statusText,headers:t,config:r,request:_};i((function(r){e(r),m()}),(function(r){n(r),m()}),o),_=null}}if(_.open(r.method.toUpperCase(),a(b,r.params,r.paramsSerializer),!0),_.timeout=r.timeout,"onloadend"in _?_.onloadend=v:_.onreadystatechange=function(){_&&4===_.readyState&&(0!==_.status||_.responseURL&&0===_.responseURL.indexOf("file:"))&&setTimeout(v)},_.onabort=function(){_&&(n(new d("Request aborted",d.ECONNABORTED,r,_)),_=null)},_.onerror=function(){n(new d("Network Error",d.ERR_NETWORK,r,_,_)),_=null},_.ontimeout=function(){var e=r.timeout?"timeout of "+r.timeout+"ms exceeded":"timeout exceeded",t=r.transitional||A;r.timeoutErrorMessage&&(e=r.timeoutErrorMessage),n(new d(e,t.clarifyTimeoutError?d.ETIMEDOUT:d.ECONNABORTED,r,_)),_=null},t.isStandardBrowserEnv()){var x=(r.withCredentials||c(b))&&r.xsrfCookieName?o.read(r.xsrfCookieName):void 0;x&&(g[r.xsrfHeaderName]=x)}"setRequestHeader"in _&&t.forEach(g,(function(r,e){void 0===C&&"content-type"===e.toLowerCase()?delete g[e]:_.setRequestHeader(e,r)})),t.isUndefined(r.withCredentials)||(_.withCredentials=!!r.withCredentials),f&&"json"!==f&&(_.responseType=r.responseType),"function"==typeof r.onDownloadProgress&&_.addEventListener("progress",r.onDownloadProgress),"function"==typeof r.onUploadProgress&&_.upload&&_.upload.addEventListener("progress",r.onUploadProgress),(r.cancelToken||r.signal)&&(h=function(r){_&&(n(!r||r&&r.type?new u:r),_.abort(),_=null)},r.cancelToken&&r.cancelToken.subscribe(h),r.signal&&(r.signal.aborted?h():r.signal.addEventListener("abort",h))),C||(C=null);var y=p(b);y&&-1===["http","https","file"].indexOf(y)?n(new d("Unsupported protocol "+y+":",d.ERR_BAD_REQUEST,r)):_.send(C)}))}},1609:(r,e,n)=>{"use strict";var t=n(4867),i=n(1849),o=n(321),a=n(7185),s=function r(e){var n=new o(e),s=i(o.prototype.request,n);return t.extend(s,o.prototype,n),t.extend(s,n),s.create=function(n){return r(a(e,n))},s}(n(5546));s.Axios=o,s.CanceledError=n(644),s.CancelToken=n(4972),s.isCancel=n(6502),s.VERSION=n(7288).version,s.toFormData=n(7675),s.AxiosError=n(2648),s.Cancel=s.CanceledError,s.all=function(r){return Promise.all(r)},s.spread=n(8713),s.isAxiosError=n(6268),r.exports=s,r.exports.default=s},4972:(r,e,n)=>{"use strict";var t=n(644);function i(r){if("function"!=typeof r)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(r){e=r}));var n=this;this.promise.then((function(r){if(n._listeners){var e,t=n._listeners.length;for(e=0;e<t;e++)n._listeners[e](r);n._listeners=null}})),this.promise.then=function(r){var e,t=new Promise((function(r){n.subscribe(r),e=r})).then(r);return t.cancel=function(){n.unsubscribe(e)},t},r((function(r){n.reason||(n.reason=new t(r),e(n.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.prototype.subscribe=function(r){this.reason?r(this.reason):this._listeners?this._listeners.push(r):this._listeners=[r]},i.prototype.unsubscribe=function(r){if(this._listeners){var e=this._listeners.indexOf(r);-1!==e&&this._listeners.splice(e,1)}},i.source=function(){var r;return{token:new i((function(e){r=e})),cancel:r}},r.exports=i},644:(r,e,n)=>{"use strict";var t=n(2648);function i(r){t.call(this,null==r?"canceled":r,t.ERR_CANCELED),this.name="CanceledError"}n(4867).inherits(i,t,{__CANCEL__:!0}),r.exports=i},6502:r=>{"use strict";r.exports=function(r){return!(!r||!r.__CANCEL__)}},321:(r,e,n)=>{"use strict";var t=n(4867),i=n(5327),o=n(782),a=n(3572),s=n(7185),l=n(4097),c=n(4875),A=c.validators;function d(r){this.defaults=r,this.interceptors={request:new o,response:new o}}d.prototype.request=function(r,e){"string"==typeof r?(e=e||{}).url=r:e=r||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var n=e.transitional;void 0!==n&&c.assertOptions(n,{silentJSONParsing:A.transitional(A.boolean),forcedJSONParsing:A.transitional(A.boolean),clarifyTimeoutError:A.transitional(A.boolean)},!1);var t=[],i=!0;this.interceptors.request.forEach((function(r){"function"==typeof r.runWhen&&!1===r.runWhen(e)||(i=i&&r.synchronous,t.unshift(r.fulfilled,r.rejected))}));var o,l=[];if(this.interceptors.response.forEach((function(r){l.push(r.fulfilled,r.rejected)})),!i){var d=[a,void 0];for(Array.prototype.unshift.apply(d,t),d=d.concat(l),o=Promise.resolve(e);d.length;)o=o.then(d.shift(),d.shift());return o}for(var u=e;t.length;){var p=t.shift(),h=t.shift();try{u=p(u)}catch(r){h(r);break}}try{o=a(u)}catch(r){return Promise.reject(r)}for(;l.length;)o=o.then(l.shift(),l.shift());return o},d.prototype.getUri=function(r){r=s(this.defaults,r);var e=l(r.baseURL,r.url);return i(e,r.params,r.paramsSerializer)},t.forEach(["delete","get","head","options"],(function(r){d.prototype[r]=function(e,n){return this.request(s(n||{},{method:r,url:e,data:(n||{}).data}))}})),t.forEach(["post","put","patch"],(function(r){function e(e){return function(n,t,i){return this.request(s(i||{},{method:r,headers:e?{"Content-Type":"multipart/form-data"}:{},url:n,data:t}))}}d.prototype[r]=e(),d.prototype[r+"Form"]=e(!0)})),r.exports=d},2648:(r,e,n)=>{"use strict";var t=n(4867);function i(r,e,n,t,i){Error.call(this),this.message=r,this.name="AxiosError",e&&(this.code=e),n&&(this.config=n),t&&(this.request=t),i&&(this.response=i)}t.inherits(i,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var o=i.prototype,a={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(r){a[r]={value:r}})),Object.defineProperties(i,a),Object.defineProperty(o,"isAxiosError",{value:!0}),i.from=function(r,e,n,a,s,l){var c=Object.create(o);return t.toFlatObject(r,c,(function(r){return r!==Error.prototype})),i.call(c,r.message,e,n,a,s),c.name=r.name,l&&Object.assign(c,l),c},r.exports=i},782:(r,e,n)=>{"use strict";var t=n(4867);function i(){this.handlers=[]}i.prototype.use=function(r,e,n){return this.handlers.push({fulfilled:r,rejected:e,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},i.prototype.eject=function(r){this.handlers[r]&&(this.handlers[r]=null)},i.prototype.forEach=function(r){t.forEach(this.handlers,(function(e){null!==e&&r(e)}))},r.exports=i},4097:(r,e,n)=>{"use strict";var t=n(1793),i=n(7303);r.exports=function(r,e){return r&&!t(e)?i(r,e):e}},3572:(r,e,n)=>{"use strict";var t=n(4867),i=n(8527),o=n(6502),a=n(5546),s=n(644);function l(r){if(r.cancelToken&&r.cancelToken.throwIfRequested(),r.signal&&r.signal.aborted)throw new s}r.exports=function(r){return l(r),r.headers=r.headers||{},r.data=i.call(r,r.data,r.headers,r.transformRequest),r.headers=t.merge(r.headers.common||{},r.headers[r.method]||{},r.headers),t.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete r.headers[e]})),(r.adapter||a.adapter)(r).then((function(e){return l(r),e.data=i.call(r,e.data,e.headers,r.transformResponse),e}),(function(e){return o(e)||(l(r),e&&e.response&&(e.response.data=i.call(r,e.response.data,e.response.headers,r.transformResponse))),Promise.reject(e)}))}},7185:(r,e,n)=>{"use strict";var t=n(4867);r.exports=function(r,e){e=e||{};var n={};function i(r,e){return t.isPlainObject(r)&&t.isPlainObject(e)?t.merge(r,e):t.isPlainObject(e)?t.merge({},e):t.isArray(e)?e.slice():e}function o(n){return t.isUndefined(e[n])?t.isUndefined(r[n])?void 0:i(void 0,r[n]):i(r[n],e[n])}function a(r){if(!t.isUndefined(e[r]))return i(void 0,e[r])}function s(n){return t.isUndefined(e[n])?t.isUndefined(r[n])?void 0:i(void 0,r[n]):i(void 0,e[n])}function l(n){return n in e?i(r[n],e[n]):n in r?i(void 0,r[n]):void 0}var c={url:a,method:a,data:a,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:l};return t.forEach(Object.keys(r).concat(Object.keys(e)),(function(r){var e=c[r]||o,i=e(r);t.isUndefined(i)&&e!==l||(n[r]=i)})),n}},6026:(r,e,n)=>{"use strict";var t=n(2648);r.exports=function(r,e,n){var i=n.config.validateStatus;n.status&&i&&!i(n.status)?e(new t("Request failed with status code "+n.status,[t.ERR_BAD_REQUEST,t.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):r(n)}},8527:(r,e,n)=>{"use strict";var t=n(4867),i=n(5546);r.exports=function(r,e,n){var o=this||i;return t.forEach(n,(function(n){r=n.call(o,r,e)})),r}},5546:(r,e,n)=>{"use strict";var t=n(4867),i=n(6016),o=n(2648),a=n(7874),s=n(7675),l={"Content-Type":"application/x-www-form-urlencoded"};function c(r,e){!t.isUndefined(r)&&t.isUndefined(r["Content-Type"])&&(r["Content-Type"]=e)}var A,d={transitional:a,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(A=n(5448)),A),transformRequest:[function(r,e){if(i(e,"Accept"),i(e,"Content-Type"),t.isFormData(r)||t.isArrayBuffer(r)||t.isBuffer(r)||t.isStream(r)||t.isFile(r)||t.isBlob(r))return r;if(t.isArrayBufferView(r))return r.buffer;if(t.isURLSearchParams(r))return c(e,"application/x-www-form-urlencoded;charset=utf-8"),r.toString();var n,o=t.isObject(r),a=e&&e["Content-Type"];if((n=t.isFileList(r))||o&&"multipart/form-data"===a){var l=this.env&&this.env.FormData;return s(n?{"files[]":r}:r,l&&new l)}return o||"application/json"===a?(c(e,"application/json"),function(r,e,n){if(t.isString(r))try{return(0,JSON.parse)(r),t.trim(r)}catch(r){if("SyntaxError"!==r.name)throw r}return(0,JSON.stringify)(r)}(r)):r}],transformResponse:[function(r){var e=this.transitional||d.transitional,n=e&&e.silentJSONParsing,i=e&&e.forcedJSONParsing,a=!n&&"json"===this.responseType;if(a||i&&t.isString(r)&&r.length)try{return JSON.parse(r)}catch(r){if(a){if("SyntaxError"===r.name)throw o.from(r,o.ERR_BAD_RESPONSE,this,null,this.response);throw r}}return r}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:n(1623)},validateStatus:function(r){return r>=200&&r<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};t.forEach(["delete","get","head"],(function(r){d.headers[r]={}})),t.forEach(["post","put","patch"],(function(r){d.headers[r]=t.merge(l)})),r.exports=d},7874:r=>{"use strict";r.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},7288:r=>{r.exports={version:"0.27.2"}},1849:r=>{"use strict";r.exports=function(r,e){return function(){for(var n=new Array(arguments.length),t=0;t<n.length;t++)n[t]=arguments[t];return r.apply(e,n)}}},5327:(r,e,n)=>{"use strict";var t=n(4867);function i(r){return encodeURIComponent(r).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}r.exports=function(r,e,n){if(!e)return r;var o;if(n)o=n(e);else if(t.isURLSearchParams(e))o=e.toString();else{var a=[];t.forEach(e,(function(r,e){null!=r&&(t.isArray(r)?e+="[]":r=[r],t.forEach(r,(function(r){t.isDate(r)?r=r.toISOString():t.isObject(r)&&(r=JSON.stringify(r)),a.push(i(e)+"="+i(r))})))})),o=a.join("&")}if(o){var s=r.indexOf("#");-1!==s&&(r=r.slice(0,s)),r+=(-1===r.indexOf("?")?"?":"&")+o}return r}},7303:r=>{"use strict";r.exports=function(r,e){return e?r.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):r}},4372:(r,e,n)=>{"use strict";var t=n(4867);r.exports=t.isStandardBrowserEnv()?{write:function(r,e,n,i,o,a){var s=[];s.push(r+"="+encodeURIComponent(e)),t.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),t.isString(i)&&s.push("path="+i),t.isString(o)&&s.push("domain="+o),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(r){var e=document.cookie.match(new RegExp("(^|;\\s*)("+r+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(r){this.write(r,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:r=>{"use strict";r.exports=function(r){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(r)}},6268:(r,e,n)=>{"use strict";var t=n(4867);r.exports=function(r){return t.isObject(r)&&!0===r.isAxiosError}},7985:(r,e,n)=>{"use strict";var t=n(4867);r.exports=t.isStandardBrowserEnv()?function(){var r,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(r){var t=r;return e&&(n.setAttribute("href",t),t=n.href),n.setAttribute("href",t),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return r=i(window.location.href),function(e){var n=t.isString(e)?i(e):e;return n.protocol===r.protocol&&n.host===r.host}}():function(){return!0}},6016:(r,e,n)=>{"use strict";var t=n(4867);r.exports=function(r,e){t.forEach(r,(function(n,t){t!==e&&t.toUpperCase()===e.toUpperCase()&&(r[e]=n,delete r[t])}))}},1623:r=>{r.exports=null},4109:(r,e,n)=>{"use strict";var t=n(4867),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];r.exports=function(r){var e,n,o,a={};return r?(t.forEach(r.split("\n"),(function(r){if(o=r.indexOf(":"),e=t.trim(r.substr(0,o)).toLowerCase(),n=t.trim(r.substr(o+1)),e){if(a[e]&&i.indexOf(e)>=0)return;a[e]="set-cookie"===e?(a[e]?a[e]:[]).concat([n]):a[e]?a[e]+", "+n:n}})),a):a}},205:r=>{"use strict";r.exports=function(r){var e=/^([-+\w]{1,25})(:?\/\/|:)/.exec(r);return e&&e[1]||""}},8713:r=>{"use strict";r.exports=function(r){return function(e){return r.apply(null,e)}}},7675:(r,e,n)=>{"use strict";var t=n(4867);r.exports=function(r,e){e=e||new FormData;var n=[];function i(r){return null===r?"":t.isDate(r)?r.toISOString():t.isArrayBuffer(r)||t.isTypedArray(r)?"function"==typeof Blob?new Blob([r]):Buffer.from(r):r}return function r(o,a){if(t.isPlainObject(o)||t.isArray(o)){if(-1!==n.indexOf(o))throw Error("Circular reference detected in "+a);n.push(o),t.forEach(o,(function(n,o){if(!t.isUndefined(n)){var s,l=a?a+"."+o:o;if(n&&!a&&"object"==typeof n)if(t.endsWith(o,"{}"))n=JSON.stringify(n);else if(t.endsWith(o,"[]")&&(s=t.toArray(n)))return void s.forEach((function(r){!t.isUndefined(r)&&e.append(l,i(r))}));r(n,l)}})),n.pop()}else e.append(a,i(o))}(r),e}},4875:(r,e,n)=>{"use strict";var t=n(7288).version,i=n(2648),o={};["object","boolean","number","function","string","symbol"].forEach((function(r,e){o[r]=function(n){return typeof n===r||"a"+(e<1?"n ":" ")+r}}));var a={};o.transitional=function(r,e,n){function o(r,e){return"[Axios v"+t+"] Transitional option '"+r+"'"+e+(n?". "+n:"")}return function(n,t,s){if(!1===r)throw new i(o(t," has been removed"+(e?" in "+e:"")),i.ERR_DEPRECATED);return e&&!a[t]&&(a[t]=!0,console.warn(o(t," has been deprecated since v"+e+" and will be removed in the near future"))),!r||r(n,t,s)}},r.exports={assertOptions:function(r,e,n){if("object"!=typeof r)throw new i("options must be an object",i.ERR_BAD_OPTION_VALUE);for(var t=Object.keys(r),o=t.length;o-- >0;){var a=t[o],s=e[a];if(s){var l=r[a],c=void 0===l||s(l,a,r);if(!0!==c)throw new i("option "+a+" must be "+c,i.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new i("Unknown option "+a,i.ERR_BAD_OPTION)}},validators:o}},4867:(r,e,n)=>{"use strict";var t,i=n(1849),o=Object.prototype.toString,a=(t=Object.create(null),function(r){var e=o.call(r);return t[e]||(t[e]=e.slice(8,-1).toLowerCase())});function s(r){return r=r.toLowerCase(),function(e){return a(e)===r}}function l(r){return Array.isArray(r)}function c(r){return void 0===r}var A=s("ArrayBuffer");function d(r){return null!==r&&"object"==typeof r}function u(r){if("object"!==a(r))return!1;var e=Object.getPrototypeOf(r);return null===e||e===Object.prototype}var p=s("Date"),h=s("File"),C=s("Blob"),g=s("FileList");function f(r){return"[object Function]"===o.call(r)}var m=s("URLSearchParams");function _(r,e){if(null!=r)if("object"!=typeof r&&(r=[r]),l(r))for(var n=0,t=r.length;n<t;n++)e.call(null,r[n],n,r);else for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&e.call(null,r[i],i,r)}var w,B=(w="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(r){return w&&r instanceof w});r.exports={isArray:l,isArrayBuffer:A,isBuffer:function(r){return null!==r&&!c(r)&&null!==r.constructor&&!c(r.constructor)&&"function"==typeof r.constructor.isBuffer&&r.constructor.isBuffer(r)},isFormData:function(r){var e="[object FormData]";return r&&("function"==typeof FormData&&r instanceof FormData||o.call(r)===e||f(r.toString)&&r.toString()===e)},isArrayBufferView:function(r){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(r):r&&r.buffer&&A(r.buffer)},isString:function(r){return"string"==typeof r},isNumber:function(r){return"number"==typeof r},isObject:d,isPlainObject:u,isUndefined:c,isDate:p,isFile:h,isBlob:C,isFunction:f,isStream:function(r){return d(r)&&f(r.pipe)},isURLSearchParams:m,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:_,merge:function r(){var e={};function n(n,t){u(e[t])&&u(n)?e[t]=r(e[t],n):u(n)?e[t]=r({},n):l(n)?e[t]=n.slice():e[t]=n}for(var t=0,i=arguments.length;t<i;t++)_(arguments[t],n);return e},extend:function(r,e,n){return _(e,(function(e,t){r[t]=n&&"function"==typeof e?i(e,n):e})),r},trim:function(r){return r.trim?r.trim():r.replace(/^\s+|\s+$/g,"")},stripBOM:function(r){return 65279===r.charCodeAt(0)&&(r=r.slice(1)),r},inherits:function(r,e,n,t){r.prototype=Object.create(e.prototype,t),r.prototype.constructor=r,n&&Object.assign(r.prototype,n)},toFlatObject:function(r,e,n){var t,i,o,a={};e=e||{};do{for(i=(t=Object.getOwnPropertyNames(r)).length;i-- >0;)a[o=t[i]]||(e[o]=r[o],a[o]=!0);r=Object.getPrototypeOf(r)}while(r&&(!n||n(r,e))&&r!==Object.prototype);return e},kindOf:a,kindOfTest:s,endsWith:function(r,e,n){r=String(r),(void 0===n||n>r.length)&&(n=r.length),n-=e.length;var t=r.indexOf(e,n);return-1!==t&&t===n},toArray:function(r){if(!r)return null;var e=r.length;if(c(e))return null;for(var n=new Array(e);e-- >0;)n[e]=r[e];return n},isTypedArray:B,isFileList:g}},7192:(r,e,n)=>{"use strict";n.d(e,{Z:()=>S});var t=n(7537),i=n.n(t),o=n(3645),a=n.n(o),s=n(1667),l=n.n(s),c=new URL(n(1201),n.b),A=new URL(n(5391),n.b),d=new URL(n(6333),n.b),u=new URL(n(9862),n.b),p=new URL(n(4281),n.b),h=new URL(n(1537),n.b),C=new URL(n(6241),n.b),g=new URL(n(3427),n.b),f=new URL(n(6126),n.b),m=a()(i());m.push([r.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto+Flex:opsz,wght@8..144,300;8..144,400&display=swap);"]);var _=l()(c),w=l()(A),B=l()(d),b=l()(u),v=l()(p),x=l()(h),y=l()(C),k=l()(g),E=l()(f);m.push([r.id,'*{padding:0;margin:0;border:0}*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}:focus,:active{outline:none}a:focus,a:active{outline:none}nav,footer,header,aside{display:block}html,body{height:100%;width:100%;font-size:100%;line-height:1;font-size:14px;-ms-text-size-adjust:100%;-moz-text-size-adjust:100%;-webkit-text-size-adjust:100%}input,button,textarea{font-family:inherit}input::-ms-clear{display:none}button{cursor:pointer}button::-moz-focus-inner{padding:0;border:0}a,a:visited{text-decoration:none}a:hover{text-decoration:none}ul li{list-style:none}img{vertical-align:top}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}.menu{display:grid;grid-auto-flow:column;justify-items:center;grid-column:3/4}.menu__item{display:flex;align-items:center}.menu__item-link{text-decoration:none;text-transform:uppercase;padding:0px 10px;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#ddd;line-height:5rem}.menu__item-link:hover{background-color:#517aff}.menu__item-link.selected{background-color:#517aff}.menu__item-link.selected:hover{background-color:#95a8e7}.scope-card{padding:30px 20px;display:flex;flex-direction:column;align-items:center;height:100%;width:100%;gap:20px;border:1px solid silver;border-radius:5px;box-shadow:1px 1px 5px #222c4b}.scope-card__img{width:100px;height:100px}.scope-card__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.01em;color:#ddd;line-height:3.5rem;text-align:center}.scope-card__text{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:2rem;letter-spacing:.01em;color:#ddd;line-height:2.5rem;text-align:justify}.member-card{height:100%;border:1px solid #a3a3a3;border-radius:5px;display:flex;flex-direction:column;align-items:center;gap:10px;padding:30px 20px;box-shadow:1px 1px 5px #222c4b}.member-card__photo{width:150px;height:150px}.member-card__role{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.5rem}.member-card__name{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.member-card__contribution{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.7rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem;flex:1 1 auto;text-align:justify}.member-card__github{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.member-card__github-img{width:30px;height:30px}.member-card__github-nickname{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.section-title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:5rem;letter-spacing:.01em;color:#3a56b1;line-height:5rem}.word{display:grid;width:100%;height:100%;grid-template:100px auto auto/1fr;border-radius:20px;padding:20px 10px;transition:.1s all}.word:hover{transform:translateY(2px);transition:.1s all;box-shadow:1px 1px 3px #222c4b}.word.hard-word{background-color:#fa9c21}.word.known-word{background-color:#187a0f}.word.known-word .word__word,.word.known-word .word__example,.word.known-word .word__mean{color:#000}.word.known-word .word__transcription,.word.known-word .word__translation,.word.known-word .word__example-transl,.word.known-word .word__mean-transl{color:#494949}.word__wrap{grid-column:1/2;grid-row:1/2;padding:5px;display:grid;grid-template:40px 40px/1fr 30px}.word__word-full{grid-column:1/2;grid-row:1/2}.word__word{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.word__transcription{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.word__play{grid-column:2/3;grid-row:1/2;width:30px;height:30px}.word__translation{grid-column:1/3;grid-row:2/3;font-family:"Philosopher";font-style:normal;font-weight:400;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.word__image-wrap{grid-column:1/2;grid-row:2/3}.word__image-wrap img{width:100%;height:100%;object-fit:contain}.word__examples{grid-column:1/2;grid-row:3/4;display:grid;grid-template:repeat(4, auto)/1fr 50px;padding:5px}.word__example{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#3a56b1;line-height:2rem;grid-column:1/2;grid-row:1/2}.word__example-play{width:30px;height:30px;grid-column:2/3;grid-row:1/2;align-self:center;justify-self:center}.word__example-transl{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#777;line-height:2rem;grid-column:1/3;grid-row:3/4}.word__mean{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#3a56b1;line-height:2rem;grid-column:1/2;grid-row:4/5}.word__mean-transl{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#777;line-height:2rem;grid-column:1/3;grid-row:5/6}.word__mean-play{width:30px;height:30px;grid-column:2/3;grid-row:4/5;align-self:center;justify-self:center}.play-btn{transition:.1s all}.play-btn:hover{transform:scale(1.2);transition:.1s all}.pagination{width:450px;display:grid;grid-column:2/3;grid-row:1/2;grid-template:50px/repeat(9, 50px);gap:2px;justify-self:center;padding:30px 0px}.pagination__link{margin:auto;display:flex;align-items:center;justify-content:center;width:40px;height:40px;border:1px solid #a8a8a8;border-radius:7px;transition:.2s all;font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.pagination__link:hover{box-shadow:2px 2px 5px #222c4b;transform:translateY(1px);transition:.1s all}.pagination__link.selected{background-color:#fdba63;font-weight:600}.word{display:grid;width:100%;height:100%;grid-template:100px auto auto/1fr;border-radius:20px;padding:20px 10px;transition:.1s all}.word:hover{transform:translateY(2px);transition:.1s all;box-shadow:1px 1px 3px #222c4b}.word.hard-word{background-color:#fa9c21}.word.known-word{background-color:#187a0f}.word.known-word .word__word,.word.known-word .word__example,.word.known-word .word__mean{color:#000}.word.known-word .word__transcription,.word.known-word .word__translation,.word.known-word .word__example-transl,.word.known-word .word__mean-transl{color:#494949}.word__wrap{grid-column:1/2;grid-row:1/2;padding:5px;display:grid;grid-template:40px 40px/1fr 30px}.word__word-full{grid-column:1/2;grid-row:1/2}.word__word{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.word__transcription{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.word__play{grid-column:2/3;grid-row:1/2;width:30px;height:30px}.word__translation{grid-column:1/3;grid-row:2/3;font-family:"Philosopher";font-style:normal;font-weight:400;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.word__image-wrap{grid-column:1/2;grid-row:2/3}.word__image-wrap img{width:100%;height:100%;object-fit:contain}.word__examples{grid-column:1/2;grid-row:3/4;display:grid;grid-template:repeat(4, auto)/1fr 50px;padding:5px}.word__example{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#3a56b1;line-height:2rem;grid-column:1/2;grid-row:1/2}.word__example-play{width:30px;height:30px;grid-column:2/3;grid-row:1/2;align-self:center;justify-self:center}.word__example-transl{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#777;line-height:2rem;grid-column:1/3;grid-row:3/4}.word__mean{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#3a56b1;line-height:2rem;grid-column:1/2;grid-row:4/5}.word__mean-transl{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5em;letter-spacing:.01em;color:#777;line-height:2rem;grid-column:1/3;grid-row:5/6}.word__mean-play{width:30px;height:30px;grid-column:2/3;grid-row:4/5;align-self:center;justify-self:center}.play-btn{transition:.1s all}.play-btn:hover{transform:scale(1.2);transition:.1s all}.modal{background-color:#f0f0f0}.modal .modal__form{background-color:#f0f0f0}.game-panel{width:100%;justify-self:center;align-items:center;display:grid;grid-template:150px/repeat(4, 1fr);border-radius:20px;gap:10px}.game-panel__link{width:150px;height:50px;background-color:#3a4b83;color:#ddd;display:flex;justify-content:center;align-items:center;border-radius:5px;box-shadow:3px 3px 7px #222c4b;transition:.2s all}.game-panel__link:hover{transform:translateY(2px);transition:.2s all}.game-panel :nth-child(1){grid-column:2/3;margin:auto}.game-panel :nth-child(2){grid-column:3/4;margin:auto}.popup{position:fixed;width:100%;height:100%;background-color:rgba(0,0,0,.5019607843);top:0;left:0;display:flex;justify-content:center;align-items:center;overflow-y:auto;overflow-x:hidden;z-index:20}.popup[id=message]{opacity:0;visibility:hidden;transition:all .8s ease 0s}.popup[id=message] .popup__content{max-width:800px;width:80%}@media(max-width: 950px){.popup[id=message] .popup__content{width:100%}}@media(max-width: 750px){.popup[id=message] h2{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}}@media(max-width: 600px){.popup[id=message] h2{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1rem;letter-spacing:.01em;color:#3a56b1;line-height:1.1rem}}.popup[id=game-stat]{opacity:0;visibility:hidden;transition:all .8s ease 0s}.popup[id=game-stat] .popup__content{width:60%;height:600px;padding:20px}.popup__message{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem;text-align:justify}.popup.open{opacity:1;visibility:visible}.popup__content{display:flex;flex-direction:column;align-items:center;gap:30px;width:100%;background-color:#f0f0f0;color:#3a56b1;padding:30px;border:3px solid #3a4b83;border-radius:20px;box-shadow:5px 5px 15px rgba(7,58,224,.5019607843);position:relative;visibility:hidden;opacity:0;transform:perspective(600px) translate(0px, -100%) rotateX(45deg);transition:all .8s ease 0s}.popup.open .popup__content{transform:perspective(600px) translate(0px, 0%) rotateX(0deg);visibility:visible;opacity:1;transition:all .8s ease 0s}.popup__area{position:absolute;width:100%;height:100%;top:0;left:0}.popup__body{min-height:100%;width:50%;display:flex;align-items:center;justify-content:center;padding:30px 10px}.popup__close{position:absolute;right:-40px;top:-40px}.popup__close img{width:48px;height:48px;transition:all .5s linear;background-color:#f0f0f0;border-radius:50%;border:3px solid #3a4b83}@media(max-width: 545px){.popup__close img{width:32px;height:32px;transition:all .2s linear}}.popup__close:hover img{transform:scale(1.2);transition:all .5s linear}.popup__close-btn{width:40%;height:4rem;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2.5rem;letter-spacing:.01em;color:#ddd;line-height:3.2rem;background-color:#3a4b83;border-radius:5px;box-shadow:2px 2px 5px #3a4b83;transition:all .1s linear}.popup__close-btn:hover{color:#fff}.popup__close-btn:active{transform:translateY(2px);transition:all .2s linear}.popup__title{margin:0 0 20px 0}.popup__title .popup__title-text{text-align:center;transition:all .2s linear;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2.5rem;letter-spacing:.01em;color:#3a56b1;line-height:3.2rem}@media(max-width: 545px){.popup__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem;transition:.2s linear}}@media(max-width: 445px){.popup__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1rem;letter-spacing:.01em;color:#3a56b1;line-height:1.2rem;transition:.2s linear}}.answer{display:flex;position:relative;justify-content:center;align-items:center;height:45px;border-radius:10px;box-shadow:2px 2px 5px #3a4b83;align-items:center;padding:0px 50px;width:100%;gap:10px;transition:.2s all;background-color:#f0f0f0}.answer__ok,.answer__fault{display:none;position:absolute;top:8px;left:10px;filter:drop-shadow(0 0 3px #3a4b83)}.answer__ok.visible,.answer__fault.visible{display:block}.answer:hover{box-shadow:3px 3px 7px #3a4b83;transition:.2s all}.answer:active{transition:.2s all;transform:translateY(3px)}.answer.active{transition:.2s all;transform:translateY(3px)}.answer.ok{background-color:#3bac3b}.answer.ok .answer__ok{display:block}.answer.fault{background-color:#c33}.answer.fault .answer__fault{display:block}.answer.hide-help .answer__help{display:none}.answer__text{grid-column:1/3;grid-row:1/2;justify-self:center;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#3a56b1;line-height:1rem}.answer__help{display:flex;width:30px;height:30px;position:absolute;top:8px;left:10px;align-items:center;justify-content:center;border-radius:50%;border:1px solid #3a4b83}.game-stat{max-height:100%;display:grid;grid-template:100px 1fr 50px 80px/1fr;gap:10px}.game-stat__about{grid-column:1/2;grid-row:1/2}.game-stat__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.06em;color:#3a56b1;line-height:4rem;text-align:center}.game-stat__result,.game-stat__result-val,.game-stat__serie,.game-stat__serie-val{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#3a56b1;line-height:3rem;text-align:center}.game-stat__container{padding:10px 0px;grid-column:1/2;grid-row:2/3;overflow:hidden;height:100%}.game-stat__slider{display:flex;width:200%;height:100%;padding:20px 0px;transition:1s all ease}.game-stat__slider.shift{transform:translateX(-50%);transition:1s all ease}.game-stat__item{width:100%;height:100%;display:flex;flex-direction:column;gap:15px;overflow:scroll}.game-stat #game-stat-common{display:grid;align-items:center;justify-items:center}.game-stat__percent{display:flex;align-items:center;justify-content:center;width:150px;height:150px;border:3px solid #3a4b83;border-radius:50%;box-shadow:2px 2px 5px #3a4b83;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem}.game-stat__el{display:flex;align-items:center;gap:10px;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.game-stat__el-play{width:100%;height:100%;display:flex;align-items:center;justify-content:flex-start;transition:.2s all ease;gap:10px}.game-stat__el-play:hover img{transform:scale(1.2);transition:.2s all ease}.game-stat__el-word{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.game-stat__pagination{grid-column:1/2;grid-row:3/4;display:flex;gap:20px;justify-content:center}.game-stat__pag-btn{width:20px;height:20px;background-color:#3a4b83;border-radius:50%;border:3px solid #3a4b83;box-shadow:1px 1px 3px #3a4b83;transition:.2s all ease}.game-stat__pag-btn:hover{background-color:#f0f0f0;transition:.2s all ease}.game-stat__pag-btn#game-stat-left,.game-stat__pag-btn#game-stat-right{background-color:#f0f0f0}.game-stat__pag-btn#game-stat-left.active-page,.game-stat__pag-btn#game-stat-right.active-page{background-color:#3a4b83}.game-stat__action{grid-column:1/2;grid-row:4/5;display:flex;justify-content:center;gap:10px}.game-stat__restart,.game-stat__game-select{width:40%}.game-stat__errors-words,.game-stat__rights-words{display:flex;flex-direction:column;padding:20px 10px}.stat-header{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.stat-separator{width:100%;height:3px;border:1px solid #3a4b83}.stat-separator.hide{display:none}.hide{display:none}.button{height:4rem;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2.5rem;letter-spacing:.01em;color:#ddd;line-height:3.2rem;background-color:#3a4b83;border-radius:5px;box-shadow:2px 2px 5px #3a4b83;transition:all .1s linear;justify-self:center;padding:0px 20px}.button:hover{color:#fff}.button:active{transform:translateY(2px);transition:all .2s linear}.regbtn{width:fit-content;padding:0 1rem;height:70px;background-color:#f0f0f0;border-radius:5px;box-shadow:3px 3px 7px #222c4b;transition:.2s all ease;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.01em;color:#3a56b1;line-height:4rem}.regbtn:hover{transform:translateY(2px);transition:.2s all ease}.timer{width:200px;height:200px;border-radius:50%;background-color:#f0f0f0;display:flex;justify-content:center;align-items:center;overflow:hidden;position:relative}.timer::before{content:"";position:absolute;top:0;left:0;width:50%;height:100%;z-index:3;background-color:#f0f0f0}.timer::after{content:"";position:absolute;top:0;right:0;width:50%;height:100%;z-index:3;background-color:#526cc4;visibility:hidden}.timer.start::before{animation:mask-left 30s steps(1, end) forwards}.timer.start::after{animation:mask-right 30s steps(1, end) forwards}.timer.start .timer__line{animation:line 30s linear forwards}.timer.start .timer__counter{animation:counter 30s steps(29, end) forwards}.timer__line{position:absolute;top:0;left:0;width:100%;height:100%;z-index:2}.timer__line::after{content:"";position:absolute;top:0;left:0;width:50%;height:100%;background-color:#526cc4}.timer__body{width:100px;height:100px;border-radius:50%;background-color:#3a4b83;text-align:center;overflow:hidden;z-index:4}.timer__counter span{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:50px;letter-spacing:.01em;color:#ddd;line-height:50px;display:flex;justify-content:center;align-items:center;height:100px}@keyframes counter{100%{transform:translate(0px, -2900px)}}@keyframes line{100%{transform:rotate(360deg)}}@keyframes mask-left{0%{visibility:visible}50%,100%{visibility:hidden}}@keyframes mask-right{0%{visibility:hidden}50%,100%{visibility:visible}}.game-stat-el{display:flex;flex-direction:column;justify-content:flex-start;padding:10px;border-radius:20px;box-shadow:2px 2px 5px #3a4b83;gap:5px;width:400px;position:relative;overflow:hidden;padding:20px 5px}.game-stat-el__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.01em;color:#3a56b1;line-height:3rem;padding:0px 17px}.game-stat-el__item{display:flex;align-items:center;gap:10px;padding:5px}.game-stat-el__item-text{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.game-stat-el__item-text span{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.game-stat-el__decor{position:absolute;right:-54%;bottom:-67%;width:400px;height:400px;border-radius:50%;background-color:rgba(58,75,131,.5019607843)}.handbook__title{height:fit-content;width:fit-content;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#c2c2c2;line-height:2rem;cursor:pointer;transition:.3s ease-in-out}.handbook__complicated-words-title{height:fit-content;width:fit-content;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#c2c2c2;line-height:2rem;cursor:pointer;border-left:5px solid #c2c2c2;padding-left:8px}.handbook__words-title{grid-area:words-title;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.handbook__card-subtitle{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1rem;letter-spacing:.01em;color:#3a56b1;line-height:1rem}.handbook__games-title{grid-area:games-title;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.handbook__game-title{width:100%;height:100%;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.8rem;letter-spacing:.01em;color:#3a56b1;line-height:1.8rem;text-align:center;line-height:150px;backdrop-filter:blur(4px);background-color:rgba(240,240,240,.8);border-radius:10px}.word-card-info__meaning-title,.word-card-info__example-title{font-weight:600;margin-bottom:5px}.word-card-info__statistic{display:flex;gap:20px}.sprint-statistic__title,.audio-call-statistic__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.2rem;letter-spacing:.01em;color:#3a56b1;line-height:1.2rem;margin-bottom:5px}.handbook__levels{display:flex;width:fit-content;height:fit-content;gap:10px}.handbook__level-card{display:flex;justify-content:center;align-items:center;width:50px;height:50px;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:1.5rem;border-radius:10px;background-color:#f0f0f0;cursor:pointer;transition:.3s ease-in-out}.handbook__games{display:grid;grid-area:games;grid-template-areas:"games-title ." "audio-call sprint";gap:10px}.handbook__audio-call{grid-area:audio-call;height:150px;cursor:pointer;background:20%/cover #f0f0f0 no-repeat url('+_+");border-radius:10px}.handbook__sprint{grid-area:sprint;height:150px;cursor:pointer;background:center/cover #f0f0f0 no-repeat url("+w+');border-radius:10px}.handbook__words{position:relative;display:grid;grid-area:words;grid-template-areas:"words-title words-title" "word-cards word-card-info" "words-pagination words-pagination";grid-auto-columns:3fr .5fr;gap:20px}.handbook__word-cards{display:grid;grid-template-columns:repeat(4, minmax(150px, 1fr));gap:10px;grid-area:word-cards;grid-auto-rows:100px;font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.2rem;letter-spacing:.01em;color:#3a56b1;line-height:1.2rem}.handbook__word-card{position:relative;display:flex;flex-direction:column;justify-content:center;align-items:center;cursor:pointer;width:100%;height:100px;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:1.5rem;border-radius:10px;background-color:#f0f0f0;text-align:center;flex-wrap:wrap;transition:.3s ease-in-out}.word-card-info{position:relative;display:flex;grid-area:word-card-info;justify-self:center;flex-direction:column;width:fit-content;min-height:540px;padding:15px;gap:10px;background-color:#f0f0f0;border-radius:10px;font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1.2rem;letter-spacing:.01em;color:#3a56b1;line-height:1.2rem}.word-card-info__headings{position:absolute;top:5%;right:15px;padding:5px;font-weight:600;color:#3a56b1;transition:.3s ease-in-out}.word-card-info__img{border-radius:10px;width:400px;height:250px}.word-card-info__complicated-words-button,.word-card-info__learned-words-button,.word-card-info__remove-button{width:190px;height:30px;text-align:center;border-radius:15px;font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1rem;letter-spacing:.01em;color:#3a56b1;line-height:1rem;box-shadow:0 0 2px #898989;transition:.3s ease-in-out}.word-card-info__buttons{display:flex;justify-content:space-between}.word-card-info__play-audio-button{position:absolute;top:215px;left:24px;width:40px;height:40px;border-radius:50%;background:center/contain no-repeat url('+B+");box-shadow:0 0 2px #898989;transition:.3s ease-in-out}.words-pagination{grid-area:words-pagination;display:flex;justify-content:center;gap:10px}.words-pagination__next-button,.words-pagination__prev-button,.words-pagination__curr-page{width:40px;height:40px;border-radius:50%;box-shadow:0 0 2px #898989;transition:.3s ease-in-out}.words-pagination__next-button{background:center/20% #fff no-repeat url("+b+")}.words-pagination__prev-button{background:center/20% #fff no-repeat url("+v+')}.words-pagination__curr-page{position:relative;display:flex;justify-content:center;align-items:center;font-family:"Philosopher";font-style:normal;font-weight:400;font-size:1rem;letter-spacing:.01em;color:#3a56b1;line-height:1rem}.words-pagination__next-button:disabled,.words-pagination__prev-button:disabled{box-shadow:none;pointer-events:none;background-color:#f5f5f5}.words-pagination__next-button:disabled{background:center/20% #fff no-repeat url('+x+")}.words-pagination__prev-button:disabled{background:center/20% #fff no-repeat url("+y+')}.wrapper{min-height:100%;width:100%;display:grid;grid-template:[start] "header" minmax(100px, auto) [row2] [row2] "content" 1fr [row3] [row3] "footer" minmax(100px, auto) [row-end]/1fr}.wrapper.hide-footer{grid-template:[start] "header" minmax(100px, auto) [row2] [row2] "content" 1fr [row-end]/1fr}.content{grid-area:content;display:grid;grid-template:1fr/1fr}.choice-panel{display:grid;justify-self:center;align-items:center;grid-column:1/3;grid-row:1/2;grid-template:1fr/1fr 90% 1fr;width:100%}.choice{display:grid;grid-column:2/3;grid-template:10rem auto 5rem/repeat(3, 1fr)}@media(max-width: 1300px){.choice{grid-template:10rem repeat(3, auto) 5rem/1fr 1fr 1fr}}.choice__wrap{justify-self:center}.choice__wrap.audio{grid-column:1/2;grid-row:2/3}@media(max-width: 1300px){.choice__wrap.audio{grid-column:2/3;grid-row:2/3}}.choice__wrap.sprint{grid-column:3/4;grid-row:2/3}@media(max-width: 1300px){.choice__wrap.sprint{grid-column:2/3;grid-row:4/5}}.choice__levels{justify-self:center;grid-column:2/3;grid-row:2/3}@media(max-width: 1300px){.choice__levels{grid-column:2/3;grid-row:3/4}}.choice__title{grid-column:1/4;grid-row:1/2;align-self:center;justify-self:center;padding:2rem}.choice__hint{grid-column:1/4;grid-row:3/4;align-self:center;justify-self:center}@media(max-width: 1300px){.choice__hint{grid-row:5/6}}.game{display:grid;justify-self:center;align-items:center;grid-column:1/3;grid-row:1/2;grid-template:auto 1fr 20%/1fr 90% 1fr;width:100%;padding-top:30px;max-height:70vh}.game__about{grid-column:2/3;grid-row:1/2;display:grid;grid-template:1fr 2fr/repeat(2, 1fr)}.game__help{grid-column:2/3;grid-row:2/3;justify-self:center;display:grid;grid-template:repeat(5, 1fr)/1fr}.game__help :nth-child(1){grid-column:1/3;grid-row:1/2}.game__help :nth-child(2){grid-column:1/3;grid-row:2/3}.game__help :nth-child(3){grid-column:1/3;grid-row:3/4}.game__help :nth-child(4){grid-column:1/3;grid-row:4/5}.game__help :nth-child(5){grid-column:1/3;grid-row:5/6}.game__help-item{align-self:center;justify-self:center}.game__help.sprint__help{grid-template:repeat(2, 1fr)/1fr}.game__start{grid-column:2/3;grid-row:3/4;display:grid}.game__title{grid-column:2/3;grid-row:1/2}.game__desc{grid-column:2/3;grid-row:2/3}.game__icon{grid-column:1/2;grid-row:1/3;justify-self:right}.game__audio{display:grid;grid-column:2/3;grid-row:1/2;justify-items:center;align-items:center}.game__answers{grid-column:2/3;grid-row:2/3;justify-items:center;align-items:center;display:grid;grid-template:1fr/1fr repeat(5, auto) 1fr;gap:10px}.game__answers :nth-child(1){grid-column:2/3}.game__answers :nth-child(2){grid-column:3/4}.game__answers :nth-child(3){grid-column:4/5}.game__answers :nth-child(4){grid-column:5/6}.game__answers :nth-child(5){grid-column:6/7}@media(max-width: 1300px){.game__answers{grid-template:repeat(5, 1fr)/1fr auto 1fr}.game__answers :nth-child(1){grid-column:2/3;grid-row:1/2}.game__answers :nth-child(2){grid-column:2/3;grid-row:2/3}.game__answers :nth-child(3){grid-column:2/3;grid-row:3/4}.game__answers :nth-child(4){grid-column:2/3;grid-row:4/5}.game__answers :nth-child(5){grid-column:2/3;grid-row:5/6}}.game__skip{display:grid;grid-column:2/3;grid-row:3/4;justify-items:center;align-items:center}.game__timer-wrap{display:grid;grid-column:2/3;grid-row:1/2;justify-items:center;align-items:center}.game__questions{display:grid;grid-column:2/3;grid-row:2/3;grid-template:1fr 1fr 1fr/1fr;justify-items:center;align-items:center}.game__answer-btns{display:grid;grid-column:2/3;grid-row:3/4;justify-items:center;align-items:center;gap:20px;padding:50px;grid-template:1fr/1fr 300px 300px 1fr}.game__answer-btns :nth-child(1){grid-column:2/3}.game__answer-btns :nth-child(2){grid-column:3/4}.statistics{display:grid;grid-template:auto auto 1fr/1fr 90% 1fr;gap:30px}.statistics__today{grid-column:2/3;grid-row:1/2;display:grid;grid-template:100px auto/1fr 1fr 1fr}.statistics__today :nth-child(2){grid-column:1/2;grid-row:2/3;justify-self:center}.statistics__today :nth-child(3){grid-column:2/3;grid-row:2/3;justify-self:center}.statistics__today :nth-child(4){grid-column:3/4;grid-row:2/3;justify-self:center}.statistics__today.hide-learnt{grid-template:100px auto/1fr 1fr}.statistics__today.hide-learnt :nth-child(4){display:none}.statistics__title{grid-column:1/4;grid-row:1/2}.statistics__games{grid-column:2/3;grid-row:2/3;display:flex;gap:10px;justify-content:center}.statistics__total{grid-column:2/3;grid-row:3/4;display:flex;flex-direction:column;align-items:center;gap:20px;padding:20px 0px}.header{grid-area:header;background-color:#3a4b83;display:grid;align-items:center;grid-template:1fr/1fr 20% 70% 1fr}.header__logo-img{width:70px;height:70px;padding:5px}.header__logo{display:grid;grid-template:1fr/60px 1fr;align-items:center;grid-column:2/3;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#ddd;line-height:1rem;gap:10px}.about{padding:50px 10px;align-items:center;grid-column:2/3;grid-row:1/2;display:grid;grid-template:1fr 3fr/1fr 54% 36% 1fr;background-color:#f0f0f0;gap:10px}.about__title{grid-column:2/3;grid-row:1/2}.about__text{grid-column:2/3;grid-row:2/3;text-align:justify;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.01em;color:#3a56b1;line-height:4rem}.about__image-wrap{grid-column:3/4;grid-row:1/3;width:100%;height:100%;background-repeat:no-repeat;background-size:cover}.about__image{width:100%;height:100%;object-fit:contain}.scope{padding:70px 10px;grid-column:2/3;grid-row:2/3;display:grid;align-items:center;grid-template:repeat(4, auto)/1fr repeat(2, calc((90% - 30px) * 0.5)) 1fr;background-color:#3a4b83;gap:30px}.scope__title{grid-column:2/4;grid-row:1/2;justify-self:center;color:#ddd}.scope__text{text-align:justify;grid-column:2/4;grid-row:2/3;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.01em;color:#ddd;line-height:4rem}.scope :nth-child(3){grid-column:2/3;grid-row:3/4}.scope :nth-child(4){grid-column:3/4;grid-row:3/4}.scope :nth-child(5){grid-column:2/3;grid-row:4/5}.scope :nth-child(6){grid-column:3/4;grid-row:4/5}.team{padding:70px 10px;grid-column:2/3;grid-row:3/4;display:grid;align-items:center;grid-template:5rem auto auto/1fr repeat(2, calc((90% - 30px) * 0.5)) 1fr;background-color:#f0f0f0;gap:30px}.team__title{grid-column:2/4;grid-row:1/2;justify-self:center}.team :nth-child(2){grid-column:2/3;grid-row:2/3}.team :nth-child(3){grid-column:3/4;grid-row:2/3}.team :nth-child(4){grid-column:2/3;grid-row:3/4}.team :nth-child(5){grid-column:3/4;grid-row:3/4}.footer{grid-area:footer;display:grid;align-items:center;grid-template:1fr/1fr minmax(auto, 360px) minmax(auto, 360px) minmax(auto, 360px) minmax(auto, 360px) 1fr;background-color:#3a4b83}.footer.hidden{display:none}.footer__githublink{grid-column:2/3;justify-self:center;width:70px;height:70px}.footer__links{grid-column:3/4;display:flex;align-items:center;justify-content:space-between;padding:10px;gap:10px;transition:all .5s}.footer__links-item{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#ddd;line-height:1rem}.footer__links-item:hover{color:#fff;transition:all .5s}.footer__copyrights{grid-column:4/5;justify-self:center;font-size:14px;color:#4d4d4d;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#ddd;line-height:1rem;transition:all .5s}.footer__rsschoollink{grid-column:5/6;justify-self:center;width:150px;height:50px;transition:all 1s;background-repeat:no-repeat}.choice{gap:5px}.choice__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:5rem;letter-spacing:.06em;color:#3a56b1;line-height:6rem;padding:10px 0px}.choice__hint{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.06em;color:#3a56b1;line-height:4rem;padding:10px 0px}.choice__wrap{display:grid;grid-template:3rem 1fr/70% 30%;width:400px;height:220px;border-radius:10px;overflow:hidden;padding:10px;gap:5px}.choice__wrap.audio{background-color:#dd9434}.choice__wrap.sprint{background-color:#3e59b3}.choice__name{grid-column:1/3;grid-row:1/2;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#ddd;line-height:1rem;align-self:center;justify-self:center}.choice__img{grid-column:1/2;grid-row:2/3;width:100%;height:100%;border-radius:10px}.choice__btn{grid-column:2/3;grid-row:1/3;width:70px;height:70px;align-self:center;justify-self:center;border-radius:10px;box-shadow:2px 2px 5px #3a4b83;transition:.1s all ease}.choice__btn:hover{transform:translateY(3px);transition:.1s all ease}.choice__levels{width:400px;height:200px;display:grid;grid-template:repeat(2, 1fr)/repeat(3, 1fr);gap:10px}.choice__levels :nth-child(1){grid-column:1/2;grid-row:1/2;background-color:#a1e4c8}.choice__levels :nth-child(1):hover{background-color:rgba(161,228,200,.5019607843)}.choice__levels :nth-child(2){grid-column:1/2;grid-row:2/3;background-color:#1d9b55}.choice__levels :nth-child(2):hover{background-color:rgba(161,228,200,.5019607843)}.choice__levels :nth-child(3){grid-column:2/3;grid-row:1/2;background-color:#e4dea8}.choice__levels :nth-child(3):hover{background-color:rgba(228,222,168,.5019607843)}.choice__levels :nth-child(4){grid-column:2/3;grid-row:2/3;background-color:#d1c02b}.choice__levels :nth-child(4):hover{background-color:rgba(209,192,43,.5019607843)}.choice__levels :nth-child(5){grid-column:3/4;grid-row:1/2;background-color:#ce9d9d}.choice__levels :nth-child(5):hover{background-color:rgba(206,157,157,.5019607843)}.choice__levels :nth-child(6){grid-column:3/4;grid-row:2/3;background-color:#c92323}.choice__levels :nth-child(6):hover{background-color:rgba(201,35,35,.5019607843)}.choice__level{display:flex;align-items:center;justify-content:center;border-radius:10px;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#3a56b1;line-height:1rem;transition:.2s all ease;user-select:none}.choice__level:hover{transition:.2s all ease;color:#fff}.choice__level:active{transform:translateY(5px);transition:.2s all ease}.choice__level.selected{border:10px solid #ff9100;color:#fff}.game{gap:20px}.game__title{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:5rem;letter-spacing:.01em;color:#3a56b1;line-height:5.2rem;padding:20px}.game__desc{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:3rem;letter-spacing:.01em;color:#3a56b1;line-height:3.2rem;padding:20px}.game__icon{width:100%;height:auto}.game__help{border:3px solid #3a4b83;box-shadow:2px 2px 5px #3a4b83;border:3px solid #3a4b83;box-shadow:2px 2px 5px #3a4b83;width:auto;border-radius:15px;padding:30px}.game__help-item{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:1.5rem;letter-spacing:.01em;color:#3a56b1;line-height:2rem}.game__start{padding:20px}.game__audio-btn{width:200px;height:200px;box-shadow:2px 2px 5px #3a4b83;border-radius:50%;align-self:center;overflow:hidden}.game__audio-btn .game__audio-question,.game__audio-btn .game__audio-answer{width:100%;height:100%;object-fit:cover}.game__audio-btn .game__audio-answer{display:none}.game__audio-btn.answer .game__audio-answer{display:block}.game__audio-btn.answer .game__audio-question{display:none}.game__audio-btn:hover{box-shadow:3px 3px 7px #3a4b83;transition:.2s all}.game__word-img{width:150px;height:150px;border-radius:50%}.game__word-img .game__answer-img{display:none}.game__word-img.answer-ok .game__answer-img{display:block}.game__word-img.answer-ok .game__question-img{display:none}.game__answer-img,.game__question-img{width:100%;height:100%;object-fit:cover}.game__word,.game__word-translate{padding:1rem;font-family:"Philosopher";font-style:normal;font-weight:600;font-size:2rem;letter-spacing:.06em;color:#3a56b1;line-height:1rem}.game__test-field{position:absolute;width:150px;height:50px;border:1px solid #000;font-size:20px;left:50%;top:30%}.active{transition:.2s all;transform:translateY(3px)}.modal{position:absolute;z-index:10;top:0;right:0;display:flex;flex-direction:column;align-content:center;justify-content:flex-start;padding:3rem;min-width:40vw;height:100vh}.modal .modal__title{margin-bottom:2rem}.modal .modal__form{display:flex;flex-direction:column;gap:1rem;margin-bottom:2rem}.modal .modal__form .registration__regbtn{width:fit-content;padding:0 1rem;margin-top:2rem}.modal .modal__form .form-input{line-height:2rem}.modal_hidden,.btn_hidden{display:none}.wrapper{position:relative}.blackout{width:100vw;height:100vh;position:absolute;top:0;z-index:5;background-color:rgba(0,0,0,.3)}.overflow-hidden{overflow:hidden}.blackout_hidden{display:none}.body{position:relative}.body_hidden{display:none}.statistics{padding:50px 0px;position:relative;overflow:hidden}.statistics__title{text-align:center}.statistics__today-item{display:flex;flex-direction:column;align-items:center;padding:20px;width:200px}.statistics__value{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:7rem;letter-spacing:.01em;color:#3a56b1;line-height:7.5rem}.statistics__hint{font-family:"Philosopher";font-style:normal;font-weight:400;font-size:2rem;letter-spacing:.01em;color:#3a56b1;line-height:2.2rem;text-align:center}.statistics__total-title{text-align:center}.statistics__total-desc{font-family:"Philosopher";font-style:normal;font-weight:600;font-size:3rem;letter-spacing:.01em;color:#3a56b1;line-height:4rem;text-align:center}.statistics__total-graph-wrap{width:80%;height:500px;background-color:#3a4b83}.handbook{display:flex;flex-direction:column;margin:40px 20px;gap:20px}.handbook__views{display:flex;gap:10px}.active-handbook-page{color:#3a56b1}.handbook__levels .active-level-card:nth-child(1),.A1 .active-word-card,.A1 .word-card-info__complicated-words-button,.A1 .word-card-info__play-audio-button,.A1 .word-card-info__headings,.A1 .word-card-info__learned-words-button,.A1 .words-pagination__curr-page{background-color:#a1e4c8}.handbook__levels .active-level-card:nth-child(2),.A2 .active-word-card,.A2 .word-card-info__complicated-words-button,.A2 .word-card-info__play-audio-button,.A2 .word-card-info__headings,.A2 .word-card-info__learned-words-button,.A2 .words-pagination__curr-page{background-color:#acffbb}.handbook__levels .active-level-card:nth-child(3),.B1 .active-word-card,.B1 .word-card-info__complicated-words-button,.B1 .word-card-info__play-audio-button,.B1 .word-card-info__headings,.B1 .word-card-info__learned-words-button,.B1 .words-pagination__curr-page{background-color:#e4dea8}.handbook__levels .active-level-card:nth-child(4),.B2 .active-word-card,.B2 .word-card-info__complicated-words-button,.B2 .word-card-info__play-audio-button,.B2 .word-card-info__headings,.B2 .word-card-info__learned-words-button,.B2 .words-pagination__curr-page{background-color:#d1c02b}.handbook__levels .active-level-card:nth-child(5),.C1 .active-word-card,.C1 .word-card-info__complicated-words-button,.C1 .word-card-info__play-audio-button,.C1 .word-card-info__headings,.C1 .word-card-info__learned-words-button,.C1 .words-pagination__curr-page{background-color:#ffd0a6}.handbook__levels .active-level-card:nth-child(6),.C2 .active-word-card,.C2 .word-card-info__complicated-words-button,.C2 .word-card-info__play-audio-button,.C2 .word-card-info__headings,.C2 .word-card-info__learned-words-button,.C2 .words-pagination__curr-page{background-color:#ffe471}.complicated-words .active-word-card,.complicated-words .word-card-info__complicated-words-button,.complicated-words .word-card-info__play-audio-button,.complicated-words .word-card-info__headings,.complicated-words .word-card-info__learned-words-button,.complicated-words .word-card-info__remove-button,.complicated-words .words-pagination__curr-page{background-color:#cdffbf}.learned::after{background:center/cover #fff no-repeat url('+k+")}.hard::after{background:center/cover #fff no-repeat url("+E+')}.hard::after,.learned::after{position:absolute;content:"";top:5px;right:5px;width:20px;height:20px;border-radius:50%}.all-words-learned::after{position:absolute;content:"";top:2px;right:2px;width:36px;height:36px;border-radius:50%;border:3px solid #fff}.page-learned::after{position:absolute;content:"";top:-2px;left:90px;width:35px;height:35px;border-radius:50%;background:center/cover #f0f0f0 no-repeat url('+k+")}.disabled{pointer-events:none}.disabled .handbook__game-title{color:#c2c2c2;backdrop-filter:blur(2px) grayscale(100%);background-color:rgba(255,255,255,.8)}","",{version:3,sources:["webpack://./src/sass/base/_fonts.scss","webpack://./src/sass/base/_normalize.scss","webpack://./src/sass/components/_menu.scss","webpack://./src/sass/utils/_mixines.scss","webpack://./src/sass/utils/_variables.scss","webpack://./src/sass/components/_scope-card.scss","webpack://./src/sass/components/_member-card.scss","webpack://./src/sass/components/_section-title.scss","webpack://./src/sass/components/_word.scss","webpack://./src/sass/components/_pagination.scss","webpack://./src/sass/components/_registration-modal.scss","webpack://./src/sass/components/_gamespanel.scss","webpack://./src/sass/components/_popup.scss","webpack://./src/sass/components/_answer.scss","webpack://./src/sass/components/_gamestat.scss","webpack://./src/sass/components/_button.scss","webpack://./src/sass/components/_button-reg.scss","webpack://./src/sass/components/_timer.scss","webpack://./src/sass/components/_game-stat-el.scss","webpack://./src/sass/components/_handbook-titles.scss","webpack://./src/sass/components/_handbook-levels.scss","webpack://./src/sass/components/_handbook-level-card.scss","webpack://./src/sass/components/_handbook-games.scss","webpack://./src/sass/components/_handbook-words.scss","webpack://./src/sass/components/_handbook-word-cards.scss","webpack://./src/sass/components/_handbook-word-card.scss","webpack://./src/sass/components/_handbook-word-card-info.scss","webpack://./src/sass/components/_handbook-play-btn.scss","webpack://./src/sass/components/_handbook-words-pagination.scss","webpack://./src/sass/pages/main/_main.scss","webpack://./src/sass/pages/choice/_choice.scss","webpack://./src/sass/pages/game/_game.scss","webpack://./src/sass/pages/statistics/_statistics.scss","webpack://./src/sass/layout/_header.scss","webpack://./src/sass/layout/main/_about.scss","webpack://./src/sass/layout/main/_scope.scss","webpack://./src/sass/layout/main/_team.scss","webpack://./src/sass/layout/_footer.scss","webpack://./src/sass/layout/choice/_choice.scss","webpack://./src/sass/layout/game/_game.scss","webpack://./src/sass/layout/_modal.scss","webpack://./src/sass/layout/_blackout.scss","webpack://./src/sass/layout/_body.scss","webpack://./src/sass/layout/statistics/_statistics.scss","webpack://./src/sass/layout/handbook/_handbook.scss"],names:[],mappings:"AAAQ,ECCN,SAAA,CACA,QAAA,CACA,QAAA,CAGF,mBACE,0BAAA,CACA,6BAAA,CACA,qBAAA,CAGF,eACE,YAAA,CAGF,iBACE,YAAA,CAGF,wBACE,aAAA,CAGF,UACE,WAAA,CACA,UAAA,CACA,cAAA,CACA,aAAA,CACA,cAAA,CACA,yBAAA,CACA,0BAAA,CACA,6BAAA,CAGF,sBACE,mBAAA,CAGF,iBACE,YAAA,CAGF,OACE,cAAA,CAGF,yBACE,SAAA,CACA,QAAA,CAGF,YACE,oBAAA,CAGF,QACE,oBAAA,CAEF,MACE,eAAA,CAGF,IACE,kBAAA,CAGF,kBACE,iBAAA,CACA,mBAAA,CClEF,MACI,YAAA,CACA,qBAAA,CACA,oBAAA,CACA,eAAA,CACA,YACI,YAAA,CACA,kBAAA,CAEJ,iBACI,oBAAA,CACA,wBAAA,CACA,gBAAA,CCdJ,yBDeqB,CCdrB,iBDcoC,CCbpC,eDa4C,CCZ5C,cDYiD,CCXjD,oBDWuD,CCVvD,UCCS,CAAA,gBFSmE,CACxE,uBACI,wBENC,CFQL,0BACI,wBETC,CFWL,gCACI,wBEXK,CCbjB,YACI,iBAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,WAAA,CACA,UAAA,CACA,QAAA,CACA,uBAAA,CACA,iBAAA,CACA,8BAAA,CAEA,iBACI,WAAA,CACA,YAAA,CAGJ,mBFhBA,yBEiBqB,CFhBrB,iBEgBoC,CFfpC,eEe4C,CFd5C,cEciD,CFbjD,oBEauD,CFZvD,UCCS,CAAA,kBCWmE,CACxE,iBAAA,CAGJ,kBFrBA,yBEsBqB,CFrBrB,iBEqBoC,CFpBpC,eEoB4C,CFnB5C,cEmBiD,CFlBjD,oBEkBuD,CFjBvD,UCCS,CAAA,kBCgBmE,CACxE,kBAAA,CCxBR,aACI,WAAA,CACA,wBAAA,CACA,iBAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,QAAA,CACA,iBAAA,CACA,8BAAA,CAEA,oBACI,WAAA,CACA,YAAA,CAGJ,mBHfA,yBGgBqB,CHfrB,iBGeoC,CHdpC,eGc4C,CHb5C,cGaiD,CHZjD,oBGYuD,CHXvD,aCEQ,CDDR,kBGU2E,CAG3E,mBHnBA,yBGoBqB,CHnBrB,iBGmBoC,CHlBpC,eGkB4C,CHjB5C,gBGiBiD,CHhBjD,oBGgByD,CHfzD,aCEQ,CDDR,gBGc6E,CAG7E,2BHvBA,yBGwBqB,CHvBrB,iBGuBoC,CHtBpC,eGsB4C,CHrB5C,gBGqBiD,CHpBjD,oBGoByD,CHnBzD,aCEQ,CDDR,gBGkB6E,CACzE,aAAA,CACA,kBAAA,CAGJ,qBH7BA,yBG8BqB,CH7BrB,iBG6BoC,CH5BpC,eG4B4C,CH3B5C,gBG2BiD,CH1BjD,oBG0ByD,CHzBzD,aCEQ,CDDR,gBGwB6E,CAG7E,yBACI,UAAA,CACA,WAAA,CAGJ,8BHtCA,yBGuCqB,CHtCrB,iBGsCoC,CHrCpC,eGqC4C,CHpC5C,gBGoCiD,CHnCjD,oBGmCyD,CHlCzD,aCEQ,CDDR,gBGiC6E,CCxCjF,eJCI,yBAAA,CACA,iBIDgC,CJEhC,eIFwC,CJGxC,cIH6C,CJI7C,oBIJmD,CJKnD,aCEQ,CDDR,gBINuE,CCE3E,MACI,YAAA,CACA,UAAA,CACA,WAAA,CACA,iCAAA,CACA,kBAAA,CACA,iBAAA,CAEA,kBAAA,CAEA,YACI,yBAAA,CACA,kBAAA,CACA,8BAAA,CAGJ,gBACI,wBAAA,CAGJ,iBACI,wBJHK,CIIL,0FAGI,UJjBC,CImBL,qJAII,aJxBI,CI4BZ,YACI,eAAA,CACA,YAAA,CACA,WAAA,CACA,YAAA,CACA,gCAAA,CAGJ,iBACI,eAAA,CACA,YAAA,CAGJ,YLlDA,yBKmDqB,CLlDrB,iBKkDoC,CLjDpC,eKiD4C,CLhD5C,cKgDiD,CL/CjD,oBK+CuD,CL9CvD,aCEQ,CDDR,kBK6C2E,CAG3E,qBLtDA,yBKuDqB,CLtDrB,iBKsDoC,CLrDpC,eKqD4C,CLpD5C,cKoDiD,CLnDjD,oBKmDuD,CLlDvD,aCEQ,CDDR,kBKiD2E,CAG3E,YACI,eAAA,CACA,YAAA,CACA,UAAA,CACA,WAAA,CAGJ,mBACI,eAAA,CACA,YAAA,CLnEJ,yBKoEqB,CLnErB,iBKmEoC,CLlEpC,eKkE4C,CLjE5C,cKiEiD,CLhEjD,oBKgEuD,CL/DvD,aCEQ,CDDR,kBK8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A,CAGJ,oBACI,YAAA,CACA,kBAAA,CACA,QAAA,CACA,WAAA,CAGJ,yBf3BA,yBe4BqB,Cf3BrB,iBe2BoC,Cf1BpC,ee0B4C,CfzB5C,gBeyBiD,CfxBjD,oBewByD,CfvBzD,aCEQ,CDDR,gBesB6E,CACzE,8Bf7BJ,yBe8ByB,Cf7BzB,iBe6BwC,Cf5BxC,ee4BgD,Cf3BhD,gBe2BqD,Cf1BrD,oBe0B6D,CfzB7D,aCEQ,CDDR,gBewBiF,CAGjF,qBACI,iBAAA,CACA,UAAA,CACA,WAAA,CACA,WAAA,CACA,YAAA,CACA,iBAAA,CACA,4CdxCsB,CAAA,iBeC1B,kBAAA,CACA,iBAAA,ChBFA,yBgBGiB,ChBFjB,iBgBEgC,ChBDhC,egBCwC,CAAA,cAAA,ChBCxC,oBgBDmD,ChBEnD,aCwCyB,CDvCzB,gBgBHwF,CACxF,cAAA,CACA,0BfmDmB,CehDrB,mCACE,kBAAA,CACA,iBAAA,ChBVA,yBgBWiB,ChBVjB,iBgBUgC,ChBThC,egBSwC,ChBRxC,cgBQ6C,ChBP7C,oBgBOmD,ChBNnD,aCwCyB,CDvCzB,gBgBKwF,CACxF,cAAA,CACA,6BAAA,CACA,gBAAA,CAGF,uBACE,qBAAA,ChBlBA,yBgBmBiB,ChBlBjB,iBgBkBgC,ChBjBhC,egBiBwC,ChBhBxC,cgBgB6C,ChBf7C,oBgBemD,ChBdnD,aCEQ,CDDR,gBgBauE,CAGzE,yBhBtBE,yBgBuBiB,ChBtBjB,iBgBsBgC,ChBrBhC,egBqBwC,ChBpBxC,cgBoB6C,ChBnB7C,oBgBmBmD,ChBlBnD,aCEQ,CDDR,gBgBiBuE,CAGzE,uBACE,qBAAA,ChB3BA,yBgB4BiB,ChB3BjB,iBgB2BgC,ChB1BhC,egB0BwC,ChBzBxC,cgByB6C,ChBxB7C,oBgBwBmD,ChBvBnD,aCEQ,CDDR,gBgBsBuE,CAGzE,sBACE,UAAA,CACA,WAAA,ChBjCA,yBgBkCiB,ChBjCjB,iBgBiCgC,ChBhChC,egBgCwC,ChB/BxC,gBgB+B6C,ChB9B7C,oBgB8BqD,ChB7BrD,aCEQ,CDDR,kBgB4ByE,CACzE,iBAAA,CACA,iBAAA,CACA,yBAAA,CACA,qCAAA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",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto+Flex:opsz,wght@8..144,300;8..144,400&display=swap');","*{\r\n  padding: 0;\r\n  margin: 0;\r\n  border: 0;\r\n}\r\n\r\n*,*:before,*:after{\r\n  -moz-box-sizing: border-box;\r\n  -webkit-box-sizing: border-box;\r\n  box-sizing: border-box;\r\n}\r\n\r\n:focus,:active{\r\n  outline: none;\r\n}\r\n\r\na:focus,a:active{\r\n  outline: none;\r\n}\r\n\r\nnav,footer,header,aside{\r\n  display: block;\r\n}\r\n\r\nhtml,body{\r\n  height: 100%;\r\n  width: 100%;\r\n  font-size: 100%;\r\n  line-height: 1;\r\n  font-size: 14px;\r\n  -ms-text-size-adjust: 100%;\r\n  -moz-text-size-adjust: 100%;\r\n  -webkit-text-size-adjust: 100%;\r\n}\r\n\r\ninput,button,textarea{\r\n  font-family:inherit;\r\n}\r\n\r\ninput::-ms-clear{\r\n  display: none;\r\n}\r\n\r\nbutton{\r\n  cursor: pointer;\r\n}\r\n\r\nbutton::-moz-focus-inner{\r\n  padding: 0;\r\n  border: 0;\r\n}\r\n\r\na,a:visited{\r\n  text-decoration: none;\r\n}\r\n\r\na:hover{\r\n  text-decoration: none;\r\n}\r\nul li{\r\n  list-style: none;\r\n}\r\n\r\nimg{\r\n  vertical-align: top;\r\n}\r\n\r\nh1,h2,h3,h4,h5,h6{\r\n  font-size: inherit;\r\n  font-weight: inherit;\r\n}","@import '../utils/variables';\r\n@import '../utils/mixines';\r\n\r\n.menu {\r\n    display: grid;\r\n    grid-auto-flow: column;\r\n    justify-items: center;\r\n    grid-column: 3 / 4;\r\n    &__item {\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n    &__item-link {\r\n        text-decoration: none;\r\n        text-transform: uppercase;\r\n        padding: 0px 10px;\r\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-light, 5rem);\r\n        &:hover {\r\n            background-color: $hover-dark;\r\n        }\r\n        &.selected {\r\n            background-color: $hover-dark;\r\n        }\r\n        &.selected:hover {\r\n            background-color: $hover-dark-sel;\r\n        }\r\n    }\r\n}\r\n","@mixin addFont ($font-family, $font-style, $font-weight, $font-size, $letter-spacing, $font_color, $line-height) {\r\n    font-family: $font-family;\r\n    font-style: $font-style;\r\n    font-weight: $font-weight;\r\n    font-size: $font-size;\r\n    letter-spacing: $letter-spacing;\r\n    color: $font_color;\r\n    line-height: $line-height;\r\n}","$background-dark: #3a4b83;\r\n$background-dark-transparent: #3a4b8380;\r\n$background-light: #f0f0f0;\r\n$background-gray: #a8a8a8;\r\n$background-selected: #fdba63;\r\n$blackout: rgba(0, 0, 0, 0.3);\r\n$text-white: #ffffff;\r\n$text-light: #dddddd;\r\n$text-dark: #3a56b1;\r\n$text-gray: #777777;\r\n$text-darkgray: #494949;\r\n$text-black: #000000;\r\n$hover-dark: #517aff;\r\n$hover-dark-sel: #95a8e7;\r\n$shadow-dark: #222c4b;\r\n$shadow-light: #f0f0f0;\r\n$border-color-dark: #4d4d4d;\r\n$border-color-light: #a3a3a3;\r\n$grid-container-width: 90%;\r\n$grid-container-gap: 30px;\r\n$hard-word: #fa9c21;\r\n$known-word: #187a0f;\r\n$audio-game-color: #dd9434;\r\n$sprint-game-color: #3e59b3;\r\n$timer-color: #526cc4;\r\n\r\n$level-A1-color: #a1e4c8;\r\n$level-A1-color-alpha: #a1e4c880;\r\n$level-A2-color: #1d9b55;\r\n$level-A2-color-alpha: #1d9b5580;\r\n$level-B1-color: #e4dea8;\r\n$level-B1-color-alpha: #e4dea880;\r\n$level-B2-color: #d1c02b;\r\n$level-B2-color-alpha: #d1c02b80;\r\n$level-C1-color: #ce9d9d;\r\n$level-C1-color-alpha: #ce9d9d80;\r\n$level-C2-color: #c92323;\r\n$level-C2-color-alpha: #c9232380;\r\n$level-selected: #ff9100;\r\n$level-selected-text: #ffffff;\r\n\r\n$color-background-transparent: #00000080;\r\n\r\n$color-fault: #cc3333;\r\n$color-ok: #3bac3b;\r\n\r\n$handbook-disabled-font-clr: #c2c2c2;\r\n$handbook-card-bg: #f0f0f0;\r\n$handbook-shadow: 0 0 2px #898989;\r\n$handbook-pagination-btn-bg: #f5f5f5;\r\n$handbook-A1-lvl-bg: $level-A1-color;\r\n$handbook-A2-lvl-bg: #ACFFBB;\r\n$handbook-B1-lvl-bg: $level-B1-color;\r\n$handbook-B2-lvl-bg: $level-B2-color;\r\n$handbook-C1-lvl-bg: #FFD0A6;\r\n$handbook-C2-lvl-bg: #FFE471;\r\n$handbook-complicated-words: #CDFFBF;\r\n$handbook-transititon: 0.3s ease-in-out;",".scope-card {\r\n    padding: 30px 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    height: 100%;\r\n    width: 100%;\r\n    gap: 20px;\r\n    border: 1px solid #c0c0c0;\r\n    border-radius: 5px;\r\n    box-shadow: 1px 1px 5px $shadow-dark;\r\n\r\n    &__img {\r\n        width: 100px;\r\n        height: 100px;\r\n    }\r\n\r\n    &__title {\r\n        @include addFont('Philosopher', normal, 600, 3rem, 0.01em, $text-light, 3.5rem);\r\n        text-align: center\r\n    }\r\n\r\n    &__text {\r\n        @include addFont('Philosopher', normal, 400, 2rem, 0.01em, $text-light, 2.5rem);\r\n        text-align: justify;\r\n    }\r\n}\r\n",".member-card {\r\n    height: 100%;\r\n    border: 1px solid $border-color-light;\r\n    border-radius: 5px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 10px;\r\n    padding: 30px 20px;\r\n    box-shadow: 1px 1px 5px $shadow-dark;\r\n\r\n    &__photo {\r\n        width: 150px;\r\n        height: 150px;\r\n    }\r\n\r\n    &__role {\r\n        @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2.5rem);\r\n    }\r\n\r\n    &__name {\r\n        @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\r\n    }\r\n\r\n    &__contribution {\r\n        @include addFont('Philosopher', normal, 400, 1.7rem, 0.01em, $text-dark, 2rem);\r\n        flex: 1 1 auto;\r\n        text-align: justify;\r\n    }\r\n\r\n    &__github {\r\n        @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\r\n    }\r\n\r\n    &__github-img {\r\n        width: 30px;\r\n        height: 30px;\r\n    }\r\n    \r\n    &__github-nickname {\r\n        @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\r\n    }\r\n}\r\n",".section-title {\r\n    @include addFont('Philosopher', normal, 600, 5rem, 0.01em, $text-dark, 5rem);\r\n}\r\n","@import '../utils/variables';\r\n@import '../utils/mixines';\r\n\r\n.word {\r\n    display: grid;\r\n    width: 100%;\r\n    height: 100%;\r\n    grid-template: 100px auto auto / 1fr;\r\n    border-radius: 20px;\r\n    padding: 20px 10px;\r\n\r\n    transition: .1s all;\r\n\r\n    &:hover {\r\n        transform: translateY(2px);\r\n        transition: .1s all;\r\n        box-shadow: 1px 1px 3px $shadow-dark;\r\n    }\r\n\r\n    &.hard-word {\r\n        background-color: $hard-word;\r\n    }\r\n\r\n    &.known-word {\r\n        background-color: $known-word;\r\n        & .word__word,\r\n        & .word__example,\r\n        & .word__mean {\r\n            color: $text-black;\r\n        }\r\n        & .word__transcription,\r\n        & .word__translation,\r\n        & .word__example-transl,\r\n        & .word__mean-transl {\r\n            color: $text-darkgray;\r\n        }\r\n    }\r\n\r\n    &__wrap {\r\n        grid-column: 1 / 2;\r\n        grid-row: 1 / 2;\r\n        padding: 5px;\r\n        display: grid;\r\n        grid-template: 40px 40px / 1fr 30px;\r\n    }\r\n\r\n    &__word-full {\r\n        grid-column: 1 / 2;\r\n        grid-row: 1 / 2;\r\n    }\r\n\r\n    &__word {\r\n        @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2.2rem);\r\n    }\r\n\r\n    &__transcription {\r\n        @include addFont('Philosopher', normal, 400, 2rem, 0.01em, $text-dark, 2.2rem);\r\n    }\r\n\r\n    &__play {\r\n        grid-column: 2 / 3;\r\n        grid-row: 1 / 2;\r\n        width: 30px;\r\n        height: 30px;\r\n    }\r\n\r\n    &__translation {\r\n        grid-column: 1 / 3;\r\n        grid-row: 2 / 3;\r\n        @include addFont('Philosopher', normal, 400, 2rem, 0.01em, $text-dark, 2.2rem);\r\n    }\r\n\r\n    &__image-wrap {\r\n        grid-column: 1 / 2;\r\n        grid-row: 2 / 3;\r\n        & img {\r\n            width: 100%;\r\n            height: 100%;\r\n            object-fit: contain;\r\n        }\r\n    }\r\n\r\n    &__examples {\r\n        grid-column: 1 / 2;\r\n        grid-row: 3 / 4;\r\n        display: grid;\r\n        grid-template: repeat(4, auto) / 1fr 50px;\r\n        padding: 5px\r\n    }\r\n\r\n    &__example {\r\n        @include addFont('Philosopher', normal, 400, 1.5em, 0.01em, $text-dark, 2rem);\r\n        grid-column: 1 / 2;\r\n        grid-row: 1 / 2;\r\n    }\r\n\r\n    &__example-play {\r\n        width: 30px;\r\n        height: 30px;\r\n        grid-column: 2/3;\r\n        grid-row: 1/2;\r\n        align-self: center;\r\n        justify-self: center;\r\n    }\r\n\r\n    &__example-transl {\r\n        @include addFont('Philosopher', normal, 400, 1.5em, 0.01em, $text-gray, 2rem);\r\n        grid-column: 1 / 3;\r\n        grid-row: 3 / 4;\r\n    }\r\n\r\n    &__mean {\r\n        @include addFont('Philosopher', normal, 400, 1.5em, 0.01em, $text-dark, 2rem);\r\n        grid-column: 1 / 2;\r\n        grid-row: 4 / 5;\r\n    }\r\n\r\n    &__mean-transl {\r\n        @include addFont('Philosopher', normal, 400, 1.5em, 0.01em, $text-gray, 2rem);\r\n        grid-column: 1 / 3;\r\n        grid-row: 5 / 6;\r\n    }\r\n    \r\n    &__mean-play {\r\n        width: 30px;\r\n        height: 30px;\r\n        grid-column: 2 / 3;\r\n        grid-row: 4 / 5;\r\n        align-self: center;\r\n        justify-self: center;\r\n    }\r\n}\r\n\r\n.play-btn {\r\n    transition: .1s all;\r\n    &:hover {\r\n        transform: scale(1.2);\r\n        transition: .1s all;\r\n    }\r\n}","@import '../utils/variables';\r\n\r\n.pagination {\r\n    width: 450px;\r\n    display: grid;\r\n    grid-column: 2/3;\r\n    grid-row: 1/2;\r\n    grid-template: 50px / repeat(9, 50px);\r\n    gap: 2px;\r\n    justify-self: center;\r\n    padding: 30px 0px;\r\n    &__link {\r\n        margin: auto;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: 40px;\r\n        height: 40px;\r\n        border: 1px solid $background-gray;\r\n        border-radius: 7px;\r\n        transition: .2s all;\r\n        @include addFont('Philosopher', normal, 400, 1.5rem, 0.01em, $text-dark, 2.2rem);\r\n        \r\n        &:hover {\r\n            box-shadow: 2px 2px 5px $shadow-dark;\r\n            transform: translateY(1px);\r\n            transition: .1s all;\r\n        }\r\n\r\n        &.selected {\r\n            background-color: $background-selected;\r\n            font-weight: 600;\r\n        }\r\n    }\r\n}\r\n","@import '../utils/variables';\r\n\r\n.modal {\r\n    background-color: $background-light;\r\n    .modal__form {\r\n        background-color: $background-light;\r\n    }\r\n}","@import '../utils/variables';\r\n\r\n.game-panel {\r\n    width: 100%;\r\n    justify-self: center;\r\n    align-items: center;\r\n    display: grid;\r\n    grid-template: 150px / repeat(4, 1fr);\r\n    border-radius: 20px;\r\n    gap: 10px;\r\n    &__link {\r\n        width: 150px;\r\n        height: 50px;\r\n        background-color: $background-dark;\r\n        color: $text-light;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        border-radius: 5px;\r\n        box-shadow: 3px 3px 7px $shadow-dark;\r\n        transition: .2s all;\r\n        &:hover {\r\n            transform: translateY(2px);\r\n            transition: .2s all;\r\n        }\r\n    }\r\n    & :nth-child(1) {\r\n        grid-column: 2/3;\r\n        margin: auto;\r\n    }\r\n    & :nth-child(2) {\r\n        grid-column: 3/4;\r\n        margin: auto;\r\n    }\r\n}\r\n","@import '../utils/variables';\r\n@import '../utils/mixines';\r\n\r\n.popup {\r\n  position: fixed;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: $color-background-transparent;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  z-index: 20;\r\n\r\n  &[id=\"message\"] {\r\n    opacity: 0;\r\n    visibility: hidden;\r\n    transition: all 0.8s ease 0s;\r\n    \r\n    & .popup__content {\r\n      max-width: 800px;\r\n      width: 80%;\r\n      @media (max-width: 950px) {\r\n        width: 100%;\r\n      }\r\n    }\r\n    \r\n    & h2 {\r\n      @media (max-width: 750px) {\r\n        @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2.2rem);\r\n      }\r\n      @media (max-width: 600px) {\r\n        @include addFont('Philosopher', normal, 600, 1rem, 0.01em, $text-dark, 1.1rem);\r\n      }\r\n    }\r\n  }\r\n\r\n  &[id=\"game-stat\"] {\r\n    opacity: 0;\r\n    visibility: hidden;\r\n    transition: all 0.8s ease 0s;\r\n\r\n    & .popup__content {\r\n      width: 60%;\r\n      height: 600px;\r\n      padding: 20px;\r\n    }\r\n  }\r\n\r\n  &__message {\r\n    @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2.2rem);\r\n    text-align: justify;\r\n  }\r\n\r\n  &.open {\r\n    opacity: 1;\r\n    visibility: visible;\r\n  }\r\n\r\n  &__content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 30px;\r\n    width: 100%;\r\n    background-color: $background-light;\r\n    color: $text-dark;\r\n    padding: 30px;\r\n    border: 3px solid $background-dark;\r\n    border-radius: 20px;\r\n    box-shadow: 5px 5px 15px #073ae080;\r\n    position: relative;\r\n    visibility: hidden;\r\n    opacity: 0;\r\n    transform: perspective(600px) translate(0px, -100%) rotateX(45deg); \r\n    transition: all 0.8s ease 0s;\r\n  }\r\n\r\n  &.open .popup__content {\r\n    transform: perspective(600px) translate(0px, 0%) rotateX(0deg);\r\n    visibility: visible;\r\n    opacity: 1;\r\n    transition: all 0.8s ease 0s;\r\n  }\r\n\r\n  &__area {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 0;\r\n    left: 0;\r\n  }\r\n\r\n  &__body {\r\n    min-height: 100%;\r\n    width: 50%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 30px 10px;\r\n  }\r\n\r\n  &__close {\r\n    position: absolute;\r\n    right: -40px;\r\n    top: -40px;\r\n    & img {\r\n      width: 48px;\r\n      height: 48px;\r\n      transition: all 0.5s linear;\r\n      background-color: $background-light;\r\n      border-radius: 50%;\r\n      border: 3px solid $background-dark;\r\n      @media (max-width: 545px) {\r\n        width: 32px;\r\n        height: 32px;\r\n        transition: all 0.2s linear;\r\n      }\r\n    }\r\n    &:hover img {\r\n      transform: scale(1.2);\r\n      transition: all 0.5s linear;\r\n    }\r\n  }\r\n\r\n  &__close-btn {\r\n    width: 40%;\r\n    height: 4rem;\r\n    @include addFont('Philosopher', normal, 600, 2.5rem, 0.01em, $text-light, 3.2rem);\r\n    background-color: $background-dark;\r\n    border-radius: 5px;\r\n    box-shadow: 2px 2px 5px $background-dark;\r\n    transition: all 0.1s linear;\r\n    &:hover {\r\n      color: $text-white;\r\n\r\n    }\r\n    &:active {\r\n      transform: translateY(2px);\r\n      transition: all 0.2s linear;\r\n    }\r\n  }\r\n\r\n  &__title {\r\n    & .popup__title-text {\r\n      text-align: center;\r\n      transition: all 0.2s linear;\r\n      @include addFont('Philosopher', normal, 600, 2.5rem, 0.01em, $text-dark, 3.2rem);\r\n    }\r\n\r\n    margin: 0 0 20px 0;\r\n    @media (max-width: 545px) {\r\n      @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\r\n      transition: 0.2s linear;\r\n    }\r\n    @media (max-width: 445px) {\r\n      @include addFont('Philosopher', normal, 600, 1rem, 0.01em, $text-dark, 1.2rem);\r\n      transition: 0.2s linear;\r\n    }\r\n  }\r\n}","@import '../utils/variables';\r\n@import '../utils/mixines';\r\n\r\n.answer {\r\n    display: flex;\r\n    position: relative;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 45px;\r\n    border-radius: 10px;\r\n    box-shadow: 2px 2px 5px $background-dark;\r\n    align-items: center;\r\n    padding: 0px 50px;\r\n    width: 100%;\r\n    gap: 10px;\r\n    transition: .2s all;\r\n    background-color: $background-light;\r\n\r\n    &__ok,\r\n    &__fault {\r\n        display: none;\r\n        position: absolute;\r\n        top: 8px;\r\n        left: 10px;\r\n\r\n        &.visible {\r\n            display: block;\r\n        }\r\n        filter: drop-shadow(0 0 3px $background-dark);\r\n    }\r\n\r\n    &:hover {\r\n        box-shadow: 3px 3px 7px $background-dark;\r\n        transition: .2s all;\r\n    }\r\n\r\n    &:active {\r\n        transition: .2s all;\r\n        transform: translateY(3px);\r\n    }\r\n\r\n    &.active {\r\n        transition: .2s all;\r\n        transform: translateY(3px);\r\n    }\r\n\r\n    &.ok {\r\n        background-color: $color-ok;\r\n        .answer__ok {\r\n            display: block;\r\n        }\r\n    }\r\n\r\n    &.fault {\r\n        background-color: $color-fault;\r\n        .answer__fault {\r\n            display: block;\r\n        }\r\n    }\r\n\r\n    &.hide-help {\r\n        .answer__help {\r\n            display: none;\r\n        }\r\n    }\r\n\r\n    &__text {\r\n        grid-column: 1/3;\r\n        grid-row: 1/2;\r\n        justify-self: center;\r\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-dark, 1rem);\r\n    }\r\n\r\n    &__help {\r\n        display: flex;\r\n        width: 30px;\r\n        height: 30px;\r\n        position: absolute;\r\n        top: 8px;\r\n        left: 10px;\r\n        align-items: center;\r\n        justify-content: center;\r\n        border-radius: 50%;\r\n        border: 1px solid $background-dark;\r\n    }\r\n}","@import '../utils/variables';\r\n@import '../utils/mixines';\r\n\r\n.game-stat {\r\n    max-height: 100%;\r\n    display: grid;\r\n    grid-template: 100px 1fr 50px 80px / 1fr;\r\n    gap: 10px;\r\n    &__about {\r\n        grid-column: 1/2;\r\n        grid-row: 1/2;\r\n    }\r\n\r\n    &__title {\r\n        @include addFont('Philosopher', normal, 600, 3rem, 0.06em, $text-dark, 4rem);\r\n        text-align: center;\r\n    }\r\n\r\n    &__result,\r\n    &__result-val,\r\n    &__serie,\r\n    &__serie-val {\r\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-dark, 3rem);\r\n        text-align: center;\r\n    }\r\n\r\n    &__container {\r\n        padding: 10px 0px;\r\n        grid-column: 1/2;\r\n        grid-row: 2/3;\r\n        overflow: hidden;\r\n        height: 100%;\r\n    }\r\n\r\n    &__slider {\r\n        display: flex;\r\n        width: 200%;\r\n        height: 100%;\r\n        padding: 20px 0px;\r\n        transition: 1s all ease;\r\n        &.shift {\r\n            transform: translateX(-50%);\r\n            transition: 1s all ease;\r\n        }\r\n    }\r\n\r\n    &__item {\r\n        width: 100%;\r\n        height: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 15px;\r\n        overflow: scroll;\r\n    }\r\n\r\n    & #game-stat-common {\r\n        display: grid;\r\n        align-items: center;\r\n        justify-items: center;\r\n    }\r\n\r\n    &__percent {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: 150px;\r\n        height: 150px;\r\n        border: 3px solid $background-dark;\r\n        border-radius: 50%;\r\n        box-shadow: 2px 2px 5px $background-dark;\r\n        @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2.2rem);\r\n    }\r\n\r\n    &__el {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 10px;\r\n        @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\r\n    }\r\n\r\n    &__el-play {\r\n            width: 100%;\r\n            height: 100%;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: flex-start;\r\n            transition: .2s all ease;\r\n            gap: 10px;\r\n        &:hover img{\r\n            transform: scale(1.2);\r\n            transition: .2s all ease;\r\n        }\r\n    }\r\n\r\n    &__el-word {\r\n        @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2rem);\r\n    }\r\n\r\n    &__pagination {\r\n        grid-column: 1/2;\r\n        grid-row: 3/4;\r\n        display: flex;\r\n        gap: 20px;\r\n        justify-content: center;\r\n    }\r\n\r\n    &__pag-btn {\r\n        width: 20px;\r\n        height: 20px;\r\n        background-color: $background-dark;\r\n        border-radius: 50%;\r\n        border: 3px solid $background-dark;\r\n        box-shadow: 1px 1px 3px $background-dark;\r\n        transition: .2s all ease;\r\n        &:hover {\r\n            background-color: $background-light;\r\n            transition: .2s all ease;\r\n        }\r\n\r\n        &#game-stat-left,\r\n        &#game-stat-right {\r\n            background-color: $background-light;\r\n            &.active-page {\r\n                background-color: $background-dark;\r\n            }\r\n        }\r\n    }\r\n\r\n    &__action {\r\n        grid-column: 1/2;\r\n        grid-row: 4/5;\r\n        display: flex;\r\n        justify-content: center;\r\n        gap: 10px;\r\n    }\r\n\r\n    &__restart,\r\n    &__game-select {\r\n        width: 40%;\r\n    }\r\n    \r\n    &__errors-words,\r\n    &__rights-words {\r\n        display: flex;\r\n        flex-direction: column;\r\n        padding: 20px 10px;\r\n    }\r\n}\r\n\r\n.stat-header {\r\n    @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\r\n}\r\n\r\n.stat-separator {\r\n    width: 100%;\r\n    height: 3px;\r\n    border: 1px solid $background-dark;\r\n    &.hide {\r\n        display: none;\r\n    }\r\n}\r\n\r\n.hide {\r\n    display: none;\r\n}",".button {\r\n    height: 4rem;\r\n    @include addFont('Philosopher', normal, 600, 2.5rem, 0.01em, $text-light, 3.2rem);\r\n    background-color: $background-dark;\r\n    border-radius: 5px;\r\n    box-shadow: 2px 2px 5px $background-dark;\r\n    transition: all 0.1s linear;\r\n    justify-self: center;\r\n    padding: 0px 20px;\r\n\r\n    &:hover {\r\n        color: $text-white;\r\n    }\r\n\r\n    &:active {\r\n        transform: translateY(2px);\r\n        transition: all 0.2s linear;\r\n    }\r\n}",".regbtn {\r\n    width: fit-content;\r\n    padding: 0 1rem;\r\n    height: 70px;\r\n    background-color: $background-light;\r\n    border-radius: 5px;\r\n    box-shadow: 3px 3px 7px $shadow-dark;\r\n    transition: .2s all ease;\r\n    @include addFont('Philosopher', normal, 600, 3rem, 0.01em, $text-dark, 4rem);\r\n\r\n    &:hover {\r\n        transform: translateY(2px);\r\n        transition: .2s all ease;\r\n    }\r\n}","@import '../utils/variables';\r\n@import '../utils/mixines';\r\n\r\n.timer {\r\n    width: 200px;\r\n    height: 200px;\r\n    border-radius: 50%;\r\n    background-color: $background-light;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    overflow: hidden;\r\n    position: relative;\r\n\r\n   \r\n    &::before{\r\n        content: '';\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 50%;\r\n        height: 100%;\r\n        z-index: 3;\r\n        background-color: $background-light;\r\n    }\r\n    \r\n    &::after{\r\n        content: '';\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        width: 50%;\r\n        height: 100%;\r\n        z-index: 3;\r\n        background-color: $timer-color;\r\n        visibility: hidden;\r\n    }\r\n    &.start {\r\n        &::before {\r\n            animation: mask-left 30s steps(1,end) forwards;\r\n        }\r\n        &::after {\r\n            animation: mask-right 30s steps(1,end) forwards;\r\n        }\r\n        & .timer__line{\r\n            animation: line 30s linear forwards;\r\n        }\r\n        & .timer__counter {\r\n            animation: counter 30s steps(29, end) forwards;\r\n        }\r\n    }\r\n    &__line {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        z-index: 2;\r\n    }\r\n\r\n    &__line::after {\r\n        content: \"\";\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 50%;\r\n        height: 100%;\r\n        background-color: $timer-color;\r\n    }\r\n\r\n    &__body {\r\n        width: 100px;\r\n        height: 100px;\r\n        border-radius: 50%;\r\n        background-color: $background-dark;\r\n        text-align: center;\r\n        overflow: hidden;\r\n        z-index: 4;\r\n    }\r\n\r\n    &__counter span{\r\n        @include addFont('Philosopher', normal, 600, 50px, 0.01em, $text-light, 50px);\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        height: 100px;\r\n    }\r\n}\r\n\r\n@keyframes counter {\r\n    0% {\r\n\r\n    }\r\n    100% {\r\n        transform: translate(0px, -2900px);\r\n    }\r\n}\r\n\r\n@keyframes line {\r\n    0% {}\r\n\r\n    100% {\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n\r\n@keyframes mask-left {\r\n    0% {\r\n        visibility: visible;\r\n    }\r\n    50%,\r\n    100% {\r\n        visibility: hidden;\r\n    }\r\n}\r\n\r\n@keyframes mask-right {\r\n    0% {\r\n        visibility: hidden;\r\n    }\r\n    50%,\r\n    100% {\r\n        visibility: visible;\r\n    }\r\n}","@import '../utils/variables';\r\n@import '../utils/mixines';\r\n\r\n.game-stat-el {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    padding: 10px;\r\n    border-radius: 20px;\r\n    box-shadow: 2px 2px 5px $background-dark;\r\n    gap: 5px;\r\n    width: 400px;\r\n    position: relative;\r\n    overflow: hidden;\r\n    padding: 20px 5px;\r\n\r\n    &__title {\r\n        @include addFont('Philosopher', normal, 600, 3rem, 0.01em, $text-dark, 3rem);\r\n        padding: 0px 17px;\r\n    }\r\n\r\n    &__item {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 10px;\r\n        padding: 5px;\r\n    }\r\n\r\n    &__item-text {\r\n        @include addFont('Philosopher', normal, 400, 1.5rem, 0.01em, $text-dark, 2rem);\r\n        & span {\r\n            @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\r\n        }\r\n    }\r\n    &__decor {\r\n        position: absolute;\r\n        right: -54%;\r\n        bottom: -67%;\r\n        width: 400px;\r\n        height: 400px;\r\n        border-radius: 50%;\r\n        background-color: $background-dark-transparent;\r\n    }\r\n}",".handbook {\r\n  &__title {\r\n    height: fit-content;\r\n    width: fit-content;\r\n    @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $handbook-disabled-font-clr, 2rem);\r\n    cursor: pointer;\r\n    transition: $handbook-transititon;\r\n  }\r\n\r\n  &__complicated-words-title {\r\n    height: fit-content;\r\n    width: fit-content;\r\n    @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $handbook-disabled-font-clr, 2rem);\r\n    cursor: pointer;\r\n    border-left: 5px solid $handbook-disabled-font-clr;\r\n    padding-left: 8px;\r\n  }\r\n\r\n  &__words-title {\r\n    grid-area: words-title;\r\n    @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2rem);\r\n  }\r\n\r\n  &__card-subtitle {\r\n    @include addFont('Philosopher', normal, 600, 1rem, 0.01em, $text-dark, 1rem);\r\n  }\r\n\r\n  &__games-title {\r\n    grid-area: games-title;\r\n    @include addFont('Philosopher', normal, 600, 2rem, 0.01em, $text-dark, 2rem);\r\n  }\r\n\r\n  &__game-title {\r\n    width: 100%;\r\n    height: 100%;\r\n    @include addFont('Philosopher', normal, 600, 1.8rem, 0.01em, $text-dark, 1.8rem);\r\n    text-align: center;\r\n    line-height: 150px;\r\n    backdrop-filter: blur(4px);\r\n    background-color: rgba(240, 240, 240, 0.8);\r\n    border-radius: 10px;\r\n  }\r\n}\r\n\r\n.word-card-info {\r\n\r\n  &__meaning-title,\r\n  &__example-title {\r\n    font-weight: 600;\r\n    margin-bottom: 5px;\r\n  }\r\n\r\n  &__statistic {\r\n    display: flex;\r\n    gap: 20px;\r\n  }\r\n}\r\n\r\n.sprint-statistic__title, .audio-call-statistic__title {\r\n  @include addFont('Philosopher', normal, 600, 1.2rem, 0.01em, $text-dark, 1.2rem);\r\n  margin-bottom: 5px;\r\n}",".handbook__levels {\r\n  display: flex;\r\n  width: fit-content;\r\n  height: fit-content;\r\n  gap: 10px;\r\n}",".handbook__level-card {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 50px;\r\n  height: 50px;\r\n  @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 1.5rem);\r\n  border-radius: 10px;\r\n  background-color: $handbook-card-bg;\r\n  cursor: pointer;\r\n  transition: $handbook-transititon;\r\n}",".handbook {\r\n  &__games {\r\n    display: grid;\r\n    grid-area: games;\r\n    grid-template-areas:\r\n      'games-title .'\r\n      'audio-call sprint'\r\n    ;\r\n    gap: 10px;\r\n  }\r\n\r\n  &__audio-call {\r\n    grid-area: audio-call;\r\n    height: 150px;\r\n    cursor: pointer;\r\n    background: 20%/cover $handbook-card-bg no-repeat url('./public/assets/images/audio.png');\r\n    border-radius: 10px;\r\n  }\r\n\r\n  &__sprint {\r\n    grid-area: sprint;\r\n    height: 150px;\r\n    cursor: pointer;\r\n    background: center/cover $handbook-card-bg no-repeat url('./public/assets/images/sprint.png');\r\n    border-radius: 10px;\r\n  }\r\n}",".handbook__words {\r\n  position: relative;\r\n  display: grid;\r\n  grid-area: words;\r\n  grid-template-areas:\r\n    'words-title words-title'\r\n    'word-cards word-card-info'\r\n    'words-pagination words-pagination'\r\n  ;\r\n  grid-auto-columns: 3fr 0.5fr;\r\n  gap: 20px;\r\n}",".handbook__word-cards {\r\n  display: grid;\r\n  grid-template-columns: repeat(4, minmax(150px, 1fr));\r\n  gap: 10px;\r\n  grid-area: word-cards;\r\n  grid-auto-rows: 100px;\r\n  @include addFont('Philosopher', normal, 400, 1.2rem, 0.01em, $text-dark, 1.2rem);\r\n}",".handbook__word-card {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  width: 100%;\r\n  height: 100px;\r\n  @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 1.5rem);\r\n  border-radius: 10px;\r\n  background-color: $handbook-card-bg;\r\n  text-align: center;\r\n  flex-wrap: wrap;\r\n  transition: $handbook-transititon;\r\n}",".word-card-info {\r\n  position: relative;\r\n  display: flex;\r\n  grid-area: word-card-info;\r\n  justify-self: center;\r\n  flex-direction: column;\r\n  width: fit-content;\r\n  min-height: 540px;\r\n  padding: 15px;\r\n  gap: 10px;\r\n  background-color: $handbook-card-bg;\r\n  border-radius: 10px;\r\n  @include addFont('Philosopher', normal, 400, 1.2rem, 0.01em, $text-dark, 1.2rem);\r\n\r\n  &__headings {\r\n    position: absolute;\r\n    top: 5%;\r\n    right: 15px;\r\n    padding: 5px;\r\n    font-weight: 600;\r\n    color: $text-dark;\r\n    transition: $handbook-transititon;\r\n  }\r\n\r\n  &__img {\r\n    border-radius: 10px;\r\n    width: 400px;\r\n    height: 250px;\r\n  }\r\n\r\n  &__complicated-words-button,\r\n  &__learned-words-button,\r\n  &__remove-button {\r\n    width: 190px;\r\n    height: 30px;\r\n    text-align: center;\r\n    border-radius: 15px;\r\n    @include addFont('Philosopher', normal, 400, 1rem, 0.01em, $text-dark, 1rem);\r\n    box-shadow: $handbook-shadow;\r\n    transition: $handbook-transititon;\r\n  }\r\n\r\n  &__buttons {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n}",".word-card-info__play-audio-button {\r\n  position: absolute;\r\n  top: 215px;\r\n  left: 24px;\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  background: center/contain no-repeat url('./public/assets/icons/handbook-play.svg');\r\n  box-shadow: $handbook-shadow;\r\n  transition: 0.3s ease-in-out;\r\n}",".words-pagination {\r\n  grid-area: words-pagination;\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 10px;\r\n\r\n  &__next-button,\r\n  &__prev-button,\r\n  &__curr-page {\r\n    width: 40px;\r\n    height: 40px;\r\n    border-radius: 50%;\r\n    box-shadow: $handbook-shadow;\r\n    transition: 0.3s ease-in-out;\r\n  }\r\n\r\n  &__next-button {\r\n    background: center/20% white no-repeat url('./public/assets/icons/arrow-right.svg');\r\n  }\r\n\r\n  &__prev-button {\r\n    background: center/20% white no-repeat url('./public/assets/icons/arrow-left.svg');\r\n  }\r\n\r\n  &__curr-page {\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    @include addFont('Philosopher', normal, 400, 1rem, 0.01em, $text-dark, 1rem);\r\n  }\r\n\r\n  &__next-button:disabled,\r\n  &__prev-button:disabled {\r\n    box-shadow: none;\r\n    pointer-events: none;\r\n    background-color: $handbook-pagination-btn-bg;\r\n  }\r\n\r\n  &__next-button:disabled {\r\n    background: center/20% white no-repeat url('./public/assets/icons/arrow-right-disabled.svg');\r\n  }\r\n\r\n  &__prev-button:disabled {\r\n    background: center/20% white no-repeat url('./public/assets/icons/arrow-left-disabled.svg');\r\n  }\r\n}",'@import \'../../utils/variables\';\r\n\r\n.wrapper {\r\n    min-height: 100%;\r\n    width: 100%;\r\n    display: grid;\r\n    grid-template: [start] "header" minmax(100px, auto) [row2] [row2] "content" 1fr [row3] [row3] "footer" minmax(100px, auto) [row-end] / 1fr;\r\n\r\n    &.hide-footer {\r\n        grid-template: [start] "header" minmax(100px, auto) [row2] [row2] "content" 1fr [row-end] / 1fr;\r\n    }\r\n}\r\n\r\n.content {\r\n    grid-area: content;\r\n    display: grid;\r\n    \r\n    grid-template: 1fr / 1fr;\r\n}\r\n',"@import '../../utils/variables';\r\n@import '../../utils/mixines';\r\n\r\n.choice-panel {\r\n    display: grid;\r\n    justify-self: center;\r\n    align-items: center;\r\n    grid-column: 1/3;\r\n    grid-row: 1/2;\r\n    grid-template: 1fr/1fr $grid-container-width 1fr;\r\n    width: 100%;\r\n}\r\n\r\n.choice {\r\n    display: grid;\r\n    grid-column: 2/3;\r\n    grid-template: 10rem auto 5rem/ repeat(3, 1fr);\r\n    \r\n    @media (max-width: 1300px) {\r\n        grid-template: 10rem repeat(3, auto) 5rem/1fr 1fr 1fr;\r\n    }\r\n}\r\n\r\n.choice__wrap {\r\n    justify-self: center;\r\n    &.audio {\r\n        grid-column: 1/2;\r\n        grid-row: 2/3;\r\n        @media (max-width: 1300px) {\r\n            grid-column: 2/3;\r\n            grid-row: 2/3;\r\n        }\r\n    }\r\n    \r\n    &.sprint {\r\n        grid-column: 3/4;\r\n        grid-row: 2/3;\r\n        @media (max-width: 1300px) {\r\n            grid-column: 2/3;\r\n            grid-row: 4/5;\r\n        }\r\n    }\r\n}\r\n\r\n.choice__levels {\r\n    justify-self: center;\r\n    grid-column: 2/3;\r\n    grid-row: 2/3;\r\n        @media (max-width: 1300px) {\r\n            grid-column: 2/3;\r\n            grid-row: 3/4;\r\n        }\r\n}\r\n\r\n.choice__title {\r\n    grid-column: 1/4;\r\n    grid-row: 1/2;\r\n    align-self: center;\r\n    justify-self: center;\r\n    padding: 2rem;\r\n}\r\n\r\n.choice__hint {\r\n    grid-column: 1/4;\r\n    grid-row: 3/4;\r\n    align-self: center;\r\n    justify-self: center;\r\n        @media (max-width: 1300px) {\r\n            grid-row: 5/6;\r\n        }\r\n}","@import '../../utils/variables';\r\n@import '../../utils/mixines';\r\n\r\n.game {\r\n    display: grid;\r\n    justify-self: center;\r\n    align-items: center;\r\n    grid-column: 1/3;\r\n    grid-row: 1/2;\r\n    grid-template: auto 1fr 20%/1fr $grid-container-width 1fr;\r\n    width: 100%;\r\n    padding-top: 30px;\r\n    max-height: 70vh;\r\n\r\n    &__about {\r\n        grid-column: 2/3;\r\n        grid-row: 1/2;\r\n        display: grid;\r\n        grid-template: 1fr 2fr/repeat(2, 1fr)\r\n    }\r\n\r\n    &__help {\r\n        grid-column: 2/3;\r\n        grid-row: 2/3;\r\n        justify-self: center;\r\n        display: grid;\r\n        grid-template: repeat(5, 1fr) / 1fr;\r\n        & :nth-child(1) {\r\n            grid-column: 1/3;\r\n            grid-row: 1/2;\r\n        }\r\n        & :nth-child(2) {\r\n            grid-column: 1/3;\r\n            grid-row: 2/3;\r\n        }\r\n        & :nth-child(3) {\r\n            grid-column: 1/3;\r\n            grid-row: 3/4;\r\n        }\r\n        & :nth-child(4) {\r\n            grid-column: 1/3;\r\n            grid-row: 4/5;\r\n        }\r\n        & :nth-child(5) {\r\n            grid-column: 1/3;\r\n            grid-row: 5/6;\r\n        }\r\n\r\n        &-item {\r\n            align-self: center;\r\n            justify-self: center;\r\n        }\r\n    }\r\n\r\n    &__help.sprint__help {\r\n        grid-template: repeat(2, 1fr) / 1fr;\r\n    }\r\n\r\n    &__start {\r\n        grid-column: 2/3;\r\n        grid-row: 3/4;\r\n        display: grid;\r\n    }\r\n\r\n    &__title {\r\n        grid-column: 2/3;\r\n        grid-row: 1/2;\r\n    }\r\n\r\n    &__desc {\r\n        grid-column: 2/3;\r\n        grid-row: 2/3;\r\n    }\r\n\r\n    &__icon {\r\n        grid-column: 1/2;\r\n        grid-row: 1/3;\r\n        justify-self: right;\r\n    }\r\n\r\n    &__audio {\r\n        display: grid;\r\n        grid-column: 2/3;\r\n        grid-row: 1/2;\r\n        justify-items: center;\r\n        align-items: center;\r\n    }\r\n\r\n    &__answers {\r\n        grid-column: 2/3;\r\n        grid-row: 2/3;\r\n        justify-items: center;\r\n        align-items: center;\r\n        display: grid;\r\n        grid-template: 1fr / 1fr repeat(5, auto) 1fr;\r\n        gap: 10px;\r\n        & :nth-child(1) {\r\n            grid-column: 2/3;\r\n        }\r\n        & :nth-child(2) {\r\n            grid-column: 3/4;\r\n        }\r\n        & :nth-child(3) {\r\n            grid-column: 4/5;\r\n        }\r\n        & :nth-child(4) {\r\n            grid-column: 5/6;\r\n        }\r\n        & :nth-child(5) {\r\n            grid-column: 6/7;\r\n        }\r\n        @media (max-width: 1300px) {\r\n            grid-template: repeat(5, 1fr) / 1fr auto 1fr;\r\n            & :nth-child(1) {\r\n                grid-column: 2/3;\r\n                grid-row: 1/2;\r\n            }\r\n            & :nth-child(2) {\r\n                grid-column: 2/3;\r\n                grid-row: 2/3;\r\n            }\r\n            & :nth-child(3) {\r\n                grid-column: 2/3;\r\n                grid-row: 3/4;\r\n            }\r\n            & :nth-child(4) {\r\n                grid-column: 2/3;\r\n                grid-row: 4/5;\r\n            }\r\n            & :nth-child(5) {\r\n                grid-column: 2/3;\r\n                grid-row: 5/6;\r\n            }\r\n        }\r\n    }\r\n\r\n    &__skip {\r\n        display: grid;\r\n        grid-column: 2/3;\r\n        grid-row: 3/4;\r\n        justify-items: center;\r\n        align-items: center;\r\n    }\r\n\r\n    &__timer-wrap {\r\n        display: grid;\r\n        grid-column: 2/3;\r\n        grid-row: 1/2;\r\n        justify-items: center;\r\n        align-items: center;\r\n    }\r\n\r\n    &__questions {\r\n        display: grid;\r\n        grid-column: 2/3;\r\n        grid-row: 2/3;\r\n        grid-template: 1fr 1fr 1fr/1fr;\r\n        justify-items: center;\r\n        align-items: center;\r\n    }\r\n\r\n    &__answer-btns {\r\n        display: grid;\r\n        grid-column: 2/3;\r\n        grid-row: 3/4;\r\n        justify-items: center;\r\n        align-items: center;\r\n        gap: 20px;\r\n        padding: 50px;\r\n        grid-template: 1fr / 1fr 300px 300px 1fr;\r\n        & :nth-child(1) {\r\n            grid-column: 2/3;\r\n        }\r\n        & :nth-child(2) {\r\n            grid-column: 3/4;\r\n        }\r\n    }\r\n}\r\n",".statistics {\r\n    display: grid;\r\n    grid-template: auto auto 1fr/1fr $grid-container-width 1fr;\r\n    gap: 30px;\r\n    &__today {\r\n        grid-column: 2/3;\r\n        grid-row: 1/2;\r\n        display: grid;\r\n        //grid-template: 100px auto / 1fr 1fr;\r\n        grid-template: 100px auto/1fr 1fr 1fr;\r\n        & :nth-child(2) {\r\n            grid-column: 1/2;\r\n            grid-row: 2/3;\r\n            justify-self: center;\r\n        }\r\n        & :nth-child(3) {\r\n            grid-column: 2/3;\r\n            grid-row: 2/3;\r\n            justify-self: center;\r\n        }\r\n        & :nth-child(4) {\r\n            grid-column: 3/4;\r\n            grid-row: 2/3;\r\n            justify-self: center;\r\n        }\r\n\r\n        &.hide-learnt {\r\n            grid-template: 100px auto / 1fr 1fr;\r\n            & :nth-child(4) {\r\n                display: none;\r\n            }\r\n        }\r\n    }\r\n\r\n    &__title {\r\n        grid-column: 1/4;\r\n        grid-row: 1/2;\r\n    }\r\n\r\n    &__games {\r\n        grid-column: 2/3;\r\n        grid-row: 2/3;\r\n        display: flex;\r\n        gap: 10px;\r\n        justify-content: center;\r\n    }\r\n\r\n    &__total {\r\n        grid-column: 2/3;\r\n        grid-row: 3/4;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        gap: 20px;\r\n        padding: 20px 0px;\r\n    }\r\n}","\r\n@import '../base/fonts';\r\n@import '../utils/mixines';\r\n@import '../utils/variables';\r\n\r\n.header {\r\n    grid-area: header;\r\n    background-color: $background-dark;\r\n    display: grid;\r\n    align-items: center;\r\n    grid-template: 1fr / 1fr 20% 70% 1fr;\r\n\r\n    &__logo-img {\r\n        width: 70px;\r\n        height: 70px;\r\n        padding: 5px;\r\n    }\r\n\r\n    &__logo {\r\n        display: grid;\r\n        grid-template: 1fr / 60px 1fr;\r\n        align-items: center;\r\n        grid-column: 2 / 3;\r\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-light, 1rem);\r\n        gap: 10px;\r\n    }\r\n}",".about {\r\n    padding: 50px 10px;\r\n    align-items: center;\r\n    grid-column: 2/3;\r\n    grid-row: 1/2;\r\n    display: grid;\r\n    grid-template: 1fr 3fr / 1fr $grid-container-width * 0.6 $grid-container-width * 0.4 1fr;\r\n    background-color: $background-light;\r\n    gap: 10px;\r\n\r\n    &__title {\r\n        grid-column: 2 / 3;\r\n        grid-row: 1 / 2;\r\n    }\r\n\r\n    &__text {\r\n        grid-column: 2 / 3;\r\n        grid-row: 2 / 3;\r\n        text-align: justify;\r\n        @include addFont('Philosopher', normal, 600, 3rem, 0.01em, $text-dark, 4rem);\r\n    }\r\n\r\n    &__image-wrap {\r\n        grid-column: 3 / 4;\r\n        grid-row: 1 / 3;\r\n        width: 100%;\r\n        height: 100%;\r\n        background-repeat: no-repeat;\r\n        background-size: cover;\r\n    }\r\n    &__image {\r\n        width: 100%;\r\n        height: 100%;\r\n        object-fit: contain;\r\n    }\r\n}\r\n",".scope {\r\n    padding: 70px 10px;\r\n    grid-column: 2/3;\r\n    grid-row: 2/3;\r\n    display: grid;\r\n    align-items: center;\r\n    grid-template: repeat(4, auto)/1fr repeat(2, calc(($grid-container-width - $grid-container-gap) * 0.5)) 1fr;;\r\n    background-color: $background-dark;\r\n    gap: $grid-container-gap;\r\n\r\n    &__title {\r\n        grid-column: 2 / 4;\r\n        grid-row: 1 / 2;\r\n        justify-self: center;\r\n        color: $text-light;\r\n    }\r\n\r\n    &__text {\r\n        text-align: justify;\r\n        grid-column: 2 / 4;\r\n        grid-row: 2 / 3;\r\n        @include addFont('Philosopher', normal, 600, 3rem, 0.01em, $text-light, 4rem);\r\n    }\r\n\r\n    & :nth-child(3) {\r\n        grid-column: 2 / 3;\r\n        grid-row: 3 / 4;\r\n    }\r\n    & :nth-child(4) {\r\n        grid-column: 3 / 4;\r\n        grid-row: 3 / 4;\r\n    }\r\n    & :nth-child(5) {\r\n        grid-column: 2 / 3;\r\n        grid-row: 4 / 5;\r\n    }\r\n    & :nth-child(6) {\r\n        grid-column: 3 / 4;\r\n        grid-row: 4 / 5;\r\n    }\r\n}\r\n",".team {\r\n    padding: 70px 10px;\r\n    grid-column: 2/3;\r\n    grid-row: 3/4;\r\n    display: grid;\r\n    align-items: center;\r\n    grid-template: 5rem auto auto/ 1fr repeat(2, calc(($grid-container-width - $grid-container-gap) * 0.5)) 1fr;\r\n\r\n    background-color: $background-light;\r\n    gap: $grid-container-gap;\r\n\r\n    &__title {\r\n        grid-column: 2 / 4;\r\n        grid-row: 1 / 2;\r\n        justify-self: center;\r\n    }\r\n\r\n    & :nth-child(2) {\r\n        grid-column: 2 / 3;\r\n        grid-row: 2 / 3;\r\n    }\r\n\r\n    & :nth-child(3) {\r\n        grid-column: 3 / 4;\r\n        grid-row: 2 / 3;\r\n    }\r\n\r\n    & :nth-child(4) {\r\n        grid-column: 2 / 3;\r\n        grid-row: 3 / 4;\r\n    }\r\n\r\n    & :nth-child(5) {\r\n        grid-column: 3 / 4;\r\n        grid-row: 3 / 4;\r\n    }\r\n}","@import '../utils/variables';\r\n\r\n.footer {\r\n    grid-area: footer;\r\n    display: grid;\r\n    align-items: center;\r\n\r\n    grid-template: 1fr / 1fr minmax(auto, 360px) minmax(auto, 360px) minmax(auto, 360px) minmax(auto, 360px) 1fr;\r\n    background-color: $background-dark;\r\n\r\n    &.hidden {\r\n        display: none;\r\n    }\r\n\r\n    &__githublink {\r\n        grid-column: 2 / 3;\r\n        justify-self: center;\r\n        width: 70px;\r\n        height: 70px;\r\n    }\r\n\r\n    &__links {\r\n        grid-column: 3 / 4;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        padding: 10px;\r\n        gap: 10px;\r\n        transition: all .5s;\r\n        &-item {\r\n            @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-light, 1rem);\r\n            &:hover {\r\n                color: $text-white;\r\n                transition: all .5s;\r\n            }\r\n        }\r\n    }\r\n\r\n    &__copyrights {\r\n        grid-column: 4 / 5;\r\n        justify-self: center;\r\n        font-size: 14px;\r\n        color: $border-color-dark;\r\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-light, 1rem);\r\n        transition: all .5s;\r\n    }\r\n\r\n    &__rsschoollink {\r\n        grid-column: 5 / 6;\r\n        justify-self: center;\r\n        width: 150px;\r\n        height: 50px;\r\n        transition: all 1s;\r\n        background-repeat: no-repeat;\r\n    }\r\n}","@import '../../utils/variables';\r\n@import '../../utils/mixines';\r\n\r\n.choice {\r\n    gap: 5px;\r\n\r\n    &__title {\r\n        @include addFont('Philosopher', normal, 600, 5rem, 0.06em, $text-dark, 6rem);\r\n        padding: 10px 0px;\r\n    }\r\n\r\n    &__hint {\r\n        @include addFont('Philosopher', normal, 600, 3rem, 0.06em, $text-dark, 4rem);\r\n        padding: 10px 0px;\r\n    }\r\n\r\n    &__wrap {\r\n        display: grid;\r\n        grid-template: 3rem 1fr / 70% 30%;\r\n        width: 400px;\r\n        height: 220px;\r\n        border-radius: 10px;\r\n        overflow: hidden;\r\n        padding: 10px;\r\n        gap: 5px;\r\n        &.audio {\r\n            background-color: $audio-game-color;\r\n        }\r\n        &.sprint {\r\n            background-color: $sprint-game-color;\r\n        }\r\n    }\r\n\r\n    &__name {\r\n        grid-column: 1/3;\r\n        grid-row: 1/2;\r\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-light, 1rem);\r\n        align-self: center;\r\n        justify-self: center;\r\n    }\r\n\r\n    &__img {\r\n        grid-column: 1/2;\r\n        grid-row: 2/3;\r\n        width: 100%;\r\n        height: 100%;\r\n        border-radius: 10px;\r\n    }\r\n\r\n    &__btn {\r\n        grid-column: 2/3;\r\n        grid-row: 1/3;\r\n        width: 70px;\r\n        height: 70px;\r\n        align-self: center;\r\n        justify-self: center;\r\n        border-radius: 10px;\r\n        box-shadow: 2px 2px 5px $background-dark;\r\n        transition: .1s all ease;\r\n        &:hover {\r\n            transform: translateY(3px);\r\n            transition: .1s all ease;\r\n        }\r\n    }\r\n\r\n    &__levels {\r\n        width: 400px;\r\n        height: 200px;\r\n        display: grid;\r\n        grid-template: repeat(2, 1fr) / repeat(3, 1fr);\r\n        gap: 10px;\r\n    }\r\n\r\n    &__levels :nth-child(1) {\r\n        grid-column: 1/2;\r\n        grid-row: 1/2;\r\n        background-color: $level-A1-color;\r\n        &:hover {\r\n            background-color: $level-A1-color-alpha;\r\n        }\r\n    }\r\n    \r\n    &__levels :nth-child(2) {\r\n        grid-column: 1/2;\r\n        grid-row: 2/3;\r\n        background-color: $level-A2-color;\r\n        &:hover {\r\n            background-color: $level-A1-color-alpha;\r\n        }\r\n    }\r\n\r\n    &__levels :nth-child(3) {\r\n        grid-column: 2/3;\r\n        grid-row: 1/2;\r\n        background-color: $level-B1-color;\r\n        &:hover {\r\n            background-color: $level-B1-color-alpha;\r\n        }\r\n    }\r\n\r\n    &__levels :nth-child(4) {\r\n        grid-column: 2/3;\r\n        grid-row: 2/3;\r\n        background-color: $level-B2-color;\r\n        &:hover {\r\n            background-color: $level-B2-color-alpha;\r\n        }\r\n    }\r\n\r\n    &__levels :nth-child(5) {\r\n        grid-column: 3/4;\r\n        grid-row: 1/2;\r\n        background-color: $level-C1-color;\r\n        &:hover {\r\n            background-color: $level-C1-color-alpha;\r\n        }\r\n    }\r\n\r\n    &__levels :nth-child(6) {\r\n        grid-column: 3/4;\r\n        grid-row: 2/3;\r\n        background-color: $level-C2-color;\r\n        &:hover {\r\n            background-color: $level-C2-color-alpha;\r\n        }\r\n    }\r\n    \r\n    &__level {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        border-radius: 10px;\r\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-dark, 1rem);\r\n        transition: .2s all ease;\r\n        user-select: none;\r\n        &:hover {\r\n            transition: .2s all ease;\r\n            color: $level-selected-text;\r\n        }\r\n        &:active {\r\n            transform: translateY(5px);\r\n            transition: .2s all ease;\r\n        }\r\n        &.selected {\r\n            border: 10px solid $level-selected;\r\n            color: $level-selected-text;\r\n        }\r\n    }\r\n}","@import '../../utils/variables';\r\n@import '../../utils/mixines';\r\n\r\n.game {\r\n    gap: 20px;\r\n\r\n    &__title {\r\n        @include addFont('Philosopher', normal, 600, 5rem, 0.01em, $text-dark, 5.2rem);\r\n        padding: 20px;\r\n    }\r\n\r\n    &__desc {\r\n        @include addFont('Philosopher', normal, 400, 3rem, 0.01em, $text-dark, 3.2rem);\r\n        padding: 20px; \r\n    }\r\n\r\n    &__icon {\r\n        width: 100%;\r\n        height: auto;\r\n    }\r\n\r\n    &__help {\r\n        border: 3px solid $background-dark;\r\n        box-shadow: 2px 2px 5px $background-dark;\r\n        border: 3px solid #3a4b83;\r\n        box-shadow: 2px 2px 5px #3a4b83;\r\n        width: auto;\r\n    \r\n        border-radius: 15px;\r\n        padding: 30px;\r\n    }\r\n\r\n    &__help-item {\r\n        @include addFont('Philosopher', normal, 600, 1.5rem, 0.01em, $text-dark, 2rem);\r\n    }\r\n\r\n    &__start {\r\n        padding: 20px;\r\n    }\r\n\r\n    &__audio-btn {\r\n        width: 200px;\r\n        height: 200px;\r\n        box-shadow:  2px 2px 5px $background-dark;\r\n        border-radius: 50%;\r\n        align-self: center;\r\n        overflow: hidden;\r\n\r\n        //game__audio-question game__audio-answer\r\n        .game__audio-question, \r\n        .game__audio-answer {\r\n            width: 100%;\r\n            height: 100%;\r\n            object-fit: cover;\r\n        }\r\n        \r\n        .game__audio-answer {\r\n            display: none;\r\n        }\r\n\r\n        &.answer {\r\n            .game__audio-answer {\r\n                display: block;\r\n            }\r\n            .game__audio-question {\r\n                display: none;\r\n            }\r\n        }\r\n\r\n        &:hover {\r\n            box-shadow: 3px 3px 7px $background-dark;\r\n            transition: .2s all;\r\n        }\r\n    }\r\n\r\n    &__word-img {\r\n        width: 150px;\r\n        height: 150px;\r\n        border-radius: 50%;\r\n    }\r\n\r\n    &__word-img &__answer-img {\r\n        display: none;\r\n    }\r\n\r\n    &__word-img.answer-ok &__answer-img {\r\n        display: block;\r\n    }\r\n\r\n    &__word-img.answer-ok &__question-img {\r\n        display: none;\r\n    }\r\n\r\n    &__answer-img,\r\n    &__question-img {\r\n        width: 100%;\r\n        height: 100%;\r\n        object-fit: cover;\r\n    }\r\n\r\n    &__word, \r\n    &__word-translate {\r\n        padding: 1rem;\r\n        @include addFont('Philosopher', normal, 600, 2rem, 0.06em, $text-dark, 1rem);\r\n    }\r\n\r\n    &__test-field {\r\n        position: absolute;\r\n        width: 150px;\r\n        height: 50px;\r\n        border: 1px solid black;\r\n        font-size: 20px;\r\n        left: 50%;\r\n        top: 30%;\r\n    }\r\n}\r\n\r\n.active {\r\n    transition: .2s all;\r\n    transform: translateY(3px);\r\n}",".modal {\r\n    position: absolute;\r\n    z-index: 10;\r\n    top: 0;\r\n    right: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-content: center;\r\n    justify-content: flex-start;\r\n    padding: 3rem;\r\n    min-width: 40vw;\r\n    height: 100vh;\r\n\r\n    .modal__title {\r\n        margin-bottom: 2rem;\r\n    }\r\n\r\n    .modal__form {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 1rem;\r\n        margin-bottom: 2rem;\r\n\r\n        .registration__regbtn {\r\n            width: fit-content;\r\n            padding: 0 1rem;\r\n            margin-top: 2rem;\r\n        }\r\n\r\n        .form-input {\r\n            line-height: 2rem;\r\n        }\r\n    }\r\n}\r\n\r\n.modal_hidden,\r\n.btn_hidden {\r\n    display: none;\r\n}\r\n\r\n.wrapper {\r\n    position: relative;\r\n}","@import '../utils/variables';\r\n\r\n.blackout {\r\n    width: 100vw;\r\n    height: 100vh;\r\n    position: absolute;\r\n    top: 0;\r\n    z-index: 5;\r\n    background-color: $blackout;\r\n}\r\n\r\n.overflow-hidden {\r\n    overflow: hidden;\r\n}\r\n\r\n.blackout_hidden {\r\n    display: none;\r\n}\r\n\r\n.body {\r\n    position: relative;\r\n}",".body_hidden {\r\n    display: none;\r\n}",".statistics {\r\n    padding: 50px 0px;\r\n    position: relative;\r\n    overflow: hidden;\r\n \r\n    &__title {\r\n        text-align: center;\r\n    }\r\n\r\n    &__today-item {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        padding: 20px;\r\n        width: 200px;\r\n    }\r\n\r\n    &__value {\r\n        @include addFont('Philosopher', normal, 600, 7rem, 0.01em, $text-dark, 7.5rem);\r\n    }\r\n\r\n    &__hint {\r\n        @include addFont('Philosopher', normal, 400, 2rem, 0.01em, $text-dark, 2.2rem);\r\n        text-align: center\r\n    }\r\n\r\n    &__total-title {\r\n        text-align: center\r\n    }\r\n\r\n    &__total-desc {\r\n        @include addFont('Philosopher', normal, 600, 3rem, 0.01em, $text-dark, 4rem);\r\n        text-align: center;\r\n    }\r\n\r\n    &__total-graph-wrap {\r\n        width: 80%;\r\n        height: 500px;\r\n        background-color: $background-dark;\r\n    }\r\n}\r\n",".handbook {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 40px 20px;\r\n  gap: 20px;\r\n}\r\n\r\n.handbook__views {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.active-handbook-page {\r\n  color: $text-dark;\r\n}\r\n\r\n.handbook__levels .active-level-card:nth-child(1),\r\n.A1 .active-word-card,\r\n.A1 .word-card-info__complicated-words-button,\r\n.A1 .word-card-info__play-audio-button,\r\n.A1 .word-card-info__headings,\r\n.A1 .word-card-info__learned-words-button,\r\n.A1 .words-pagination__curr-page {\r\n  background-color: $handbook-A1-lvl-bg;\r\n}\r\n\r\n.handbook__levels .active-level-card:nth-child(2),\r\n.A2 .active-word-card,\r\n.A2 .word-card-info__complicated-words-button,\r\n.A2 .word-card-info__play-audio-button,\r\n.A2 .word-card-info__headings,\r\n.A2 .word-card-info__learned-words-button,\r\n.A2 .words-pagination__curr-page {\r\n  background-color: $handbook-A2-lvl-bg;\r\n}\r\n\r\n.handbook__levels .active-level-card:nth-child(3),\r\n.B1 .active-word-card,\r\n.B1 .word-card-info__complicated-words-button,\r\n.B1 .word-card-info__play-audio-button,\r\n.B1 .word-card-info__headings,\r\n.B1 .word-card-info__learned-words-button,\r\n.B1 .words-pagination__curr-page {\r\n  background-color: $handbook-B1-lvl-bg;\r\n}\r\n\r\n.handbook__levels .active-level-card:nth-child(4),\r\n.B2 .active-word-card,\r\n.B2 .word-card-info__complicated-words-button,\r\n.B2 .word-card-info__play-audio-button,\r\n.B2 .word-card-info__headings,\r\n.B2 .word-card-info__learned-words-button,\r\n.B2 .words-pagination__curr-page {\r\nbackground-color: $handbook-B2-lvl-bg;\r\n}\r\n\r\n.handbook__levels .active-level-card:nth-child(5),\r\n.C1 .active-word-card,\r\n.C1 .word-card-info__complicated-words-button,\r\n.C1 .word-card-info__play-audio-button,\r\n.C1 .word-card-info__headings,\r\n.C1 .word-card-info__learned-words-button,\r\n.C1 .words-pagination__curr-page {\r\n  background-color: $handbook-C1-lvl-bg;\r\n}\r\n\r\n.handbook__levels .active-level-card:nth-child(6),\r\n.C2 .active-word-card,\r\n.C2 .word-card-info__complicated-words-button,\r\n.C2 .word-card-info__play-audio-button,\r\n.C2 .word-card-info__headings,\r\n.C2 .word-card-info__learned-words-button,\r\n.C2 .words-pagination__curr-page {\r\n  background-color: $handbook-C2-lvl-bg;\r\n}\r\n\r\n.complicated-words .active-word-card,\r\n.complicated-words .word-card-info__complicated-words-button,\r\n.complicated-words .word-card-info__play-audio-button,\r\n.complicated-words .word-card-info__headings,\r\n.complicated-words .word-card-info__learned-words-button,\r\n.complicated-words .word-card-info__remove-button,\r\n.complicated-words .words-pagination__curr-page  {\r\n  background-color: $handbook-complicated-words;\r\n}\r\n\r\n.learned::after {\r\n  background: center/cover $text-white no-repeat url('./public/assets/icons/handbook-learned.svg');\r\n}\r\n\r\n.hard::after {\r\n  background: center/cover $text-white no-repeat url('./public/assets/icons/handbook-hard.svg');\r\n}\r\n\r\n.hard::after, .learned::after {\r\n  position: absolute;\r\n  content: '';\r\n  top: 5px;\r\n  right: 5px;\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 50%;\r\n}\r\n\r\n.all-words-learned::after {\r\n  position: absolute;\r\n  content: '';\r\n  top: 2px;\r\n  right: 2px;\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 50%;\r\n  border: 3px solid white;\r\n}\r\n\r\n.page-learned::after {\r\n  position: absolute;\r\n  content: '';\r\n  top: -2px;\r\n  left: 90px;\r\n  width: 35px;\r\n  height: 35px;\r\n  border-radius: 50%;\r\n  background: center/cover $handbook-card-bg no-repeat url('./public/assets/icons/handbook-learned.svg');\r\n}\r\n\r\n.disabled {\r\n  pointer-events: none;\r\n}\r\n\r\n.disabled .handbook__game-title {\r\n  color: $handbook-disabled-font-clr;\r\n  backdrop-filter: blur(2px) grayscale(100%);\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n}"],sourceRoot:""}]);const S=m},3645:r=>{"use strict";r.exports=function(r){var e=[];return e.toString=function(){return this.map((function(e){var n="",t=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),t&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=r(e),t&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(r,n,t,i,o){"string"==typeof r&&(r=[[null,r,void 0]]);var a={};if(t)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<r.length;c++){var A=[].concat(r[c]);t&&a[A[0]]||(void 0!==o&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=o),n&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=n):A[2]=n),i&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=i):A[4]="".concat(i)),e.push(A))}},e}},1667:r=>{"use strict";r.exports=function(r,e){return e||(e={}),r?(r=String(r.__esModule?r.default:r),/^['"].*['"]$/.test(r)&&(r=r.slice(1,-1)),e.hash&&(r+=e.hash),/["'() \t\n]|(%20)/.test(r)||e.needQuotes?'"'.concat(r.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):r):r}},7537:r=>{"use strict";r.exports=function(r){var e=r[1],n=r[3];if(!n)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(i," */"),a=n.sources.map((function(r){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(r," */")}));return[e].concat(a).concat([o]).join("\n")}return[e].join("\n")}},6486:function(r,e,n){var t;r=n.nmd(r),function(){var i,o="Expected a function",a="__lodash_hash_undefined__",s="__lodash_placeholder__",l=32,c=128,A=1/0,d=9007199254740991,u=NaN,p=4294967295,h=[["ary",c],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",l],["partialRight",64],["rearg",256]],C="[object Arguments]",g="[object Array]",f="[object Boolean]",m="[object Date]",_="[object Error]",w="[object Function]",B="[object GeneratorFunction]",b="[object Map]",v="[object Number]",x="[object Object]",y="[object Promise]",k="[object RegExp]",E="[object Set]",S="[object String]",D="[object Symbol]",I="[object WeakMap]",L="[object ArrayBuffer]",j="[object DataView]",W="[object Float32Array]",q="[object Float64Array]",$="[object Int8Array]",R="[object Int16Array]",G="[object Int32Array]",P="[object Uint8Array]",Y="[object Uint8ClampedArray]",U="[object Uint16Array]",F="[object Uint32Array]",T=/\b__p \+= '';/g,J=/\b(__p \+=) '' \+/g,O=/(__e\(.*?\)|\b__t\)) \+\n'';/g,z=/&(?:amp|lt|gt|quot|#39);/g,H=/[&<>"']/g,N=RegExp(z.source),Q=RegExp(H.source),K=/<%-([\s\S]+?)%>/g,M=/<%([\s\S]+?)%>/g,V=/<%=([\s\S]+?)%>/g,X=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Z=/^\w*$/,rr=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,er=/[\\^$.*+?()[\]{}|]/g,nr=RegExp(er.source),tr=/^\s+/,ir=/\s/,or=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ar=/\{\n\/\* \[wrapped with (.+)\] \*/,sr=/,? & /,lr=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,cr=/[()=,{}\[\]\/\s]/,Ar=/\\(\\)?/g,dr=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ur=/\w*$/,pr=/^[-+]0x[0-9a-f]+$/i,hr=/^0b[01]+$/i,Cr=/^\[object .+?Constructor\]$/,gr=/^0o[0-7]+$/i,fr=/^(?:0|[1-9]\d*)$/,mr=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,_r=/($^)/,wr=/['\n\r\u2028\u2029\\]/g,Br="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",br="a-z\\xdf-\\xf6\\xf8-\\xff",vr="A-Z\\xc0-\\xd6\\xd8-\\xde",xr="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",yr="["+xr+"]",kr="["+Br+"]",Er="\\d+",Sr="["+br+"]",Dr="[^\\ud800-\\udfff"+xr+Er+"\\u2700-\\u27bf"+br+vr+"]",Ir="\\ud83c[\\udffb-\\udfff]",Lr="[^\\ud800-\\udfff]",jr="(?:\\ud83c[\\udde6-\\uddff]){2}",Wr="[\\ud800-\\udbff][\\udc00-\\udfff]",qr="["+vr+"]",$r="(?:"+Sr+"|"+Dr+")",Rr="(?:"+qr+"|"+Dr+")",Gr="(?:['’](?:d|ll|m|re|s|t|ve))?",Pr="(?:['’](?:D|LL|M|RE|S|T|VE))?",Yr="(?:"+kr+"|"+Ir+")?",Ur="[\\ufe0e\\ufe0f]?",Fr=Ur+Yr+"(?:\\u200d(?:"+[Lr,jr,Wr].join("|")+")"+Ur+Yr+")*",Tr="(?:"+["[\\u2700-\\u27bf]",jr,Wr].join("|")+")"+Fr,Jr="(?:"+[Lr+kr+"?",kr,jr,Wr,"[\\ud800-\\udfff]"].join("|")+")",Or=RegExp("['’]","g"),zr=RegExp(kr,"g"),Hr=RegExp(Ir+"(?="+Ir+")|"+Jr+Fr,"g"),Nr=RegExp([qr+"?"+Sr+"+"+Gr+"(?="+[yr,qr,"$"].join("|")+")",Rr+"+"+Pr+"(?="+[yr,qr+$r,"$"].join("|")+")",qr+"?"+$r+"+"+Gr,qr+"+"+Pr,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Er,Tr].join("|"),"g"),Qr=RegExp("[\\u200d\\ud800-\\udfff"+Br+"\\ufe0e\\ufe0f]"),Kr=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Mr=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Vr=-1,Xr={};Xr[W]=Xr[q]=Xr[$]=Xr[R]=Xr[G]=Xr[P]=Xr[Y]=Xr[U]=Xr[F]=!0,Xr[C]=Xr[g]=Xr[L]=Xr[f]=Xr[j]=Xr[m]=Xr[_]=Xr[w]=Xr[b]=Xr[v]=Xr[x]=Xr[k]=Xr[E]=Xr[S]=Xr[I]=!1;var Zr={};Zr[C]=Zr[g]=Zr[L]=Zr[j]=Zr[f]=Zr[m]=Zr[W]=Zr[q]=Zr[$]=Zr[R]=Zr[G]=Zr[b]=Zr[v]=Zr[x]=Zr[k]=Zr[E]=Zr[S]=Zr[D]=Zr[P]=Zr[Y]=Zr[U]=Zr[F]=!0,Zr[_]=Zr[w]=Zr[I]=!1;var re={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ee=parseFloat,ne=parseInt,te="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,ie="object"==typeof self&&self&&self.Object===Object&&self,oe=te||ie||Function("return this")(),ae=e&&!e.nodeType&&e,se=ae&&r&&!r.nodeType&&r,le=se&&se.exports===ae,ce=le&&te.process,Ae=function(){try{return se&&se.require&&se.require("util").types||ce&&ce.binding&&ce.binding("util")}catch(r){}}(),de=Ae&&Ae.isArrayBuffer,ue=Ae&&Ae.isDate,pe=Ae&&Ae.isMap,he=Ae&&Ae.isRegExp,Ce=Ae&&Ae.isSet,ge=Ae&&Ae.isTypedArray;function fe(r,e,n){switch(n.length){case 0:return r.call(e);case 1:return r.call(e,n[0]);case 2:return r.call(e,n[0],n[1]);case 3:return r.call(e,n[0],n[1],n[2])}return r.apply(e,n)}function me(r,e,n,t){for(var i=-1,o=null==r?0:r.length;++i<o;){var a=r[i];e(t,a,n(a),r)}return t}function _e(r,e){for(var n=-1,t=null==r?0:r.length;++n<t&&!1!==e(r[n],n,r););return r}function we(r,e){for(var n=null==r?0:r.length;n--&&!1!==e(r[n],n,r););return r}function Be(r,e){for(var n=-1,t=null==r?0:r.length;++n<t;)if(!e(r[n],n,r))return!1;return!0}function be(r,e){for(var n=-1,t=null==r?0:r.length,i=0,o=[];++n<t;){var a=r[n];e(a,n,r)&&(o[i++]=a)}return o}function ve(r,e){return!(null==r||!r.length)&&We(r,e,0)>-1}function xe(r,e,n){for(var t=-1,i=null==r?0:r.length;++t<i;)if(n(e,r[t]))return!0;return!1}function ye(r,e){for(var n=-1,t=null==r?0:r.length,i=Array(t);++n<t;)i[n]=e(r[n],n,r);return i}function ke(r,e){for(var n=-1,t=e.length,i=r.length;++n<t;)r[i+n]=e[n];return r}function Ee(r,e,n,t){var i=-1,o=null==r?0:r.length;for(t&&o&&(n=r[++i]);++i<o;)n=e(n,r[i],i,r);return n}function Se(r,e,n,t){var i=null==r?0:r.length;for(t&&i&&(n=r[--i]);i--;)n=e(n,r[i],i,r);return n}function De(r,e){for(var n=-1,t=null==r?0:r.length;++n<t;)if(e(r[n],n,r))return!0;return!1}var Ie=Ge("length");function Le(r,e,n){var t;return n(r,(function(r,n,i){if(e(r,n,i))return t=n,!1})),t}function je(r,e,n,t){for(var i=r.length,o=n+(t?1:-1);t?o--:++o<i;)if(e(r[o],o,r))return o;return-1}function We(r,e,n){return e==e?function(r,e,n){for(var t=n-1,i=r.length;++t<i;)if(r[t]===e)return t;return-1}(r,e,n):je(r,$e,n)}function qe(r,e,n,t){for(var i=n-1,o=r.length;++i<o;)if(t(r[i],e))return i;return-1}function $e(r){return r!=r}function Re(r,e){var n=null==r?0:r.length;return n?Ue(r,e)/n:u}function Ge(r){return function(e){return null==e?i:e[r]}}function Pe(r){return function(e){return null==r?i:r[e]}}function Ye(r,e,n,t,i){return i(r,(function(r,i,o){n=t?(t=!1,r):e(n,r,i,o)})),n}function Ue(r,e){for(var n,t=-1,o=r.length;++t<o;){var a=e(r[t]);a!==i&&(n=n===i?a:n+a)}return n}function Fe(r,e){for(var n=-1,t=Array(r);++n<r;)t[n]=e(n);return t}function Te(r){return r?r.slice(0,sn(r)+1).replace(tr,""):r}function Je(r){return function(e){return r(e)}}function Oe(r,e){return ye(e,(function(e){return r[e]}))}function ze(r,e){return r.has(e)}function He(r,e){for(var n=-1,t=r.length;++n<t&&We(e,r[n],0)>-1;);return n}function Ne(r,e){for(var n=r.length;n--&&We(e,r[n],0)>-1;);return n}function Qe(r,e){for(var n=r.length,t=0;n--;)r[n]===e&&++t;return t}var Ke=Pe({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Me=Pe({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Ve(r){return"\\"+re[r]}function Xe(r){return Qr.test(r)}function Ze(r){var e=-1,n=Array(r.size);return r.forEach((function(r,t){n[++e]=[t,r]})),n}function rn(r,e){return function(n){return r(e(n))}}function en(r,e){for(var n=-1,t=r.length,i=0,o=[];++n<t;){var a=r[n];a!==e&&a!==s||(r[n]=s,o[i++]=n)}return o}function nn(r){var e=-1,n=Array(r.size);return r.forEach((function(r){n[++e]=r})),n}function tn(r){var e=-1,n=Array(r.size);return r.forEach((function(r){n[++e]=[r,r]})),n}function on(r){return Xe(r)?function(r){for(var e=Hr.lastIndex=0;Hr.test(r);)++e;return e}(r):Ie(r)}function an(r){return Xe(r)?function(r){return r.match(Hr)||[]}(r):function(r){return r.split("")}(r)}function sn(r){for(var e=r.length;e--&&ir.test(r.charAt(e)););return e}var ln=Pe({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),cn=function r(e){var n,t=(e=null==e?oe:cn.defaults(oe.Object(),e,cn.pick(oe,Mr))).Array,ir=e.Date,Br=e.Error,br=e.Function,vr=e.Math,xr=e.Object,yr=e.RegExp,kr=e.String,Er=e.TypeError,Sr=t.prototype,Dr=br.prototype,Ir=xr.prototype,Lr=e["__core-js_shared__"],jr=Dr.toString,Wr=Ir.hasOwnProperty,qr=0,$r=(n=/[^.]+$/.exec(Lr&&Lr.keys&&Lr.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Rr=Ir.toString,Gr=jr.call(xr),Pr=oe._,Yr=yr("^"+jr.call(Wr).replace(er,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ur=le?e.Buffer:i,Fr=e.Symbol,Tr=e.Uint8Array,Jr=Ur?Ur.allocUnsafe:i,Hr=rn(xr.getPrototypeOf,xr),Qr=xr.create,re=Ir.propertyIsEnumerable,te=Sr.splice,ie=Fr?Fr.isConcatSpreadable:i,ae=Fr?Fr.iterator:i,se=Fr?Fr.toStringTag:i,ce=function(){try{var r=co(xr,"defineProperty");return r({},"",{}),r}catch(r){}}(),Ae=e.clearTimeout!==oe.clearTimeout&&e.clearTimeout,Ie=ir&&ir.now!==oe.Date.now&&ir.now,Pe=e.setTimeout!==oe.setTimeout&&e.setTimeout,An=vr.ceil,dn=vr.floor,un=xr.getOwnPropertySymbols,pn=Ur?Ur.isBuffer:i,hn=e.isFinite,Cn=Sr.join,gn=rn(xr.keys,xr),fn=vr.max,mn=vr.min,_n=ir.now,wn=e.parseInt,Bn=vr.random,bn=Sr.reverse,vn=co(e,"DataView"),xn=co(e,"Map"),yn=co(e,"Promise"),kn=co(e,"Set"),En=co(e,"WeakMap"),Sn=co(xr,"create"),Dn=En&&new En,In={},Ln=Yo(vn),jn=Yo(xn),Wn=Yo(yn),qn=Yo(kn),$n=Yo(En),Rn=Fr?Fr.prototype:i,Gn=Rn?Rn.valueOf:i,Pn=Rn?Rn.toString:i;function Yn(r){if(ns(r)&&!za(r)&&!(r instanceof Jn)){if(r instanceof Tn)return r;if(Wr.call(r,"__wrapped__"))return Uo(r)}return new Tn(r)}var Un=function(){function r(){}return function(e){if(!es(e))return{};if(Qr)return Qr(e);r.prototype=e;var n=new r;return r.prototype=i,n}}();function Fn(){}function Tn(r,e){this.__wrapped__=r,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=i}function Jn(r){this.__wrapped__=r,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function On(r){var e=-1,n=null==r?0:r.length;for(this.clear();++e<n;){var t=r[e];this.set(t[0],t[1])}}function zn(r){var e=-1,n=null==r?0:r.length;for(this.clear();++e<n;){var t=r[e];this.set(t[0],t[1])}}function Hn(r){var e=-1,n=null==r?0:r.length;for(this.clear();++e<n;){var t=r[e];this.set(t[0],t[1])}}function Nn(r){var e=-1,n=null==r?0:r.length;for(this.__data__=new Hn;++e<n;)this.add(r[e])}function Qn(r){var e=this.__data__=new zn(r);this.size=e.size}function Kn(r,e){var n=za(r),t=!n&&Oa(r),i=!n&&!t&&Ka(r),o=!n&&!t&&!i&&As(r),a=n||t||i||o,s=a?Fe(r.length,kr):[],l=s.length;for(var c in r)!e&&!Wr.call(r,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||fo(c,l))||s.push(c);return s}function Mn(r){var e=r.length;return e?r[Ht(0,e-1)]:i}function Vn(r,e){return qo(Ei(r),at(e,0,r.length))}function Xn(r){return qo(Ei(r))}function Zn(r,e,n){(n!==i&&!Fa(r[e],n)||n===i&&!(e in r))&&it(r,e,n)}function rt(r,e,n){var t=r[e];Wr.call(r,e)&&Fa(t,n)&&(n!==i||e in r)||it(r,e,n)}function et(r,e){for(var n=r.length;n--;)if(Fa(r[n][0],e))return n;return-1}function nt(r,e,n,t){return dt(r,(function(r,i,o){e(t,r,n(r),o)})),t}function tt(r,e){return r&&Si(e,js(e),r)}function it(r,e,n){"__proto__"==e&&ce?ce(r,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):r[e]=n}function ot(r,e){for(var n=-1,o=e.length,a=t(o),s=null==r;++n<o;)a[n]=s?i:Es(r,e[n]);return a}function at(r,e,n){return r==r&&(n!==i&&(r=r<=n?r:n),e!==i&&(r=r>=e?r:e)),r}function st(r,e,n,t,o,a){var s,l=1&e,c=2&e,A=4&e;if(n&&(s=o?n(r,t,o,a):n(r)),s!==i)return s;if(!es(r))return r;var d=za(r);if(d){if(s=function(r){var e=r.length,n=new r.constructor(e);return e&&"string"==typeof r[0]&&Wr.call(r,"index")&&(n.index=r.index,n.input=r.input),n}(r),!l)return Ei(r,s)}else{var u=po(r),p=u==w||u==B;if(Ka(r))return Bi(r,l);if(u==x||u==C||p&&!o){if(s=c||p?{}:Co(r),!l)return c?function(r,e){return Si(r,uo(r),e)}(r,function(r,e){return r&&Si(e,Ws(e),r)}(s,r)):function(r,e){return Si(r,Ao(r),e)}(r,tt(s,r))}else{if(!Zr[u])return o?r:{};s=function(r,e,n){var t,i=r.constructor;switch(e){case L:return bi(r);case f:case m:return new i(+r);case j:return function(r,e){var n=e?bi(r.buffer):r.buffer;return new r.constructor(n,r.byteOffset,r.byteLength)}(r,n);case W:case q:case $:case R:case G:case P:case Y:case U:case F:return vi(r,n);case b:return new i;case v:case S:return new i(r);case k:return function(r){var e=new r.constructor(r.source,ur.exec(r));return e.lastIndex=r.lastIndex,e}(r);case E:return new i;case D:return t=r,Gn?xr(Gn.call(t)):{}}}(r,u,l)}}a||(a=new Qn);var h=a.get(r);if(h)return h;a.set(r,s),ss(r)?r.forEach((function(t){s.add(st(t,e,n,t,r,a))})):ts(r)&&r.forEach((function(t,i){s.set(i,st(t,e,n,i,r,a))}));var g=d?i:(A?c?no:eo:c?Ws:js)(r);return _e(g||r,(function(t,i){g&&(t=r[i=t]),rt(s,i,st(t,e,n,i,r,a))})),s}function lt(r,e,n){var t=n.length;if(null==r)return!t;for(r=xr(r);t--;){var o=n[t],a=e[o],s=r[o];if(s===i&&!(o in r)||!a(s))return!1}return!0}function ct(r,e,n){if("function"!=typeof r)throw new Er(o);return Io((function(){r.apply(i,n)}),e)}function At(r,e,n,t){var i=-1,o=ve,a=!0,s=r.length,l=[],c=e.length;if(!s)return l;n&&(e=ye(e,Je(n))),t?(o=xe,a=!1):e.length>=200&&(o=ze,a=!1,e=new Nn(e));r:for(;++i<s;){var A=r[i],d=null==n?A:n(A);if(A=t||0!==A?A:0,a&&d==d){for(var u=c;u--;)if(e[u]===d)continue r;l.push(A)}else o(e,d,t)||l.push(A)}return l}Yn.templateSettings={escape:K,evaluate:M,interpolate:V,variable:"",imports:{_:Yn}},Yn.prototype=Fn.prototype,Yn.prototype.constructor=Yn,Tn.prototype=Un(Fn.prototype),Tn.prototype.constructor=Tn,Jn.prototype=Un(Fn.prototype),Jn.prototype.constructor=Jn,On.prototype.clear=function(){this.__data__=Sn?Sn(null):{},this.size=0},On.prototype.delete=function(r){var e=this.has(r)&&delete this.__data__[r];return this.size-=e?1:0,e},On.prototype.get=function(r){var e=this.__data__;if(Sn){var n=e[r];return n===a?i:n}return Wr.call(e,r)?e[r]:i},On.prototype.has=function(r){var e=this.__data__;return Sn?e[r]!==i:Wr.call(e,r)},On.prototype.set=function(r,e){var n=this.__data__;return this.size+=this.has(r)?0:1,n[r]=Sn&&e===i?a:e,this},zn.prototype.clear=function(){this.__data__=[],this.size=0},zn.prototype.delete=function(r){var e=this.__data__,n=et(e,r);return!(n<0||(n==e.length-1?e.pop():te.call(e,n,1),--this.size,0))},zn.prototype.get=function(r){var e=this.__data__,n=et(e,r);return n<0?i:e[n][1]},zn.prototype.has=function(r){return et(this.__data__,r)>-1},zn.prototype.set=function(r,e){var n=this.__data__,t=et(n,r);return t<0?(++this.size,n.push([r,e])):n[t][1]=e,this},Hn.prototype.clear=function(){this.size=0,this.__data__={hash:new On,map:new(xn||zn),string:new On}},Hn.prototype.delete=function(r){var e=so(this,r).delete(r);return this.size-=e?1:0,e},Hn.prototype.get=function(r){return so(this,r).get(r)},Hn.prototype.has=function(r){return so(this,r).has(r)},Hn.prototype.set=function(r,e){var n=so(this,r),t=n.size;return n.set(r,e),this.size+=n.size==t?0:1,this},Nn.prototype.add=Nn.prototype.push=function(r){return this.__data__.set(r,a),this},Nn.prototype.has=function(r){return this.__data__.has(r)},Qn.prototype.clear=function(){this.__data__=new zn,this.size=0},Qn.prototype.delete=function(r){var e=this.__data__,n=e.delete(r);return this.size=e.size,n},Qn.prototype.get=function(r){return this.__data__.get(r)},Qn.prototype.has=function(r){return this.__data__.has(r)},Qn.prototype.set=function(r,e){var n=this.__data__;if(n instanceof zn){var t=n.__data__;if(!xn||t.length<199)return t.push([r,e]),this.size=++n.size,this;n=this.__data__=new Hn(t)}return n.set(r,e),this.size=n.size,this};var dt=Li(_t),ut=Li(wt,!0);function pt(r,e){var n=!0;return dt(r,(function(r,t,i){return n=!!e(r,t,i)})),n}function ht(r,e,n){for(var t=-1,o=r.length;++t<o;){var a=r[t],s=e(a);if(null!=s&&(l===i?s==s&&!cs(s):n(s,l)))var l=s,c=a}return c}function Ct(r,e){var n=[];return dt(r,(function(r,t,i){e(r,t,i)&&n.push(r)})),n}function gt(r,e,n,t,i){var o=-1,a=r.length;for(n||(n=go),i||(i=[]);++o<a;){var s=r[o];e>0&&n(s)?e>1?gt(s,e-1,n,t,i):ke(i,s):t||(i[i.length]=s)}return i}var ft=ji(),mt=ji(!0);function _t(r,e){return r&&ft(r,e,js)}function wt(r,e){return r&&mt(r,e,js)}function Bt(r,e){return be(e,(function(e){return Xa(r[e])}))}function bt(r,e){for(var n=0,t=(e=fi(e,r)).length;null!=r&&n<t;)r=r[Po(e[n++])];return n&&n==t?r:i}function vt(r,e,n){var t=e(r);return za(r)?t:ke(t,n(r))}function xt(r){return null==r?r===i?"[object Undefined]":"[object Null]":se&&se in xr(r)?function(r){var e=Wr.call(r,se),n=r[se];try{r[se]=i;var t=!0}catch(r){}var o=Rr.call(r);return t&&(e?r[se]=n:delete r[se]),o}(r):function(r){return Rr.call(r)}(r)}function yt(r,e){return r>e}function kt(r,e){return null!=r&&Wr.call(r,e)}function Et(r,e){return null!=r&&e in xr(r)}function St(r,e,n){for(var o=n?xe:ve,a=r[0].length,s=r.length,l=s,c=t(s),A=1/0,d=[];l--;){var u=r[l];l&&e&&(u=ye(u,Je(e))),A=mn(u.length,A),c[l]=!n&&(e||a>=120&&u.length>=120)?new Nn(l&&u):i}u=r[0];var p=-1,h=c[0];r:for(;++p<a&&d.length<A;){var C=u[p],g=e?e(C):C;if(C=n||0!==C?C:0,!(h?ze(h,g):o(d,g,n))){for(l=s;--l;){var f=c[l];if(!(f?ze(f,g):o(r[l],g,n)))continue r}h&&h.push(g),d.push(C)}}return d}function Dt(r,e,n){var t=null==(r=ko(r,e=fi(e,r)))?r:r[Po(Vo(e))];return null==t?i:fe(t,r,n)}function It(r){return ns(r)&&xt(r)==C}function Lt(r,e,n,t,o){return r===e||(null==r||null==e||!ns(r)&&!ns(e)?r!=r&&e!=e:function(r,e,n,t,o,a){var s=za(r),l=za(e),c=s?g:po(r),A=l?g:po(e),d=(c=c==C?x:c)==x,u=(A=A==C?x:A)==x,p=c==A;if(p&&Ka(r)){if(!Ka(e))return!1;s=!0,d=!1}if(p&&!d)return a||(a=new Qn),s||As(r)?Zi(r,e,n,t,o,a):function(r,e,n,t,i,o,a){switch(n){case j:if(r.byteLength!=e.byteLength||r.byteOffset!=e.byteOffset)return!1;r=r.buffer,e=e.buffer;case L:return!(r.byteLength!=e.byteLength||!o(new Tr(r),new Tr(e)));case f:case m:case v:return Fa(+r,+e);case _:return r.name==e.name&&r.message==e.message;case k:case S:return r==e+"";case b:var s=Ze;case E:var l=1&t;if(s||(s=nn),r.size!=e.size&&!l)return!1;var c=a.get(r);if(c)return c==e;t|=2,a.set(r,e);var A=Zi(s(r),s(e),t,i,o,a);return a.delete(r),A;case D:if(Gn)return Gn.call(r)==Gn.call(e)}return!1}(r,e,c,n,t,o,a);if(!(1&n)){var h=d&&Wr.call(r,"__wrapped__"),w=u&&Wr.call(e,"__wrapped__");if(h||w){var B=h?r.value():r,y=w?e.value():e;return a||(a=new Qn),o(B,y,n,t,a)}}return!!p&&(a||(a=new Qn),function(r,e,n,t,o,a){var s=1&n,l=eo(r),c=l.length;if(c!=eo(e).length&&!s)return!1;for(var A=c;A--;){var d=l[A];if(!(s?d in e:Wr.call(e,d)))return!1}var u=a.get(r),p=a.get(e);if(u&&p)return u==e&&p==r;var h=!0;a.set(r,e),a.set(e,r);for(var C=s;++A<c;){var g=r[d=l[A]],f=e[d];if(t)var m=s?t(f,g,d,e,r,a):t(g,f,d,r,e,a);if(!(m===i?g===f||o(g,f,n,t,a):m)){h=!1;break}C||(C="constructor"==d)}if(h&&!C){var _=r.constructor,w=e.constructor;_==w||!("constructor"in r)||!("constructor"in e)||"function"==typeof _&&_ instanceof _&&"function"==typeof w&&w instanceof w||(h=!1)}return a.delete(r),a.delete(e),h}(r,e,n,t,o,a))}(r,e,n,t,Lt,o))}function jt(r,e,n,t){var o=n.length,a=o,s=!t;if(null==r)return!a;for(r=xr(r);o--;){var l=n[o];if(s&&l[2]?l[1]!==r[l[0]]:!(l[0]in r))return!1}for(;++o<a;){var c=(l=n[o])[0],A=r[c],d=l[1];if(s&&l[2]){if(A===i&&!(c in r))return!1}else{var u=new Qn;if(t)var p=t(A,d,c,r,e,u);if(!(p===i?Lt(d,A,3,t,u):p))return!1}}return!0}function Wt(r){return!(!es(r)||(e=r,$r&&$r in e))&&(Xa(r)?Yr:Cr).test(Yo(r));var e}function qt(r){return"function"==typeof r?r:null==r?il:"object"==typeof r?za(r)?Yt(r[0],r[1]):Pt(r):pl(r)}function $t(r){if(!bo(r))return gn(r);var e=[];for(var n in xr(r))Wr.call(r,n)&&"constructor"!=n&&e.push(n);return e}function Rt(r,e){return r<e}function Gt(r,e){var n=-1,i=Na(r)?t(r.length):[];return dt(r,(function(r,t,o){i[++n]=e(r,t,o)})),i}function Pt(r){var e=lo(r);return 1==e.length&&e[0][2]?xo(e[0][0],e[0][1]):function(n){return n===r||jt(n,r,e)}}function Yt(r,e){return _o(r)&&vo(e)?xo(Po(r),e):function(n){var t=Es(n,r);return t===i&&t===e?Ss(n,r):Lt(e,t,3)}}function Ut(r,e,n,t,o){r!==e&&ft(e,(function(a,s){if(o||(o=new Qn),es(a))!function(r,e,n,t,o,a,s){var l=So(r,n),c=So(e,n),A=s.get(c);if(A)Zn(r,n,A);else{var d=a?a(l,c,n+"",r,e,s):i,u=d===i;if(u){var p=za(c),h=!p&&Ka(c),C=!p&&!h&&As(c);d=c,p||h||C?za(l)?d=l:Qa(l)?d=Ei(l):h?(u=!1,d=Bi(c,!0)):C?(u=!1,d=vi(c,!0)):d=[]:os(c)||Oa(c)?(d=l,Oa(l)?d=ms(l):es(l)&&!Xa(l)||(d=Co(c))):u=!1}u&&(s.set(c,d),o(d,c,t,a,s),s.delete(c)),Zn(r,n,d)}}(r,e,s,n,Ut,t,o);else{var l=t?t(So(r,s),a,s+"",r,e,o):i;l===i&&(l=a),Zn(r,s,l)}}),Ws)}function Ft(r,e){var n=r.length;if(n)return fo(e+=e<0?n:0,n)?r[e]:i}function Tt(r,e,n){e=e.length?ye(e,(function(r){return za(r)?function(e){return bt(e,1===r.length?r[0]:r)}:r})):[il];var t=-1;e=ye(e,Je(ao()));var i=Gt(r,(function(r,n,i){var o=ye(e,(function(e){return e(r)}));return{criteria:o,index:++t,value:r}}));return function(r,e){var t=r.length;for(r.sort((function(r,e){return function(r,e,n){for(var t=-1,i=r.criteria,o=e.criteria,a=i.length,s=n.length;++t<a;){var l=xi(i[t],o[t]);if(l)return t>=s?l:l*("desc"==n[t]?-1:1)}return r.index-e.index}(r,e,n)}));t--;)r[t]=r[t].value;return r}(i)}function Jt(r,e,n){for(var t=-1,i=e.length,o={};++t<i;){var a=e[t],s=bt(r,a);n(s,a)&&Vt(o,fi(a,r),s)}return o}function Ot(r,e,n,t){var i=t?qe:We,o=-1,a=e.length,s=r;for(r===e&&(e=Ei(e)),n&&(s=ye(r,Je(n)));++o<a;)for(var l=0,c=e[o],A=n?n(c):c;(l=i(s,A,l,t))>-1;)s!==r&&te.call(s,l,1),te.call(r,l,1);return r}function zt(r,e){for(var n=r?e.length:0,t=n-1;n--;){var i=e[n];if(n==t||i!==o){var o=i;fo(i)?te.call(r,i,1):ci(r,i)}}return r}function Ht(r,e){return r+dn(Bn()*(e-r+1))}function Nt(r,e){var n="";if(!r||e<1||e>d)return n;do{e%2&&(n+=r),(e=dn(e/2))&&(r+=r)}while(e);return n}function Qt(r,e){return Lo(yo(r,e,il),r+"")}function Kt(r){return Mn(Fs(r))}function Mt(r,e){var n=Fs(r);return qo(n,at(e,0,n.length))}function Vt(r,e,n,t){if(!es(r))return r;for(var o=-1,a=(e=fi(e,r)).length,s=a-1,l=r;null!=l&&++o<a;){var c=Po(e[o]),A=n;if("__proto__"===c||"constructor"===c||"prototype"===c)return r;if(o!=s){var d=l[c];(A=t?t(d,c,l):i)===i&&(A=es(d)?d:fo(e[o+1])?[]:{})}rt(l,c,A),l=l[c]}return r}var Xt=Dn?function(r,e){return Dn.set(r,e),r}:il,Zt=ce?function(r,e){return ce(r,"toString",{configurable:!0,enumerable:!1,value:el(e),writable:!0})}:il;function ri(r){return qo(Fs(r))}function ei(r,e,n){var i=-1,o=r.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var a=t(o);++i<o;)a[i]=r[i+e];return a}function ni(r,e){var n;return dt(r,(function(r,t,i){return!(n=e(r,t,i))})),!!n}function ti(r,e,n){var t=0,i=null==r?t:r.length;if("number"==typeof e&&e==e&&i<=2147483647){for(;t<i;){var o=t+i>>>1,a=r[o];null!==a&&!cs(a)&&(n?a<=e:a<e)?t=o+1:i=o}return i}return ii(r,e,il,n)}function ii(r,e,n,t){var o=0,a=null==r?0:r.length;if(0===a)return 0;for(var s=(e=n(e))!=e,l=null===e,c=cs(e),A=e===i;o<a;){var d=dn((o+a)/2),u=n(r[d]),p=u!==i,h=null===u,C=u==u,g=cs(u);if(s)var f=t||C;else f=A?C&&(t||p):l?C&&p&&(t||!h):c?C&&p&&!h&&(t||!g):!h&&!g&&(t?u<=e:u<e);f?o=d+1:a=d}return mn(a,4294967294)}function oi(r,e){for(var n=-1,t=r.length,i=0,o=[];++n<t;){var a=r[n],s=e?e(a):a;if(!n||!Fa(s,l)){var l=s;o[i++]=0===a?0:a}}return o}function ai(r){return"number"==typeof r?r:cs(r)?u:+r}function si(r){if("string"==typeof r)return r;if(za(r))return ye(r,si)+"";if(cs(r))return Pn?Pn.call(r):"";var e=r+"";return"0"==e&&1/r==-1/0?"-0":e}function li(r,e,n){var t=-1,i=ve,o=r.length,a=!0,s=[],l=s;if(n)a=!1,i=xe;else if(o>=200){var c=e?null:Ni(r);if(c)return nn(c);a=!1,i=ze,l=new Nn}else l=e?[]:s;r:for(;++t<o;){var A=r[t],d=e?e(A):A;if(A=n||0!==A?A:0,a&&d==d){for(var u=l.length;u--;)if(l[u]===d)continue r;e&&l.push(d),s.push(A)}else i(l,d,n)||(l!==s&&l.push(d),s.push(A))}return s}function ci(r,e){return null==(r=ko(r,e=fi(e,r)))||delete r[Po(Vo(e))]}function Ai(r,e,n,t){return Vt(r,e,n(bt(r,e)),t)}function di(r,e,n,t){for(var i=r.length,o=t?i:-1;(t?o--:++o<i)&&e(r[o],o,r););return n?ei(r,t?0:o,t?o+1:i):ei(r,t?o+1:0,t?i:o)}function ui(r,e){var n=r;return n instanceof Jn&&(n=n.value()),Ee(e,(function(r,e){return e.func.apply(e.thisArg,ke([r],e.args))}),n)}function pi(r,e,n){var i=r.length;if(i<2)return i?li(r[0]):[];for(var o=-1,a=t(i);++o<i;)for(var s=r[o],l=-1;++l<i;)l!=o&&(a[o]=At(a[o]||s,r[l],e,n));return li(gt(a,1),e,n)}function hi(r,e,n){for(var t=-1,o=r.length,a=e.length,s={};++t<o;){var l=t<a?e[t]:i;n(s,r[t],l)}return s}function Ci(r){return Qa(r)?r:[]}function gi(r){return"function"==typeof r?r:il}function fi(r,e){return za(r)?r:_o(r,e)?[r]:Go(_s(r))}var mi=Qt;function _i(r,e,n){var t=r.length;return n=n===i?t:n,!e&&n>=t?r:ei(r,e,n)}var wi=Ae||function(r){return oe.clearTimeout(r)};function Bi(r,e){if(e)return r.slice();var n=r.length,t=Jr?Jr(n):new r.constructor(n);return r.copy(t),t}function bi(r){var e=new r.constructor(r.byteLength);return new Tr(e).set(new Tr(r)),e}function vi(r,e){var n=e?bi(r.buffer):r.buffer;return new r.constructor(n,r.byteOffset,r.length)}function xi(r,e){if(r!==e){var n=r!==i,t=null===r,o=r==r,a=cs(r),s=e!==i,l=null===e,c=e==e,A=cs(e);if(!l&&!A&&!a&&r>e||a&&s&&c&&!l&&!A||t&&s&&c||!n&&c||!o)return 1;if(!t&&!a&&!A&&r<e||A&&n&&o&&!t&&!a||l&&n&&o||!s&&o||!c)return-1}return 0}function yi(r,e,n,i){for(var o=-1,a=r.length,s=n.length,l=-1,c=e.length,A=fn(a-s,0),d=t(c+A),u=!i;++l<c;)d[l]=e[l];for(;++o<s;)(u||o<a)&&(d[n[o]]=r[o]);for(;A--;)d[l++]=r[o++];return d}function ki(r,e,n,i){for(var o=-1,a=r.length,s=-1,l=n.length,c=-1,A=e.length,d=fn(a-l,0),u=t(d+A),p=!i;++o<d;)u[o]=r[o];for(var h=o;++c<A;)u[h+c]=e[c];for(;++s<l;)(p||o<a)&&(u[h+n[s]]=r[o++]);return u}function Ei(r,e){var n=-1,i=r.length;for(e||(e=t(i));++n<i;)e[n]=r[n];return e}function Si(r,e,n,t){var o=!n;n||(n={});for(var a=-1,s=e.length;++a<s;){var l=e[a],c=t?t(n[l],r[l],l,n,r):i;c===i&&(c=r[l]),o?it(n,l,c):rt(n,l,c)}return n}function Di(r,e){return function(n,t){var i=za(n)?me:nt,o=e?e():{};return i(n,r,ao(t,2),o)}}function Ii(r){return Qt((function(e,n){var t=-1,o=n.length,a=o>1?n[o-1]:i,s=o>2?n[2]:i;for(a=r.length>3&&"function"==typeof a?(o--,a):i,s&&mo(n[0],n[1],s)&&(a=o<3?i:a,o=1),e=xr(e);++t<o;){var l=n[t];l&&r(e,l,t,a)}return e}))}function Li(r,e){return function(n,t){if(null==n)return n;if(!Na(n))return r(n,t);for(var i=n.length,o=e?i:-1,a=xr(n);(e?o--:++o<i)&&!1!==t(a[o],o,a););return n}}function ji(r){return function(e,n,t){for(var i=-1,o=xr(e),a=t(e),s=a.length;s--;){var l=a[r?s:++i];if(!1===n(o[l],l,o))break}return e}}function Wi(r){return function(e){var n=Xe(e=_s(e))?an(e):i,t=n?n[0]:e.charAt(0),o=n?_i(n,1).join(""):e.slice(1);return t[r]()+o}}function qi(r){return function(e){return Ee(Xs(Os(e).replace(Or,"")),r,"")}}function $i(r){return function(){var e=arguments;switch(e.length){case 0:return new r;case 1:return new r(e[0]);case 2:return new r(e[0],e[1]);case 3:return new r(e[0],e[1],e[2]);case 4:return new r(e[0],e[1],e[2],e[3]);case 5:return new r(e[0],e[1],e[2],e[3],e[4]);case 6:return new r(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new r(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=Un(r.prototype),t=r.apply(n,e);return es(t)?t:n}}function Ri(r){return function(e,n,t){var o=xr(e);if(!Na(e)){var a=ao(n,3);e=js(e),n=function(r){return a(o[r],r,o)}}var s=r(e,n,t);return s>-1?o[a?e[s]:s]:i}}function Gi(r){return ro((function(e){var n=e.length,t=n,a=Tn.prototype.thru;for(r&&e.reverse();t--;){var s=e[t];if("function"!=typeof s)throw new Er(o);if(a&&!l&&"wrapper"==io(s))var l=new Tn([],!0)}for(t=l?t:n;++t<n;){var c=io(s=e[t]),A="wrapper"==c?to(s):i;l=A&&wo(A[0])&&424==A[1]&&!A[4].length&&1==A[9]?l[io(A[0])].apply(l,A[3]):1==s.length&&wo(s)?l[c]():l.thru(s)}return function(){var r=arguments,t=r[0];if(l&&1==r.length&&za(t))return l.plant(t).value();for(var i=0,o=n?e[i].apply(this,r):t;++i<n;)o=e[i].call(this,o);return o}}))}function Pi(r,e,n,o,a,s,l,A,d,u){var p=e&c,h=1&e,C=2&e,g=24&e,f=512&e,m=C?i:$i(r);return function i(){for(var c=arguments.length,_=t(c),w=c;w--;)_[w]=arguments[w];if(g)var B=oo(i),b=Qe(_,B);if(o&&(_=yi(_,o,a,g)),s&&(_=ki(_,s,l,g)),c-=b,g&&c<u){var v=en(_,B);return zi(r,e,Pi,i.placeholder,n,_,v,A,d,u-c)}var x=h?n:this,y=C?x[r]:r;return c=_.length,A?_=Eo(_,A):f&&c>1&&_.reverse(),p&&d<c&&(_.length=d),this&&this!==oe&&this instanceof i&&(y=m||$i(y)),y.apply(x,_)}}function Yi(r,e){return function(n,t){return function(r,e,n,t){return _t(r,(function(r,i,o){e(t,n(r),i,o)})),t}(n,r,e(t),{})}}function Ui(r,e){return function(n,t){var o;if(n===i&&t===i)return e;if(n!==i&&(o=n),t!==i){if(o===i)return t;"string"==typeof n||"string"==typeof t?(n=si(n),t=si(t)):(n=ai(n),t=ai(t)),o=r(n,t)}return o}}function Fi(r){return ro((function(e){return e=ye(e,Je(ao())),Qt((function(n){var t=this;return r(e,(function(r){return fe(r,t,n)}))}))}))}function Ti(r,e){var n=(e=e===i?" ":si(e)).length;if(n<2)return n?Nt(e,r):e;var t=Nt(e,An(r/on(e)));return Xe(e)?_i(an(t),0,r).join(""):t.slice(0,r)}function Ji(r){return function(e,n,o){return o&&"number"!=typeof o&&mo(e,n,o)&&(n=o=i),e=hs(e),n===i?(n=e,e=0):n=hs(n),function(r,e,n,i){for(var o=-1,a=fn(An((e-r)/(n||1)),0),s=t(a);a--;)s[i?a:++o]=r,r+=n;return s}(e,n,o=o===i?e<n?1:-1:hs(o),r)}}function Oi(r){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=fs(e),n=fs(n)),r(e,n)}}function zi(r,e,n,t,o,a,s,c,A,d){var u=8&e;e|=u?l:64,4&(e&=~(u?64:l))||(e&=-4);var p=[r,e,o,u?a:i,u?s:i,u?i:a,u?i:s,c,A,d],h=n.apply(i,p);return wo(r)&&Do(h,p),h.placeholder=t,jo(h,r,e)}function Hi(r){var e=vr[r];return function(r,n){if(r=fs(r),(n=null==n?0:mn(Cs(n),292))&&hn(r)){var t=(_s(r)+"e").split("e");return+((t=(_s(e(t[0]+"e"+(+t[1]+n)))+"e").split("e"))[0]+"e"+(+t[1]-n))}return e(r)}}var Ni=kn&&1/nn(new kn([,-0]))[1]==A?function(r){return new kn(r)}:cl;function Qi(r){return function(e){var n=po(e);return n==b?Ze(e):n==E?tn(e):function(r,e){return ye(e,(function(e){return[e,r[e]]}))}(e,r(e))}}function Ki(r,e,n,a,A,d,u,p){var h=2&e;if(!h&&"function"!=typeof r)throw new Er(o);var C=a?a.length:0;if(C||(e&=-97,a=A=i),u=u===i?u:fn(Cs(u),0),p=p===i?p:Cs(p),C-=A?A.length:0,64&e){var g=a,f=A;a=A=i}var m=h?i:to(r),_=[r,e,n,a,A,g,f,d,u,p];if(m&&function(r,e){var n=r[1],t=e[1],i=n|t,o=i<131,a=t==c&&8==n||t==c&&256==n&&r[7].length<=e[8]||384==t&&e[7].length<=e[8]&&8==n;if(!o&&!a)return r;1&t&&(r[2]=e[2],i|=1&n?0:4);var l=e[3];if(l){var A=r[3];r[3]=A?yi(A,l,e[4]):l,r[4]=A?en(r[3],s):e[4]}(l=e[5])&&(A=r[5],r[5]=A?ki(A,l,e[6]):l,r[6]=A?en(r[5],s):e[6]),(l=e[7])&&(r[7]=l),t&c&&(r[8]=null==r[8]?e[8]:mn(r[8],e[8])),null==r[9]&&(r[9]=e[9]),r[0]=e[0],r[1]=i}(_,m),r=_[0],e=_[1],n=_[2],a=_[3],A=_[4],!(p=_[9]=_[9]===i?h?0:r.length:fn(_[9]-C,0))&&24&e&&(e&=-25),e&&1!=e)w=8==e||16==e?function(r,e,n){var o=$i(r);return function a(){for(var s=arguments.length,l=t(s),c=s,A=oo(a);c--;)l[c]=arguments[c];var d=s<3&&l[0]!==A&&l[s-1]!==A?[]:en(l,A);return(s-=d.length)<n?zi(r,e,Pi,a.placeholder,i,l,d,i,i,n-s):fe(this&&this!==oe&&this instanceof a?o:r,this,l)}}(r,e,p):e!=l&&33!=e||A.length?Pi.apply(i,_):function(r,e,n,i){var o=1&e,a=$i(r);return function e(){for(var s=-1,l=arguments.length,c=-1,A=i.length,d=t(A+l),u=this&&this!==oe&&this instanceof e?a:r;++c<A;)d[c]=i[c];for(;l--;)d[c++]=arguments[++s];return fe(u,o?n:this,d)}}(r,e,n,a);else var w=function(r,e,n){var t=1&e,i=$i(r);return function e(){return(this&&this!==oe&&this instanceof e?i:r).apply(t?n:this,arguments)}}(r,e,n);return jo((m?Xt:Do)(w,_),r,e)}function Mi(r,e,n,t){return r===i||Fa(r,Ir[n])&&!Wr.call(t,n)?e:r}function Vi(r,e,n,t,o,a){return es(r)&&es(e)&&(a.set(e,r),Ut(r,e,i,Vi,a),a.delete(e)),r}function Xi(r){return os(r)?i:r}function Zi(r,e,n,t,o,a){var s=1&n,l=r.length,c=e.length;if(l!=c&&!(s&&c>l))return!1;var A=a.get(r),d=a.get(e);if(A&&d)return A==e&&d==r;var u=-1,p=!0,h=2&n?new Nn:i;for(a.set(r,e),a.set(e,r);++u<l;){var C=r[u],g=e[u];if(t)var f=s?t(g,C,u,e,r,a):t(C,g,u,r,e,a);if(f!==i){if(f)continue;p=!1;break}if(h){if(!De(e,(function(r,e){if(!ze(h,e)&&(C===r||o(C,r,n,t,a)))return h.push(e)}))){p=!1;break}}else if(C!==g&&!o(C,g,n,t,a)){p=!1;break}}return a.delete(r),a.delete(e),p}function ro(r){return Lo(yo(r,i,Ho),r+"")}function eo(r){return vt(r,js,Ao)}function no(r){return vt(r,Ws,uo)}var to=Dn?function(r){return Dn.get(r)}:cl;function io(r){for(var e=r.name+"",n=In[e],t=Wr.call(In,e)?n.length:0;t--;){var i=n[t],o=i.func;if(null==o||o==r)return i.name}return e}function oo(r){return(Wr.call(Yn,"placeholder")?Yn:r).placeholder}function ao(){var r=Yn.iteratee||ol;return r=r===ol?qt:r,arguments.length?r(arguments[0],arguments[1]):r}function so(r,e){var n,t,i=r.__data__;return("string"==(t=typeof(n=e))||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function lo(r){for(var e=js(r),n=e.length;n--;){var t=e[n],i=r[t];e[n]=[t,i,vo(i)]}return e}function co(r,e){var n=function(r,e){return null==r?i:r[e]}(r,e);return Wt(n)?n:i}var Ao=un?function(r){return null==r?[]:(r=xr(r),be(un(r),(function(e){return re.call(r,e)})))}:gl,uo=un?function(r){for(var e=[];r;)ke(e,Ao(r)),r=Hr(r);return e}:gl,po=xt;function ho(r,e,n){for(var t=-1,i=(e=fi(e,r)).length,o=!1;++t<i;){var a=Po(e[t]);if(!(o=null!=r&&n(r,a)))break;r=r[a]}return o||++t!=i?o:!!(i=null==r?0:r.length)&&rs(i)&&fo(a,i)&&(za(r)||Oa(r))}function Co(r){return"function"!=typeof r.constructor||bo(r)?{}:Un(Hr(r))}function go(r){return za(r)||Oa(r)||!!(ie&&r&&r[ie])}function fo(r,e){var n=typeof r;return!!(e=null==e?d:e)&&("number"==n||"symbol"!=n&&fr.test(r))&&r>-1&&r%1==0&&r<e}function mo(r,e,n){if(!es(n))return!1;var t=typeof e;return!!("number"==t?Na(n)&&fo(e,n.length):"string"==t&&e in n)&&Fa(n[e],r)}function _o(r,e){if(za(r))return!1;var n=typeof r;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=r&&!cs(r))||Z.test(r)||!X.test(r)||null!=e&&r in xr(e)}function wo(r){var e=io(r),n=Yn[e];if("function"!=typeof n||!(e in Jn.prototype))return!1;if(r===n)return!0;var t=to(n);return!!t&&r===t[0]}(vn&&po(new vn(new ArrayBuffer(1)))!=j||xn&&po(new xn)!=b||yn&&po(yn.resolve())!=y||kn&&po(new kn)!=E||En&&po(new En)!=I)&&(po=function(r){var e=xt(r),n=e==x?r.constructor:i,t=n?Yo(n):"";if(t)switch(t){case Ln:return j;case jn:return b;case Wn:return y;case qn:return E;case $n:return I}return e});var Bo=Lr?Xa:fl;function bo(r){var e=r&&r.constructor;return r===("function"==typeof e&&e.prototype||Ir)}function vo(r){return r==r&&!es(r)}function xo(r,e){return function(n){return null!=n&&n[r]===e&&(e!==i||r in xr(n))}}function yo(r,e,n){return e=fn(e===i?r.length-1:e,0),function(){for(var i=arguments,o=-1,a=fn(i.length-e,0),s=t(a);++o<a;)s[o]=i[e+o];o=-1;for(var l=t(e+1);++o<e;)l[o]=i[o];return l[e]=n(s),fe(r,this,l)}}function ko(r,e){return e.length<2?r:bt(r,ei(e,0,-1))}function Eo(r,e){for(var n=r.length,t=mn(e.length,n),o=Ei(r);t--;){var a=e[t];r[t]=fo(a,n)?o[a]:i}return r}function So(r,e){if(("constructor"!==e||"function"!=typeof r[e])&&"__proto__"!=e)return r[e]}var Do=Wo(Xt),Io=Pe||function(r,e){return oe.setTimeout(r,e)},Lo=Wo(Zt);function jo(r,e,n){var t=e+"";return Lo(r,function(r,e){var n=e.length;if(!n)return r;var t=n-1;return e[t]=(n>1?"& ":"")+e[t],e=e.join(n>2?", ":" "),r.replace(or,"{\n/* [wrapped with "+e+"] */\n")}(t,function(r,e){return _e(h,(function(n){var t="_."+n[0];e&n[1]&&!ve(r,t)&&r.push(t)})),r.sort()}(function(r){var e=r.match(ar);return e?e[1].split(sr):[]}(t),n)))}function Wo(r){var e=0,n=0;return function(){var t=_n(),o=16-(t-n);if(n=t,o>0){if(++e>=800)return arguments[0]}else e=0;return r.apply(i,arguments)}}function qo(r,e){var n=-1,t=r.length,o=t-1;for(e=e===i?t:e;++n<e;){var a=Ht(n,o),s=r[a];r[a]=r[n],r[n]=s}return r.length=e,r}var $o,Ro,Go=($o=$a((function(r){var e=[];return 46===r.charCodeAt(0)&&e.push(""),r.replace(rr,(function(r,n,t,i){e.push(t?i.replace(Ar,"$1"):n||r)})),e}),(function(r){return 500===Ro.size&&Ro.clear(),r})),Ro=$o.cache,$o);function Po(r){if("string"==typeof r||cs(r))return r;var e=r+"";return"0"==e&&1/r==-1/0?"-0":e}function Yo(r){if(null!=r){try{return jr.call(r)}catch(r){}try{return r+""}catch(r){}}return""}function Uo(r){if(r instanceof Jn)return r.clone();var e=new Tn(r.__wrapped__,r.__chain__);return e.__actions__=Ei(r.__actions__),e.__index__=r.__index__,e.__values__=r.__values__,e}var Fo=Qt((function(r,e){return Qa(r)?At(r,gt(e,1,Qa,!0)):[]})),To=Qt((function(r,e){var n=Vo(e);return Qa(n)&&(n=i),Qa(r)?At(r,gt(e,1,Qa,!0),ao(n,2)):[]})),Jo=Qt((function(r,e){var n=Vo(e);return Qa(n)&&(n=i),Qa(r)?At(r,gt(e,1,Qa,!0),i,n):[]}));function Oo(r,e,n){var t=null==r?0:r.length;if(!t)return-1;var i=null==n?0:Cs(n);return i<0&&(i=fn(t+i,0)),je(r,ao(e,3),i)}function zo(r,e,n){var t=null==r?0:r.length;if(!t)return-1;var o=t-1;return n!==i&&(o=Cs(n),o=n<0?fn(t+o,0):mn(o,t-1)),je(r,ao(e,3),o,!0)}function Ho(r){return null!=r&&r.length?gt(r,1):[]}function No(r){return r&&r.length?r[0]:i}var Qo=Qt((function(r){var e=ye(r,Ci);return e.length&&e[0]===r[0]?St(e):[]})),Ko=Qt((function(r){var e=Vo(r),n=ye(r,Ci);return e===Vo(n)?e=i:n.pop(),n.length&&n[0]===r[0]?St(n,ao(e,2)):[]})),Mo=Qt((function(r){var e=Vo(r),n=ye(r,Ci);return(e="function"==typeof e?e:i)&&n.pop(),n.length&&n[0]===r[0]?St(n,i,e):[]}));function Vo(r){var e=null==r?0:r.length;return e?r[e-1]:i}var Xo=Qt(Zo);function Zo(r,e){return r&&r.length&&e&&e.length?Ot(r,e):r}var ra=ro((function(r,e){var n=null==r?0:r.length,t=ot(r,e);return zt(r,ye(e,(function(r){return fo(r,n)?+r:r})).sort(xi)),t}));function ea(r){return null==r?r:bn.call(r)}var na=Qt((function(r){return li(gt(r,1,Qa,!0))})),ta=Qt((function(r){var e=Vo(r);return Qa(e)&&(e=i),li(gt(r,1,Qa,!0),ao(e,2))})),ia=Qt((function(r){var e=Vo(r);return e="function"==typeof e?e:i,li(gt(r,1,Qa,!0),i,e)}));function oa(r){if(!r||!r.length)return[];var e=0;return r=be(r,(function(r){if(Qa(r))return e=fn(r.length,e),!0})),Fe(e,(function(e){return ye(r,Ge(e))}))}function aa(r,e){if(!r||!r.length)return[];var n=oa(r);return null==e?n:ye(n,(function(r){return fe(e,i,r)}))}var sa=Qt((function(r,e){return Qa(r)?At(r,e):[]})),la=Qt((function(r){return pi(be(r,Qa))})),ca=Qt((function(r){var e=Vo(r);return Qa(e)&&(e=i),pi(be(r,Qa),ao(e,2))})),Aa=Qt((function(r){var e=Vo(r);return e="function"==typeof e?e:i,pi(be(r,Qa),i,e)})),da=Qt(oa),ua=Qt((function(r){var e=r.length,n=e>1?r[e-1]:i;return n="function"==typeof n?(r.pop(),n):i,aa(r,n)}));function pa(r){var e=Yn(r);return e.__chain__=!0,e}function ha(r,e){return e(r)}var Ca=ro((function(r){var e=r.length,n=e?r[0]:0,t=this.__wrapped__,o=function(e){return ot(e,r)};return!(e>1||this.__actions__.length)&&t instanceof Jn&&fo(n)?((t=t.slice(n,+n+(e?1:0))).__actions__.push({func:ha,args:[o],thisArg:i}),new Tn(t,this.__chain__).thru((function(r){return e&&!r.length&&r.push(i),r}))):this.thru(o)})),ga=Di((function(r,e,n){Wr.call(r,n)?++r[n]:it(r,n,1)})),fa=Ri(Oo),ma=Ri(zo);function _a(r,e){return(za(r)?_e:dt)(r,ao(e,3))}function wa(r,e){return(za(r)?we:ut)(r,ao(e,3))}var Ba=Di((function(r,e,n){Wr.call(r,n)?r[n].push(e):it(r,n,[e])})),ba=Qt((function(r,e,n){var i=-1,o="function"==typeof e,a=Na(r)?t(r.length):[];return dt(r,(function(r){a[++i]=o?fe(e,r,n):Dt(r,e,n)})),a})),va=Di((function(r,e,n){it(r,n,e)}));function xa(r,e){return(za(r)?ye:Gt)(r,ao(e,3))}var ya=Di((function(r,e,n){r[n?0:1].push(e)}),(function(){return[[],[]]})),ka=Qt((function(r,e){if(null==r)return[];var n=e.length;return n>1&&mo(r,e[0],e[1])?e=[]:n>2&&mo(e[0],e[1],e[2])&&(e=[e[0]]),Tt(r,gt(e,1),[])})),Ea=Ie||function(){return oe.Date.now()};function Sa(r,e,n){return e=n?i:e,e=r&&null==e?r.length:e,Ki(r,c,i,i,i,i,e)}function Da(r,e){var n;if("function"!=typeof e)throw new Er(o);return r=Cs(r),function(){return--r>0&&(n=e.apply(this,arguments)),r<=1&&(e=i),n}}var Ia=Qt((function(r,e,n){var t=1;if(n.length){var i=en(n,oo(Ia));t|=l}return Ki(r,t,e,n,i)})),La=Qt((function(r,e,n){var t=3;if(n.length){var i=en(n,oo(La));t|=l}return Ki(e,t,r,n,i)}));function ja(r,e,n){var t,a,s,l,c,A,d=0,u=!1,p=!1,h=!0;if("function"!=typeof r)throw new Er(o);function C(e){var n=t,o=a;return t=a=i,d=e,l=r.apply(o,n)}function g(r){return d=r,c=Io(m,e),u?C(r):l}function f(r){var n=r-A;return A===i||n>=e||n<0||p&&r-d>=s}function m(){var r=Ea();if(f(r))return _(r);c=Io(m,function(r){var n=e-(r-A);return p?mn(n,s-(r-d)):n}(r))}function _(r){return c=i,h&&t?C(r):(t=a=i,l)}function w(){var r=Ea(),n=f(r);if(t=arguments,a=this,A=r,n){if(c===i)return g(A);if(p)return wi(c),c=Io(m,e),C(A)}return c===i&&(c=Io(m,e)),l}return e=fs(e)||0,es(n)&&(u=!!n.leading,s=(p="maxWait"in n)?fn(fs(n.maxWait)||0,e):s,h="trailing"in n?!!n.trailing:h),w.cancel=function(){c!==i&&wi(c),d=0,t=A=a=c=i},w.flush=function(){return c===i?l:_(Ea())},w}var Wa=Qt((function(r,e){return ct(r,1,e)})),qa=Qt((function(r,e,n){return ct(r,fs(e)||0,n)}));function $a(r,e){if("function"!=typeof r||null!=e&&"function"!=typeof e)throw new Er(o);var n=function(){var t=arguments,i=e?e.apply(this,t):t[0],o=n.cache;if(o.has(i))return o.get(i);var a=r.apply(this,t);return n.cache=o.set(i,a)||o,a};return n.cache=new($a.Cache||Hn),n}function Ra(r){if("function"!=typeof r)throw new Er(o);return function(){var e=arguments;switch(e.length){case 0:return!r.call(this);case 1:return!r.call(this,e[0]);case 2:return!r.call(this,e[0],e[1]);case 3:return!r.call(this,e[0],e[1],e[2])}return!r.apply(this,e)}}$a.Cache=Hn;var Ga=mi((function(r,e){var n=(e=1==e.length&&za(e[0])?ye(e[0],Je(ao())):ye(gt(e,1),Je(ao()))).length;return Qt((function(t){for(var i=-1,o=mn(t.length,n);++i<o;)t[i]=e[i].call(this,t[i]);return fe(r,this,t)}))})),Pa=Qt((function(r,e){var n=en(e,oo(Pa));return Ki(r,l,i,e,n)})),Ya=Qt((function(r,e){var n=en(e,oo(Ya));return Ki(r,64,i,e,n)})),Ua=ro((function(r,e){return Ki(r,256,i,i,i,e)}));function Fa(r,e){return r===e||r!=r&&e!=e}var Ta=Oi(yt),Ja=Oi((function(r,e){return r>=e})),Oa=It(function(){return arguments}())?It:function(r){return ns(r)&&Wr.call(r,"callee")&&!re.call(r,"callee")},za=t.isArray,Ha=de?Je(de):function(r){return ns(r)&&xt(r)==L};function Na(r){return null!=r&&rs(r.length)&&!Xa(r)}function Qa(r){return ns(r)&&Na(r)}var Ka=pn||fl,Ma=ue?Je(ue):function(r){return ns(r)&&xt(r)==m};function Va(r){if(!ns(r))return!1;var e=xt(r);return e==_||"[object DOMException]"==e||"string"==typeof r.message&&"string"==typeof r.name&&!os(r)}function Xa(r){if(!es(r))return!1;var e=xt(r);return e==w||e==B||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Za(r){return"number"==typeof r&&r==Cs(r)}function rs(r){return"number"==typeof r&&r>-1&&r%1==0&&r<=d}function es(r){var e=typeof r;return null!=r&&("object"==e||"function"==e)}function ns(r){return null!=r&&"object"==typeof r}var ts=pe?Je(pe):function(r){return ns(r)&&po(r)==b};function is(r){return"number"==typeof r||ns(r)&&xt(r)==v}function os(r){if(!ns(r)||xt(r)!=x)return!1;var e=Hr(r);if(null===e)return!0;var n=Wr.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&jr.call(n)==Gr}var as=he?Je(he):function(r){return ns(r)&&xt(r)==k},ss=Ce?Je(Ce):function(r){return ns(r)&&po(r)==E};function ls(r){return"string"==typeof r||!za(r)&&ns(r)&&xt(r)==S}function cs(r){return"symbol"==typeof r||ns(r)&&xt(r)==D}var As=ge?Je(ge):function(r){return ns(r)&&rs(r.length)&&!!Xr[xt(r)]},ds=Oi(Rt),us=Oi((function(r,e){return r<=e}));function ps(r){if(!r)return[];if(Na(r))return ls(r)?an(r):Ei(r);if(ae&&r[ae])return function(r){for(var e,n=[];!(e=r.next()).done;)n.push(e.value);return n}(r[ae]());var e=po(r);return(e==b?Ze:e==E?nn:Fs)(r)}function hs(r){return r?(r=fs(r))===A||r===-1/0?17976931348623157e292*(r<0?-1:1):r==r?r:0:0===r?r:0}function Cs(r){var e=hs(r),n=e%1;return e==e?n?e-n:e:0}function gs(r){return r?at(Cs(r),0,p):0}function fs(r){if("number"==typeof r)return r;if(cs(r))return u;if(es(r)){var e="function"==typeof r.valueOf?r.valueOf():r;r=es(e)?e+"":e}if("string"!=typeof r)return 0===r?r:+r;r=Te(r);var n=hr.test(r);return n||gr.test(r)?ne(r.slice(2),n?2:8):pr.test(r)?u:+r}function ms(r){return Si(r,Ws(r))}function _s(r){return null==r?"":si(r)}var ws=Ii((function(r,e){if(bo(e)||Na(e))Si(e,js(e),r);else for(var n in e)Wr.call(e,n)&&rt(r,n,e[n])})),Bs=Ii((function(r,e){Si(e,Ws(e),r)})),bs=Ii((function(r,e,n,t){Si(e,Ws(e),r,t)})),vs=Ii((function(r,e,n,t){Si(e,js(e),r,t)})),xs=ro(ot),ys=Qt((function(r,e){r=xr(r);var n=-1,t=e.length,o=t>2?e[2]:i;for(o&&mo(e[0],e[1],o)&&(t=1);++n<t;)for(var a=e[n],s=Ws(a),l=-1,c=s.length;++l<c;){var A=s[l],d=r[A];(d===i||Fa(d,Ir[A])&&!Wr.call(r,A))&&(r[A]=a[A])}return r})),ks=Qt((function(r){return r.push(i,Vi),fe($s,i,r)}));function Es(r,e,n){var t=null==r?i:bt(r,e);return t===i?n:t}function Ss(r,e){return null!=r&&ho(r,e,Et)}var Ds=Yi((function(r,e,n){null!=e&&"function"!=typeof e.toString&&(e=Rr.call(e)),r[e]=n}),el(il)),Is=Yi((function(r,e,n){null!=e&&"function"!=typeof e.toString&&(e=Rr.call(e)),Wr.call(r,e)?r[e].push(n):r[e]=[n]}),ao),Ls=Qt(Dt);function js(r){return Na(r)?Kn(r):$t(r)}function Ws(r){return Na(r)?Kn(r,!0):function(r){if(!es(r))return function(r){var e=[];if(null!=r)for(var n in xr(r))e.push(n);return e}(r);var e=bo(r),n=[];for(var t in r)("constructor"!=t||!e&&Wr.call(r,t))&&n.push(t);return n}(r)}var qs=Ii((function(r,e,n){Ut(r,e,n)})),$s=Ii((function(r,e,n,t){Ut(r,e,n,t)})),Rs=ro((function(r,e){var n={};if(null==r)return n;var t=!1;e=ye(e,(function(e){return e=fi(e,r),t||(t=e.length>1),e})),Si(r,no(r),n),t&&(n=st(n,7,Xi));for(var i=e.length;i--;)ci(n,e[i]);return n})),Gs=ro((function(r,e){return null==r?{}:function(r,e){return Jt(r,e,(function(e,n){return Ss(r,n)}))}(r,e)}));function Ps(r,e){if(null==r)return{};var n=ye(no(r),(function(r){return[r]}));return e=ao(e),Jt(r,n,(function(r,n){return e(r,n[0])}))}var Ys=Qi(js),Us=Qi(Ws);function Fs(r){return null==r?[]:Oe(r,js(r))}var Ts=qi((function(r,e,n){return e=e.toLowerCase(),r+(n?Js(e):e)}));function Js(r){return Vs(_s(r).toLowerCase())}function Os(r){return(r=_s(r))&&r.replace(mr,Ke).replace(zr,"")}var zs=qi((function(r,e,n){return r+(n?"-":"")+e.toLowerCase()})),Hs=qi((function(r,e,n){return r+(n?" ":"")+e.toLowerCase()})),Ns=Wi("toLowerCase"),Qs=qi((function(r,e,n){return r+(n?"_":"")+e.toLowerCase()})),Ks=qi((function(r,e,n){return r+(n?" ":"")+Vs(e)})),Ms=qi((function(r,e,n){return r+(n?" ":"")+e.toUpperCase()})),Vs=Wi("toUpperCase");function Xs(r,e,n){return r=_s(r),(e=n?i:e)===i?function(r){return Kr.test(r)}(r)?function(r){return r.match(Nr)||[]}(r):function(r){return r.match(lr)||[]}(r):r.match(e)||[]}var Zs=Qt((function(r,e){try{return fe(r,i,e)}catch(r){return Va(r)?r:new Br(r)}})),rl=ro((function(r,e){return _e(e,(function(e){e=Po(e),it(r,e,Ia(r[e],r))})),r}));function el(r){return function(){return r}}var nl=Gi(),tl=Gi(!0);function il(r){return r}function ol(r){return qt("function"==typeof r?r:st(r,1))}var al=Qt((function(r,e){return function(n){return Dt(n,r,e)}})),sl=Qt((function(r,e){return function(n){return Dt(r,n,e)}}));function ll(r,e,n){var t=js(e),i=Bt(e,t);null!=n||es(e)&&(i.length||!t.length)||(n=e,e=r,r=this,i=Bt(e,js(e)));var o=!(es(n)&&"chain"in n&&!n.chain),a=Xa(r);return _e(i,(function(n){var t=e[n];r[n]=t,a&&(r.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=r(this.__wrapped__),i=n.__actions__=Ei(this.__actions__);return i.push({func:t,args:arguments,thisArg:r}),n.__chain__=e,n}return t.apply(r,ke([this.value()],arguments))})})),r}function cl(){}var Al=Fi(ye),dl=Fi(Be),ul=Fi(De);function pl(r){return _o(r)?Ge(Po(r)):function(r){return function(e){return bt(e,r)}}(r)}var hl=Ji(),Cl=Ji(!0);function gl(){return[]}function fl(){return!1}var ml,_l=Ui((function(r,e){return r+e}),0),wl=Hi("ceil"),Bl=Ui((function(r,e){return r/e}),1),bl=Hi("floor"),vl=Ui((function(r,e){return r*e}),1),xl=Hi("round"),yl=Ui((function(r,e){return r-e}),0);return Yn.after=function(r,e){if("function"!=typeof e)throw new Er(o);return r=Cs(r),function(){if(--r<1)return e.apply(this,arguments)}},Yn.ary=Sa,Yn.assign=ws,Yn.assignIn=Bs,Yn.assignInWith=bs,Yn.assignWith=vs,Yn.at=xs,Yn.before=Da,Yn.bind=Ia,Yn.bindAll=rl,Yn.bindKey=La,Yn.castArray=function(){if(!arguments.length)return[];var r=arguments[0];return za(r)?r:[r]},Yn.chain=pa,Yn.chunk=function(r,e,n){e=(n?mo(r,e,n):e===i)?1:fn(Cs(e),0);var o=null==r?0:r.length;if(!o||e<1)return[];for(var a=0,s=0,l=t(An(o/e));a<o;)l[s++]=ei(r,a,a+=e);return l},Yn.compact=function(r){for(var e=-1,n=null==r?0:r.length,t=0,i=[];++e<n;){var o=r[e];o&&(i[t++]=o)}return i},Yn.concat=function(){var r=arguments.length;if(!r)return[];for(var e=t(r-1),n=arguments[0],i=r;i--;)e[i-1]=arguments[i];return ke(za(n)?Ei(n):[n],gt(e,1))},Yn.cond=function(r){var e=null==r?0:r.length,n=ao();return r=e?ye(r,(function(r){if("function"!=typeof r[1])throw new Er(o);return[n(r[0]),r[1]]})):[],Qt((function(n){for(var t=-1;++t<e;){var i=r[t];if(fe(i[0],this,n))return fe(i[1],this,n)}}))},Yn.conforms=function(r){return function(r){var e=js(r);return function(n){return lt(n,r,e)}}(st(r,1))},Yn.constant=el,Yn.countBy=ga,Yn.create=function(r,e){var n=Un(r);return null==e?n:tt(n,e)},Yn.curry=function r(e,n,t){var o=Ki(e,8,i,i,i,i,i,n=t?i:n);return o.placeholder=r.placeholder,o},Yn.curryRight=function r(e,n,t){var o=Ki(e,16,i,i,i,i,i,n=t?i:n);return o.placeholder=r.placeholder,o},Yn.debounce=ja,Yn.defaults=ys,Yn.defaultsDeep=ks,Yn.defer=Wa,Yn.delay=qa,Yn.difference=Fo,Yn.differenceBy=To,Yn.differenceWith=Jo,Yn.drop=function(r,e,n){var t=null==r?0:r.length;return t?ei(r,(e=n||e===i?1:Cs(e))<0?0:e,t):[]},Yn.dropRight=function(r,e,n){var t=null==r?0:r.length;return t?ei(r,0,(e=t-(e=n||e===i?1:Cs(e)))<0?0:e):[]},Yn.dropRightWhile=function(r,e){return r&&r.length?di(r,ao(e,3),!0,!0):[]},Yn.dropWhile=function(r,e){return r&&r.length?di(r,ao(e,3),!0):[]},Yn.fill=function(r,e,n,t){var o=null==r?0:r.length;return o?(n&&"number"!=typeof n&&mo(r,e,n)&&(n=0,t=o),function(r,e,n,t){var o=r.length;for((n=Cs(n))<0&&(n=-n>o?0:o+n),(t=t===i||t>o?o:Cs(t))<0&&(t+=o),t=n>t?0:gs(t);n<t;)r[n++]=e;return r}(r,e,n,t)):[]},Yn.filter=function(r,e){return(za(r)?be:Ct)(r,ao(e,3))},Yn.flatMap=function(r,e){return gt(xa(r,e),1)},Yn.flatMapDeep=function(r,e){return gt(xa(r,e),A)},Yn.flatMapDepth=function(r,e,n){return n=n===i?1:Cs(n),gt(xa(r,e),n)},Yn.flatten=Ho,Yn.flattenDeep=function(r){return null!=r&&r.length?gt(r,A):[]},Yn.flattenDepth=function(r,e){return null!=r&&r.length?gt(r,e=e===i?1:Cs(e)):[]},Yn.flip=function(r){return Ki(r,512)},Yn.flow=nl,Yn.flowRight=tl,Yn.fromPairs=function(r){for(var e=-1,n=null==r?0:r.length,t={};++e<n;){var i=r[e];t[i[0]]=i[1]}return t},Yn.functions=function(r){return null==r?[]:Bt(r,js(r))},Yn.functionsIn=function(r){return null==r?[]:Bt(r,Ws(r))},Yn.groupBy=Ba,Yn.initial=function(r){return null!=r&&r.length?ei(r,0,-1):[]},Yn.intersection=Qo,Yn.intersectionBy=Ko,Yn.intersectionWith=Mo,Yn.invert=Ds,Yn.invertBy=Is,Yn.invokeMap=ba,Yn.iteratee=ol,Yn.keyBy=va,Yn.keys=js,Yn.keysIn=Ws,Yn.map=xa,Yn.mapKeys=function(r,e){var n={};return e=ao(e,3),_t(r,(function(r,t,i){it(n,e(r,t,i),r)})),n},Yn.mapValues=function(r,e){var n={};return e=ao(e,3),_t(r,(function(r,t,i){it(n,t,e(r,t,i))})),n},Yn.matches=function(r){return Pt(st(r,1))},Yn.matchesProperty=function(r,e){return Yt(r,st(e,1))},Yn.memoize=$a,Yn.merge=qs,Yn.mergeWith=$s,Yn.method=al,Yn.methodOf=sl,Yn.mixin=ll,Yn.negate=Ra,Yn.nthArg=function(r){return r=Cs(r),Qt((function(e){return Ft(e,r)}))},Yn.omit=Rs,Yn.omitBy=function(r,e){return Ps(r,Ra(ao(e)))},Yn.once=function(r){return Da(2,r)},Yn.orderBy=function(r,e,n,t){return null==r?[]:(za(e)||(e=null==e?[]:[e]),za(n=t?i:n)||(n=null==n?[]:[n]),Tt(r,e,n))},Yn.over=Al,Yn.overArgs=Ga,Yn.overEvery=dl,Yn.overSome=ul,Yn.partial=Pa,Yn.partialRight=Ya,Yn.partition=ya,Yn.pick=Gs,Yn.pickBy=Ps,Yn.property=pl,Yn.propertyOf=function(r){return function(e){return null==r?i:bt(r,e)}},Yn.pull=Xo,Yn.pullAll=Zo,Yn.pullAllBy=function(r,e,n){return r&&r.length&&e&&e.length?Ot(r,e,ao(n,2)):r},Yn.pullAllWith=function(r,e,n){return r&&r.length&&e&&e.length?Ot(r,e,i,n):r},Yn.pullAt=ra,Yn.range=hl,Yn.rangeRight=Cl,Yn.rearg=Ua,Yn.reject=function(r,e){return(za(r)?be:Ct)(r,Ra(ao(e,3)))},Yn.remove=function(r,e){var n=[];if(!r||!r.length)return n;var t=-1,i=[],o=r.length;for(e=ao(e,3);++t<o;){var a=r[t];e(a,t,r)&&(n.push(a),i.push(t))}return zt(r,i),n},Yn.rest=function(r,e){if("function"!=typeof r)throw new Er(o);return Qt(r,e=e===i?e:Cs(e))},Yn.reverse=ea,Yn.sampleSize=function(r,e,n){return e=(n?mo(r,e,n):e===i)?1:Cs(e),(za(r)?Vn:Mt)(r,e)},Yn.set=function(r,e,n){return null==r?r:Vt(r,e,n)},Yn.setWith=function(r,e,n,t){return t="function"==typeof t?t:i,null==r?r:Vt(r,e,n,t)},Yn.shuffle=function(r){return(za(r)?Xn:ri)(r)},Yn.slice=function(r,e,n){var t=null==r?0:r.length;return t?(n&&"number"!=typeof n&&mo(r,e,n)?(e=0,n=t):(e=null==e?0:Cs(e),n=n===i?t:Cs(n)),ei(r,e,n)):[]},Yn.sortBy=ka,Yn.sortedUniq=function(r){return r&&r.length?oi(r):[]},Yn.sortedUniqBy=function(r,e){return r&&r.length?oi(r,ao(e,2)):[]},Yn.split=function(r,e,n){return n&&"number"!=typeof n&&mo(r,e,n)&&(e=n=i),(n=n===i?p:n>>>0)?(r=_s(r))&&("string"==typeof e||null!=e&&!as(e))&&!(e=si(e))&&Xe(r)?_i(an(r),0,n):r.split(e,n):[]},Yn.spread=function(r,e){if("function"!=typeof r)throw new Er(o);return e=null==e?0:fn(Cs(e),0),Qt((function(n){var t=n[e],i=_i(n,0,e);return t&&ke(i,t),fe(r,this,i)}))},Yn.tail=function(r){var e=null==r?0:r.length;return e?ei(r,1,e):[]},Yn.take=function(r,e,n){return r&&r.length?ei(r,0,(e=n||e===i?1:Cs(e))<0?0:e):[]},Yn.takeRight=function(r,e,n){var t=null==r?0:r.length;return t?ei(r,(e=t-(e=n||e===i?1:Cs(e)))<0?0:e,t):[]},Yn.takeRightWhile=function(r,e){return r&&r.length?di(r,ao(e,3),!1,!0):[]},Yn.takeWhile=function(r,e){return r&&r.length?di(r,ao(e,3)):[]},Yn.tap=function(r,e){return e(r),r},Yn.throttle=function(r,e,n){var t=!0,i=!0;if("function"!=typeof r)throw new Er(o);return es(n)&&(t="leading"in n?!!n.leading:t,i="trailing"in n?!!n.trailing:i),ja(r,e,{leading:t,maxWait:e,trailing:i})},Yn.thru=ha,Yn.toArray=ps,Yn.toPairs=Ys,Yn.toPairsIn=Us,Yn.toPath=function(r){return za(r)?ye(r,Po):cs(r)?[r]:Ei(Go(_s(r)))},Yn.toPlainObject=ms,Yn.transform=function(r,e,n){var t=za(r),i=t||Ka(r)||As(r);if(e=ao(e,4),null==n){var o=r&&r.constructor;n=i?t?new o:[]:es(r)&&Xa(o)?Un(Hr(r)):{}}return(i?_e:_t)(r,(function(r,t,i){return e(n,r,t,i)})),n},Yn.unary=function(r){return Sa(r,1)},Yn.union=na,Yn.unionBy=ta,Yn.unionWith=ia,Yn.uniq=function(r){return r&&r.length?li(r):[]},Yn.uniqBy=function(r,e){return r&&r.length?li(r,ao(e,2)):[]},Yn.uniqWith=function(r,e){return e="function"==typeof e?e:i,r&&r.length?li(r,i,e):[]},Yn.unset=function(r,e){return null==r||ci(r,e)},Yn.unzip=oa,Yn.unzipWith=aa,Yn.update=function(r,e,n){return null==r?r:Ai(r,e,gi(n))},Yn.updateWith=function(r,e,n,t){return t="function"==typeof t?t:i,null==r?r:Ai(r,e,gi(n),t)},Yn.values=Fs,Yn.valuesIn=function(r){return null==r?[]:Oe(r,Ws(r))},Yn.without=sa,Yn.words=Xs,Yn.wrap=function(r,e){return Pa(gi(e),r)},Yn.xor=la,Yn.xorBy=ca,Yn.xorWith=Aa,Yn.zip=da,Yn.zipObject=function(r,e){return hi(r||[],e||[],rt)},Yn.zipObjectDeep=function(r,e){return hi(r||[],e||[],Vt)},Yn.zipWith=ua,Yn.entries=Ys,Yn.entriesIn=Us,Yn.extend=Bs,Yn.extendWith=bs,ll(Yn,Yn),Yn.add=_l,Yn.attempt=Zs,Yn.camelCase=Ts,Yn.capitalize=Js,Yn.ceil=wl,Yn.clamp=function(r,e,n){return n===i&&(n=e,e=i),n!==i&&(n=(n=fs(n))==n?n:0),e!==i&&(e=(e=fs(e))==e?e:0),at(fs(r),e,n)},Yn.clone=function(r){return st(r,4)},Yn.cloneDeep=function(r){return st(r,5)},Yn.cloneDeepWith=function(r,e){return st(r,5,e="function"==typeof e?e:i)},Yn.cloneWith=function(r,e){return st(r,4,e="function"==typeof e?e:i)},Yn.conformsTo=function(r,e){return null==e||lt(r,e,js(e))},Yn.deburr=Os,Yn.defaultTo=function(r,e){return null==r||r!=r?e:r},Yn.divide=Bl,Yn.endsWith=function(r,e,n){r=_s(r),e=si(e);var t=r.length,o=n=n===i?t:at(Cs(n),0,t);return(n-=e.length)>=0&&r.slice(n,o)==e},Yn.eq=Fa,Yn.escape=function(r){return(r=_s(r))&&Q.test(r)?r.replace(H,Me):r},Yn.escapeRegExp=function(r){return(r=_s(r))&&nr.test(r)?r.replace(er,"\\$&"):r},Yn.every=function(r,e,n){var t=za(r)?Be:pt;return n&&mo(r,e,n)&&(e=i),t(r,ao(e,3))},Yn.find=fa,Yn.findIndex=Oo,Yn.findKey=function(r,e){return Le(r,ao(e,3),_t)},Yn.findLast=ma,Yn.findLastIndex=zo,Yn.findLastKey=function(r,e){return Le(r,ao(e,3),wt)},Yn.floor=bl,Yn.forEach=_a,Yn.forEachRight=wa,Yn.forIn=function(r,e){return null==r?r:ft(r,ao(e,3),Ws)},Yn.forInRight=function(r,e){return null==r?r:mt(r,ao(e,3),Ws)},Yn.forOwn=function(r,e){return r&&_t(r,ao(e,3))},Yn.forOwnRight=function(r,e){return r&&wt(r,ao(e,3))},Yn.get=Es,Yn.gt=Ta,Yn.gte=Ja,Yn.has=function(r,e){return null!=r&&ho(r,e,kt)},Yn.hasIn=Ss,Yn.head=No,Yn.identity=il,Yn.includes=function(r,e,n,t){r=Na(r)?r:Fs(r),n=n&&!t?Cs(n):0;var i=r.length;return n<0&&(n=fn(i+n,0)),ls(r)?n<=i&&r.indexOf(e,n)>-1:!!i&&We(r,e,n)>-1},Yn.indexOf=function(r,e,n){var t=null==r?0:r.length;if(!t)return-1;var i=null==n?0:Cs(n);return i<0&&(i=fn(t+i,0)),We(r,e,i)},Yn.inRange=function(r,e,n){return e=hs(e),n===i?(n=e,e=0):n=hs(n),function(r,e,n){return r>=mn(e,n)&&r<fn(e,n)}(r=fs(r),e,n)},Yn.invoke=Ls,Yn.isArguments=Oa,Yn.isArray=za,Yn.isArrayBuffer=Ha,Yn.isArrayLike=Na,Yn.isArrayLikeObject=Qa,Yn.isBoolean=function(r){return!0===r||!1===r||ns(r)&&xt(r)==f},Yn.isBuffer=Ka,Yn.isDate=Ma,Yn.isElement=function(r){return ns(r)&&1===r.nodeType&&!os(r)},Yn.isEmpty=function(r){if(null==r)return!0;if(Na(r)&&(za(r)||"string"==typeof r||"function"==typeof r.splice||Ka(r)||As(r)||Oa(r)))return!r.length;var e=po(r);if(e==b||e==E)return!r.size;if(bo(r))return!$t(r).length;for(var n in r)if(Wr.call(r,n))return!1;return!0},Yn.isEqual=function(r,e){return Lt(r,e)},Yn.isEqualWith=function(r,e,n){var t=(n="function"==typeof n?n:i)?n(r,e):i;return t===i?Lt(r,e,i,n):!!t},Yn.isError=Va,Yn.isFinite=function(r){return"number"==typeof r&&hn(r)},Yn.isFunction=Xa,Yn.isInteger=Za,Yn.isLength=rs,Yn.isMap=ts,Yn.isMatch=function(r,e){return r===e||jt(r,e,lo(e))},Yn.isMatchWith=function(r,e,n){return n="function"==typeof n?n:i,jt(r,e,lo(e),n)},Yn.isNaN=function(r){return is(r)&&r!=+r},Yn.isNative=function(r){if(Bo(r))throw new Br("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Wt(r)},Yn.isNil=function(r){return null==r},Yn.isNull=function(r){return null===r},Yn.isNumber=is,Yn.isObject=es,Yn.isObjectLike=ns,Yn.isPlainObject=os,Yn.isRegExp=as,Yn.isSafeInteger=function(r){return Za(r)&&r>=-9007199254740991&&r<=d},Yn.isSet=ss,Yn.isString=ls,Yn.isSymbol=cs,Yn.isTypedArray=As,Yn.isUndefined=function(r){return r===i},Yn.isWeakMap=function(r){return ns(r)&&po(r)==I},Yn.isWeakSet=function(r){return ns(r)&&"[object WeakSet]"==xt(r)},Yn.join=function(r,e){return null==r?"":Cn.call(r,e)},Yn.kebabCase=zs,Yn.last=Vo,Yn.lastIndexOf=function(r,e,n){var t=null==r?0:r.length;if(!t)return-1;var o=t;return n!==i&&(o=(o=Cs(n))<0?fn(t+o,0):mn(o,t-1)),e==e?function(r,e,n){for(var t=n+1;t--;)if(r[t]===e)return t;return t}(r,e,o):je(r,$e,o,!0)},Yn.lowerCase=Hs,Yn.lowerFirst=Ns,Yn.lt=ds,Yn.lte=us,Yn.max=function(r){return r&&r.length?ht(r,il,yt):i},Yn.maxBy=function(r,e){return r&&r.length?ht(r,ao(e,2),yt):i},Yn.mean=function(r){return Re(r,il)},Yn.meanBy=function(r,e){return Re(r,ao(e,2))},Yn.min=function(r){return r&&r.length?ht(r,il,Rt):i},Yn.minBy=function(r,e){return r&&r.length?ht(r,ao(e,2),Rt):i},Yn.stubArray=gl,Yn.stubFalse=fl,Yn.stubObject=function(){return{}},Yn.stubString=function(){return""},Yn.stubTrue=function(){return!0},Yn.multiply=vl,Yn.nth=function(r,e){return r&&r.length?Ft(r,Cs(e)):i},Yn.noConflict=function(){return oe._===this&&(oe._=Pr),this},Yn.noop=cl,Yn.now=Ea,Yn.pad=function(r,e,n){r=_s(r);var t=(e=Cs(e))?on(r):0;if(!e||t>=e)return r;var i=(e-t)/2;return Ti(dn(i),n)+r+Ti(An(i),n)},Yn.padEnd=function(r,e,n){r=_s(r);var t=(e=Cs(e))?on(r):0;return e&&t<e?r+Ti(e-t,n):r},Yn.padStart=function(r,e,n){r=_s(r);var t=(e=Cs(e))?on(r):0;return e&&t<e?Ti(e-t,n)+r:r},Yn.parseInt=function(r,e,n){return n||null==e?e=0:e&&(e=+e),wn(_s(r).replace(tr,""),e||0)},Yn.random=function(r,e,n){if(n&&"boolean"!=typeof n&&mo(r,e,n)&&(e=n=i),n===i&&("boolean"==typeof e?(n=e,e=i):"boolean"==typeof r&&(n=r,r=i)),r===i&&e===i?(r=0,e=1):(r=hs(r),e===i?(e=r,r=0):e=hs(e)),r>e){var t=r;r=e,e=t}if(n||r%1||e%1){var o=Bn();return mn(r+o*(e-r+ee("1e-"+((o+"").length-1))),e)}return Ht(r,e)},Yn.reduce=function(r,e,n){var t=za(r)?Ee:Ye,i=arguments.length<3;return t(r,ao(e,4),n,i,dt)},Yn.reduceRight=function(r,e,n){var t=za(r)?Se:Ye,i=arguments.length<3;return t(r,ao(e,4),n,i,ut)},Yn.repeat=function(r,e,n){return e=(n?mo(r,e,n):e===i)?1:Cs(e),Nt(_s(r),e)},Yn.replace=function(){var r=arguments,e=_s(r[0]);return r.length<3?e:e.replace(r[1],r[2])},Yn.result=function(r,e,n){var t=-1,o=(e=fi(e,r)).length;for(o||(o=1,r=i);++t<o;){var a=null==r?i:r[Po(e[t])];a===i&&(t=o,a=n),r=Xa(a)?a.call(r):a}return r},Yn.round=xl,Yn.runInContext=r,Yn.sample=function(r){return(za(r)?Mn:Kt)(r)},Yn.size=function(r){if(null==r)return 0;if(Na(r))return ls(r)?on(r):r.length;var e=po(r);return e==b||e==E?r.size:$t(r).length},Yn.snakeCase=Qs,Yn.some=function(r,e,n){var t=za(r)?De:ni;return n&&mo(r,e,n)&&(e=i),t(r,ao(e,3))},Yn.sortedIndex=function(r,e){return ti(r,e)},Yn.sortedIndexBy=function(r,e,n){return ii(r,e,ao(n,2))},Yn.sortedIndexOf=function(r,e){var n=null==r?0:r.length;if(n){var t=ti(r,e);if(t<n&&Fa(r[t],e))return t}return-1},Yn.sortedLastIndex=function(r,e){return ti(r,e,!0)},Yn.sortedLastIndexBy=function(r,e,n){return ii(r,e,ao(n,2),!0)},Yn.sortedLastIndexOf=function(r,e){if(null!=r&&r.length){var n=ti(r,e,!0)-1;if(Fa(r[n],e))return n}return-1},Yn.startCase=Ks,Yn.startsWith=function(r,e,n){return r=_s(r),n=null==n?0:at(Cs(n),0,r.length),e=si(e),r.slice(n,n+e.length)==e},Yn.subtract=yl,Yn.sum=function(r){return r&&r.length?Ue(r,il):0},Yn.sumBy=function(r,e){return r&&r.length?Ue(r,ao(e,2)):0},Yn.template=function(r,e,n){var t=Yn.templateSettings;n&&mo(r,e,n)&&(e=i),r=_s(r),e=bs({},e,t,Mi);var o,a,s=bs({},e.imports,t.imports,Mi),l=js(s),c=Oe(s,l),A=0,d=e.interpolate||_r,u="__p += '",p=yr((e.escape||_r).source+"|"+d.source+"|"+(d===V?dr:_r).source+"|"+(e.evaluate||_r).source+"|$","g"),h="//# sourceURL="+(Wr.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Vr+"]")+"\n";r.replace(p,(function(e,n,t,i,s,l){return t||(t=i),u+=r.slice(A,l).replace(wr,Ve),n&&(o=!0,u+="' +\n__e("+n+") +\n'"),s&&(a=!0,u+="';\n"+s+";\n__p += '"),t&&(u+="' +\n((__t = ("+t+")) == null ? '' : __t) +\n'"),A=l+e.length,e})),u+="';\n";var C=Wr.call(e,"variable")&&e.variable;if(C){if(cr.test(C))throw new Br("Invalid `variable` option passed into `_.template`")}else u="with (obj) {\n"+u+"\n}\n";u=(a?u.replace(T,""):u).replace(J,"$1").replace(O,"$1;"),u="function("+(C||"obj")+") {\n"+(C?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+u+"return __p\n}";var g=Zs((function(){return br(l,h+"return "+u).apply(i,c)}));if(g.source=u,Va(g))throw g;return g},Yn.times=function(r,e){if((r=Cs(r))<1||r>d)return[];var n=p,t=mn(r,p);e=ao(e),r-=p;for(var i=Fe(t,e);++n<r;)e(n);return i},Yn.toFinite=hs,Yn.toInteger=Cs,Yn.toLength=gs,Yn.toLower=function(r){return _s(r).toLowerCase()},Yn.toNumber=fs,Yn.toSafeInteger=function(r){return r?at(Cs(r),-9007199254740991,d):0===r?r:0},Yn.toString=_s,Yn.toUpper=function(r){return _s(r).toUpperCase()},Yn.trim=function(r,e,n){if((r=_s(r))&&(n||e===i))return Te(r);if(!r||!(e=si(e)))return r;var t=an(r),o=an(e);return _i(t,He(t,o),Ne(t,o)+1).join("")},Yn.trimEnd=function(r,e,n){if((r=_s(r))&&(n||e===i))return r.slice(0,sn(r)+1);if(!r||!(e=si(e)))return r;var t=an(r);return _i(t,0,Ne(t,an(e))+1).join("")},Yn.trimStart=function(r,e,n){if((r=_s(r))&&(n||e===i))return r.replace(tr,"");if(!r||!(e=si(e)))return r;var t=an(r);return _i(t,He(t,an(e))).join("")},Yn.truncate=function(r,e){var n=30,t="...";if(es(e)){var o="separator"in e?e.separator:o;n="length"in e?Cs(e.length):n,t="omission"in e?si(e.omission):t}var a=(r=_s(r)).length;if(Xe(r)){var s=an(r);a=s.length}if(n>=a)return r;var l=n-on(t);if(l<1)return t;var c=s?_i(s,0,l).join(""):r.slice(0,l);if(o===i)return c+t;if(s&&(l+=c.length-l),as(o)){if(r.slice(l).search(o)){var A,d=c;for(o.global||(o=yr(o.source,_s(ur.exec(o))+"g")),o.lastIndex=0;A=o.exec(d);)var u=A.index;c=c.slice(0,u===i?l:u)}}else if(r.indexOf(si(o),l)!=l){var p=c.lastIndexOf(o);p>-1&&(c=c.slice(0,p))}return c+t},Yn.unescape=function(r){return(r=_s(r))&&N.test(r)?r.replace(z,ln):r},Yn.uniqueId=function(r){var e=++qr;return _s(r)+e},Yn.upperCase=Ms,Yn.upperFirst=Vs,Yn.each=_a,Yn.eachRight=wa,Yn.first=No,ll(Yn,(ml={},_t(Yn,(function(r,e){Wr.call(Yn.prototype,e)||(ml[e]=r)})),ml),{chain:!1}),Yn.VERSION="4.17.21",_e(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(r){Yn[r].placeholder=Yn})),_e(["drop","take"],(function(r,e){Jn.prototype[r]=function(n){n=n===i?1:fn(Cs(n),0);var t=this.__filtered__&&!e?new Jn(this):this.clone();return t.__filtered__?t.__takeCount__=mn(n,t.__takeCount__):t.__views__.push({size:mn(n,p),type:r+(t.__dir__<0?"Right":"")}),t},Jn.prototype[r+"Right"]=function(e){return this.reverse()[r](e).reverse()}})),_e(["filter","map","takeWhile"],(function(r,e){var n=e+1,t=1==n||3==n;Jn.prototype[r]=function(r){var e=this.clone();return e.__iteratees__.push({iteratee:ao(r,3),type:n}),e.__filtered__=e.__filtered__||t,e}})),_e(["head","last"],(function(r,e){var n="take"+(e?"Right":"");Jn.prototype[r]=function(){return this[n](1).value()[0]}})),_e(["initial","tail"],(function(r,e){var n="drop"+(e?"":"Right");Jn.prototype[r]=function(){return this.__filtered__?new Jn(this):this[n](1)}})),Jn.prototype.compact=function(){return this.filter(il)},Jn.prototype.find=function(r){return this.filter(r).head()},Jn.prototype.findLast=function(r){return this.reverse().find(r)},Jn.prototype.invokeMap=Qt((function(r,e){return"function"==typeof r?new Jn(this):this.map((function(n){return Dt(n,r,e)}))})),Jn.prototype.reject=function(r){return this.filter(Ra(ao(r)))},Jn.prototype.slice=function(r,e){r=Cs(r);var n=this;return n.__filtered__&&(r>0||e<0)?new Jn(n):(r<0?n=n.takeRight(-r):r&&(n=n.drop(r)),e!==i&&(n=(e=Cs(e))<0?n.dropRight(-e):n.take(e-r)),n)},Jn.prototype.takeRightWhile=function(r){return this.reverse().takeWhile(r).reverse()},Jn.prototype.toArray=function(){return this.take(p)},_t(Jn.prototype,(function(r,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),t=/^(?:head|last)$/.test(e),o=Yn[t?"take"+("last"==e?"Right":""):e],a=t||/^find/.test(e);o&&(Yn.prototype[e]=function(){var e=this.__wrapped__,s=t?[1]:arguments,l=e instanceof Jn,c=s[0],A=l||za(e),d=function(r){var e=o.apply(Yn,ke([r],s));return t&&u?e[0]:e};A&&n&&"function"==typeof c&&1!=c.length&&(l=A=!1);var u=this.__chain__,p=!!this.__actions__.length,h=a&&!u,C=l&&!p;if(!a&&A){e=C?e:new Jn(this);var g=r.apply(e,s);return g.__actions__.push({func:ha,args:[d],thisArg:i}),new Tn(g,u)}return h&&C?r.apply(this,s):(g=this.thru(d),h?t?g.value()[0]:g.value():g)})})),_e(["pop","push","shift","sort","splice","unshift"],(function(r){var e=Sr[r],n=/^(?:push|sort|unshift)$/.test(r)?"tap":"thru",t=/^(?:pop|shift)$/.test(r);Yn.prototype[r]=function(){var r=arguments;if(t&&!this.__chain__){var i=this.value();return e.apply(za(i)?i:[],r)}return this[n]((function(n){return e.apply(za(n)?n:[],r)}))}})),_t(Jn.prototype,(function(r,e){var n=Yn[e];if(n){var t=n.name+"";Wr.call(In,t)||(In[t]=[]),In[t].push({name:e,func:n})}})),In[Pi(i,2).name]=[{name:"wrapper",func:i}],Jn.prototype.clone=function(){var r=new Jn(this.__wrapped__);return r.__actions__=Ei(this.__actions__),r.__dir__=this.__dir__,r.__filtered__=this.__filtered__,r.__iteratees__=Ei(this.__iteratees__),r.__takeCount__=this.__takeCount__,r.__views__=Ei(this.__views__),r},Jn.prototype.reverse=function(){if(this.__filtered__){var r=new Jn(this);r.__dir__=-1,r.__filtered__=!0}else(r=this.clone()).__dir__*=-1;return r},Jn.prototype.value=function(){var r=this.__wrapped__.value(),e=this.__dir__,n=za(r),t=e<0,i=n?r.length:0,o=function(r,e,n){for(var t=-1,i=n.length;++t<i;){var o=n[t],a=o.size;switch(o.type){case"drop":r+=a;break;case"dropRight":e-=a;break;case"take":e=mn(e,r+a);break;case"takeRight":r=fn(r,e-a)}}return{start:r,end:e}}(0,i,this.__views__),a=o.start,s=o.end,l=s-a,c=t?s:a-1,A=this.__iteratees__,d=A.length,u=0,p=mn(l,this.__takeCount__);if(!n||!t&&i==l&&p==l)return ui(r,this.__actions__);var h=[];r:for(;l--&&u<p;){for(var C=-1,g=r[c+=e];++C<d;){var f=A[C],m=f.iteratee,_=f.type,w=m(g);if(2==_)g=w;else if(!w){if(1==_)continue r;break r}}h[u++]=g}return h},Yn.prototype.at=Ca,Yn.prototype.chain=function(){return pa(this)},Yn.prototype.commit=function(){return new Tn(this.value(),this.__chain__)},Yn.prototype.next=function(){this.__values__===i&&(this.__values__=ps(this.value()));var r=this.__index__>=this.__values__.length;return{done:r,value:r?i:this.__values__[this.__index__++]}},Yn.prototype.plant=function(r){for(var e,n=this;n instanceof Fn;){var t=Uo(n);t.__index__=0,t.__values__=i,e?o.__wrapped__=t:e=t;var o=t;n=n.__wrapped__}return o.__wrapped__=r,e},Yn.prototype.reverse=function(){var r=this.__wrapped__;if(r instanceof Jn){var e=r;return this.__actions__.length&&(e=new Jn(this)),(e=e.reverse()).__actions__.push({func:ha,args:[ea],thisArg:i}),new Tn(e,this.__chain__)}return this.thru(ea)},Yn.prototype.toJSON=Yn.prototype.valueOf=Yn.prototype.value=function(){return ui(this.__wrapped__,this.__actions__)},Yn.prototype.first=Yn.prototype.head,ae&&(Yn.prototype[ae]=function(){return this}),Yn}();oe._=cn,(t=function(){return cn}.call(e,n,e,r))===i||(r.exports=t)}.call(this)},3379:r=>{"use strict";var e=[];function n(r){for(var n=-1,t=0;t<e.length;t++)if(e[t].identifier===r){n=t;break}return n}function t(r,t){for(var o={},a=[],s=0;s<r.length;s++){var l=r[s],c=t.base?l[0]+t.base:l[0],A=o[c]||0,d="".concat(c," ").concat(A);o[c]=A+1;var u=n(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var h=i(p,t);t.byIndex=s,e.splice(s,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function i(r,e){var n=e.domAPI(e);return n.update(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap&&e.supports===r.supports&&e.layer===r.layer)return;n.update(r=e)}else n.remove()}}r.exports=function(r,i){var o=t(r=r||[],i=i||{});return function(r){r=r||[];for(var a=0;a<o.length;a++){var s=n(o[a]);e[s].references--}for(var l=t(r,i),c=0;c<o.length;c++){var A=n(o[c]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}o=l}}},569:r=>{"use strict";var e={};r.exports=function(r,n){var t=function(r){if(void 0===e[r]){var n=document.querySelector(r);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(r){n=null}e[r]=n}return e[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(n)}},9216:r=>{"use strict";r.exports=function(r){var e=document.createElement("style");return r.setAttributes(e,r.attributes),r.insert(e,r.options),e}},3565:(r,e,n)=>{"use strict";r.exports=function(r){var e=n.nc;e&&r.setAttribute("nonce",e)}},7795:r=>{"use strict";r.exports=function(r){var e=r.insertStyleElement(r);return{update:function(n){!function(r,e,n){var t="";n.supports&&(t+="@supports (".concat(n.supports,") {")),n.media&&(t+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(t+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),t+=n.css,i&&(t+="}"),n.media&&(t+="}"),n.supports&&(t+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(t,r,e.options)}(e,r,n)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(e)}}}},4589:r=>{"use strict";r.exports=function(r,e){if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}},6241:(r,e,n)=>{"use strict";r.exports=n.p+"499a02316ea3cebc78fc.svg"},4281:(r,e,n)=>{"use strict";r.exports=n.p+"870244877d1443754e45.svg"},1537:(r,e,n)=>{"use strict";r.exports=n.p+"2aa4f1613e7b21a7eb37.svg"},9862:(r,e,n)=>{"use strict";r.exports=n.p+"df83b82a10ec3c9ff618.svg"},6126:(r,e,n)=>{"use strict";r.exports=n.p+"b5c4e20e1637207af80b.svg"},3427:(r,e,n)=>{"use strict";r.exports=n.p+"8afb99dac2c665687c2c.svg"},6333:(r,e,n)=>{"use strict";r.exports=n.p+"de8e842dea4b3fe1aed8.svg"},1201:(r,e,n)=>{"use strict";r.exports=n.p+"1695454a2f7028c1fa05.png"},5391:(r,e,n)=>{"use strict";r.exports=n.p+"ff65f90ac1eb9cf6f04e.png"}},e={};function n(t){var i=e[t];if(void 0!==i)return i.exports;var o=e[t]={id:t,loaded:!1,exports:{}};return r[t].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}n.m=r,n.n=r=>{var e=r&&r.__esModule?()=>r.default:()=>r;return n.d(e,{a:e}),e},n.d=(r,e)=>{for(var t in e)n.o(e,t)&&!n.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:e[t]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(r){if("object"==typeof window)return window}}(),n.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),n.nmd=r=>(r.paths=[],r.children||(r.children=[]),r),(()=>{var r;n.g.importScripts&&(r=n.g.location+"");var e=n.g.document;if(!r&&e&&(e.currentScript&&(r=e.currentScript.src),!r)){var t=e.getElementsByTagName("script");t.length&&(r=t[t.length-1].src)}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=r})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{"use strict";const r=document.createElement("div");r.id="auth-modals",r.innerHTML='\n<div class="modal content__item" id="sign-in-modal">\n                    <h3 class="modal__title section-title">Вход</h3>\n                    <form class="modal__form sign-in-form" id="sign-in-form">\n                        <input type="email" placeholder="E-mail" name=\'email\' class="form-input" required>\n                        <input type="password" placeholder="Пароль" name=\'password\' class="form-input" required>\n                        <button type="submit" id="sign-in-btn" class="registration__regbtn button">Войти</button>\n                    </form>\n                    <p>У вас нет аккаунта? Давайте <a href=\'\' id="register-link">зарегистрируемся!</a></p>\n                </div>\n\n<div class="modal content__item modal_hidden" id="registration-modal">\n                <h3 class="modal__title section-title">Регистрация</h3>\n                <form class="modal__form registration-form" id="create-user-form">\n                    <input type="text" placeholder="Имя" name=\'name\' class="form-input" required>\n                    <input type="email" placeholder="E-mail" name=\'email\' class="form-input" required>\n                    <input type="password" placeholder="Пароль" name=\'password\' class="form-input" required>\n                    <input type="password" placeholder="Подтвердите пароль" name=\'confirmPassword\' class="form-input" required>\n                    <button type="submit" id="register-user-btn" class="registration__regbtn button">Зарегистрироваться</button>\n                </form>\n                <p>У вас уже есть аккаунта? Тогда срочно надо <a href=\'\' id="sign-in-link">войти!</a></p>\n            </div>\n';const e=r;var t=n(9669),i=n.n(t);const o="user",a={set:r=>{localStorage.setItem(o,JSON.stringify(r))},get:()=>{const r=localStorage.getItem(o);return r?JSON.parse(r):null},remove:()=>localStorage.removeItem(o)};var s;!function(r){r.hard="hard",r.learned="learned",r.process="process"}(s||(s={}));const l=new class{constructor(r){this.baseURL=r,this.setBaseUrlInAxios(),this.apiClient=i().create({baseURL:this.baseURL}),this.apiClient.interceptors.request.use((r=>{var e;const n=null===(e=a.get())||void 0===e?void 0:e.token;if((null==r?void 0:r.headers)&&n&&!r.headers.Authorization){const{headers:e}=r;e.Authorization=`Bearer ${n}`}return r}))}setBaseUrlInAxios(){i().defaults.baseURL||(i().defaults.baseURL=this.baseURL)}async createUser(r){return await this.apiClient.post("/users",r)}async signIn(r){return await this.apiClient.post("/signin",r)}async refreshTokens(r,e){return await this.apiClient.get(`/users/${r}/tokens`,{headers:{Authorization:`Bearer ${e}`}})}async getChunkOfWords(r,e){return await this.apiClient.get("/words",{params:{group:r,page:e}})}async getWordWithAssetsById(r){return await this.apiClient.get(`/words/${r}`)}async getUserWords(){return await this.apiClient.get(`/users/${a.get().userId}/words`)}async updateOrCreateUserWord(r,e,n){const t=s.process,i={serieRight:0,serieWrong:0,addTime:(new Date).toString(),games:{sprint:{right:0,wrong:0},audiocall:{right:0,wrong:0}}};if((await this.getUserWords()).data.map((r=>r.wordId)).includes(r)){const o=(await this.getUserWord(r)).data,a=e||o.difficulty||t,s=n||o.optional||i;await this.updateUserWord(r,a,s)}else{const o=e||t,l=n||i;await this.apiClient.post(`users/${a.get().userId}/words/${r}`,{difficulty:s[o],optional:l})}}async getUserWord(r){return await this.apiClient.get(`/users/${a.get().userId}/words/${r}`)}async setAggregatedWord(r,e,n){var t;let i={serieRight:0,serieWrong:0,addTime:Date(),games:{sprint:{right:0,wrong:0},audiocall:{right:0,wrong:0}}};try{const t=(await this.getUserWord(r)).data;let o=t.difficulty;i=t.optional,i.games[e][n]+=1,"right"===n&&(i.serieWrong=0,2===i.serieRight&&(o=s.learned),i.serieRight+=1),"wrong"===n&&(i.serieRight=0,2===i.serieWrong&&(o=s.hard),i.serieWrong+=1,o===s.learned&&(o=s.process)),this.updateOrCreateUserWord(r,o,i)}catch(o){404===(null===(t=o.response)||void 0===t?void 0:t.status)&&(i.games[e][n]=1,"right"===n?i.serieRight=1:i.serieWrong=1,this.updateOrCreateUserWord(r,s.process,i))}}async getAllUserAggregatedHardWords(r){return await this.apiClient.get(`/users/${a.get().userId}/aggregatedWords`,{params:{page:r,wordsPerPage:20,filter:'{"$or":[{"userWord.difficulty":"hard"}]}'}})}async updateUserWord(r,e,n){await this.apiClient.put(`/users/${a.get().userId}/words/${r}`,{difficulty:e,optional:n})}async getLearntUserWords(r){return this.apiClient.get(`/users/${r}/aggregatedWords`,{params:{wordsPerPage:4e3,filter:'{"userWord.difficulty":"learned"}'}})}getAudio(r){return this.apiClient.get(r)}async getWordStatistic(r){return(await this.getUserWords()).data.map((r=>r.wordId)).includes(r)?(await this.getUserWord(r)).data:null}}("https://rslang-l9uj.onrender.com"),c=class{constructor(r,e){this.api=r,this.authStore=e}async authorizeUser(r){const e=await this.api.signIn(r),n={userId:e.data.userId,name:e.data.name,token:e.data.token,refreshToken:e.data.refreshToken};return this.authStore.set(n),n}async getNewToken(){var r;const e=a.get();if(e){try{const r=await this.api.refreshTokens(e.userId,e.refreshToken);e.token=r.data.token,e.refreshToken=r.data.refreshToken,this.authStore.set(e)}catch(e){if(401===(null===(r=e.response)||void 0===r?void 0:r.status))return void this.logOutUser()}setTimeout((()=>this.getNewToken()),144e5)}}logOutUser(){this.authStore.remove(),localStorage.removeItem("complicatedWordsPage"),localStorage.removeItem("handbookComplicatedWords")}};function A(r){var e;null===(e=r.parentElement)||void 0===e||e.removeChild(r)}function d(r,e){return Array.from(r.querySelectorAll("input")).reduce(((r,n)=>{const t=r;return e.includes(n.name)||(t[n.name]=n.value),t}),{})}function u(r){r.querySelectorAll("input").forEach((r=>{r.value=""}))}function p(r){const e=document.querySelector(".body");null==e||e.classList.toggle("overflow-hidden"),null==r||r.classList.toggle("blackout_hidden")}class h{constructor(r){this.registrationController=new class{constructor(){this.api=l}registerNewUser(r){this.api.createUser(r)}},this.authorizationController=new c(l,a),this.refreshPage=r}async initSignIn(r,e,n){r.preventDefault();const t=document.querySelector("#sign-in-form"),i=d(t,[]);t&&u(t),e&&n&&(A(n),p(e));try{await this.authorizationController.authorizeUser(i)}catch(r){return}const o=document.querySelector("#singin-btn"),a=document.querySelector("#log-out-btn");o&&a&&(null==o||o.classList.add("btn_hidden"),null==a||a.classList.remove("btn_hidden")),this.refreshPage(),setTimeout((()=>this.authorizationController.getNewToken()),144e5)}initRegistration(r,e,n){r.preventDefault();const t=document.querySelector("#create-user-form"),i=d(t,["confirmPassword"]);this.registrationController.registerNewUser(i),t&&u(t),e&&n&&(A(n),p(e))}renderAuthModal(r,e){var n,t,i,o;!function(r){const e=document.querySelector("#main");null==e||e.prepend(r.cloneNode(!0))}(e);const a={modalsContainer:document.querySelector("#auth-modals"),signInBtn:document.querySelector("#sign-in-btn"),logOutBtn:document.querySelector("#log-out-btn"),registerBtn:document.querySelector("#register-user-btn"),registrationModal:document.querySelector("#registration-modal"),signInModal:document.querySelector("#sign-in-modal"),registerLink:document.querySelector("#register-link"),signInLink:document.querySelector("#sign-in-link")};r&&p(r),null==r||r.addEventListener("click",(()=>{a.modalsContainer&&A(a.modalsContainer),p(r)}),{once:!0}),r&&(null===(n=a.signInBtn)||void 0===n||n.addEventListener("click",(e=>this.initSignIn(e,r,a.modalsContainer))),null===(t=a.registerBtn)||void 0===t||t.addEventListener("click",(e=>this.initRegistration(e,r,a.modalsContainer)))),null===(i=a.registerLink)||void 0===i||i.addEventListener("click",(r=>{var e,n;r.preventDefault(),null===(e=a.registrationModal)||void 0===e||e.classList.remove("modal_hidden"),null===(n=a.signInModal)||void 0===n||n.classList.add("modal_hidden")})),null===(o=a.signInLink)||void 0===o||o.addEventListener("click",(r=>{var e,n;r.preventDefault(),null===(e=a.registrationModal)||void 0===e||e.classList.add("modal_hidden"),null===(n=a.signInModal)||void 0===n||n.classList.remove("modal_hidden")}))}}const C={sections:['<section class="about content__item">\n                <h2 class="section-title about__title">RSlang</h2>\n                <p class="about__text">С нашим приложением учить английский язык легко и увлекательно! В этом вам помогут\n                    электронный учебник с различными уровнями сложности, а также мини-игры. Вы сможете следить за прогрессом обучения и вдохновляётесь результатами!</p>\n                <div class="about__image-wrap">\n                    <img src="./public/assets/images/about.png" width="50" height="50" alt="" class="about__image">\n                </div>\n                </section>','<section class="scope content__item">\n                <h2 class="section-title scope__title">Преимущества нашего приложения</h2>\n                <p class="scope__text">Мы разработали для вас удобные средства для скорейшего изучения языка и быстрого\n                    закрепления результата.</p>\n                <div class="scope-card scope__item">\n                    <img class="scope-card__img" src="./public/assets/icons/games.svg" alt="games">\n                    <h3 class="scope-card__title">Игры</h3>\n                    <p class="scope-card__text">Для изучения слов и усиления запоминания в приложении есть игры: Sprint\n                        и Audio Challenge,\n                        которые помогут вам "прокачать" свой словарный запас в игровой форме.</p>\n                </div>\n                <div class="scope-card scope__item">\n                    <img class="scope-card__img" src="./public/assets/icons/dictionary.svg" alt="handbook">\n                    <h3 class="scope-card__title">Продуманный учебник</h3>\n                    <p class="scope-card__text">Наш учебник состоит из семи разделов, разделённых по уровням сложности.\n                        Словарь представляет собой интерактивные карточки, содержащие перевод\n                        слова, тематическое изображение, произношение как слова отдельно, так и в составе фразы.</p>\n                </div>\n                <div class="scope-card scope__item">\n                    <img class="scope-card__img" src="./public/assets/icons/statistics.svg" alt="statistics">\n                    <h3 class="scope-card__title">Статистика</h3>\n                    <p class="scope-card__text">Весь ход обучения можно просмотреть в статистике, в которой представлены\n                        данные за текущий день обучения в целом и с разделением по играм.</p>\n                </div>\n                <div class="scope-card scope__item">\n                    <img class="scope-card__img" src="./public/assets/icons/ui.svg" alt="interface">\n                    <h3 class="scope-card__title">Удобный интерфейс</h3>\n                    <p class="scope-card__text">Интерфейс приложения подстраивается под ваш уровень языка для облегчения\n                        процесса обучения.</p>\n                </div>\n            </section>','<section class="team content__item">\n                <h2 class="section-title team__title">Наша команда</h2>\n                <div class="member-card team__item">\n                    <img src="./public/assets/icons/avatar-2.svg" alt="memeber photo" class="member-card__photo">\n                    <p class="member-card__role">Team leader</p>\n                    <p class="member-card__name">Татьяна</p>\n                    <p class="member-card__contribution">\n                    Занималась настройкой сборки проекта, реализовала процесс авторизации и регистрации пользователя, разработала функционал игры Спринт, а также функцию получения слов для игр</p>\n                    <a href="https://github.com/Verigota/" class="member-card__github" target="_blank">\n                        <img class="member-card__github-img" src="./public/assets/icons/github.svg" alt="github">\n                        <span class="member-card__github-nickname">Verigota</span>\n                    </a>\n                </div>\n                <div class="member-card team__item">\n                    <img src="./public/assets/icons/avatar-1.svg" alt="memeber photo" class="member-card__photo">\n                    <p class="member-card__role">Developer</p>\n                    <p class="member-card__name">Артур</p>\n                    <p class="member-card__contribution">Разработал весь функционал раздела Учебник, в том числе отображение слов для авторизованного и анонимного пользователей, реализовал возможность добавления слов в изученные и сложные, а также оторажение статистики по отдельно взятому слову</p>\n                    <a href="https://github.com/Nozeil/" class="member-card__github" target="_blank">\n                        <img class="member-card__github-img" src="./public/assets/icons/github.svg" alt="github">\n                        <span class="member-card__github-nickname">Nozeil</span>\n                    </a>\n                </div>\n                <div class="member-card team__item">\n                    <img src="./public/assets/icons/avatar-3.svg" alt="memeber photo" class="member-card__photo">\n                    <p class="member-card__role">Developer</p>\n                    <p class="member-card__name">Евгений</p>\n                    <p class="member-card__contribution">Отвечал за верстку проекта, реализовал функционал игры Аудио Вызов, а также отображение и хранение дневной статистики</p>\n                    <a href="https://github.com/beaJeniuS/" class="member-card__github" target="_blank">\n                        <img class="member-card__github-img" src="./public/assets/icons/github.svg" alt="github">\n                        <span class="member-card__github-nickname">beaJeniuS</span>\n                    </a>\n                </div>\n                <div class="member-card team__item">\n                    <img src="./public/assets/icons/avatar-4.svg" alt="memeber photo" class="member-card__photo">\n                    <p class="member-card__role">Mentor</p>\n                    <p class="member-card__name">Дмитрий</p>\n                    <p class="member-card__contribution">Проводил кодревью, консультировал по сложным вопросам, возникавшим в ходе разработки</p>\n                </div>\n                </section>'],name:"main"},g={sections:['<section class="choice-panel content__item">\n                <div class="choice">\n                    <h2 class="choice__title">Мини игры</h2>\n                    <div class="choice__wrap sprint">\n                        <h3 class="choice__name">Спринт</h3>\n                        <img src="./public/assets/images/sprint.png" width="40" height="40" alt="" class="choice__img">\n                        <button class="choice__btn" id="sprint-game">\n                            <img src="./public/assets/icons/timer.svg" width="50" height="50" alt="">\n                        </button>\n                    </div>\n                    <div class="choice__wrap audio">\n                        <h3 class="choice__name">Аудиовызов</h3>\n                        <img src="./public/assets/images/audio.png" width="40" height="40" alt="" class="choice__img">\n                        <button class="choice__btn" id="audio-game">\n                            <img src="./public/assets/icons/sound.svg" width="50" height="50" alt="">\n                        </button>\n                    </div>\n                    <div class="choice__levels">\n                        <a id="A1" href="#" class="choice__level">A1</a>\n                        <a id="A2" href="#" class="choice__level">A2</a>\n                        <a id="B1" href="#" class="choice__level">B1</a>\n                        <a id="B2" href="#" class="choice__level">B2</a>\n                        <a id="C1" href="#" class="choice__level">C1</a>\n                        <a id="C2" href="#" class="choice__level">C2</a>\n                    </div>\n                    <div class="choice__hint">\n                        <p>Выберите уровень сложности</p>\n                    </div>\n                </div>\n            </section>'],name:"gamechoice"},f={sections:['\n            <section class="game content__item">\n                <div class="game__about">\n                    <h2 class="game__title">Аудиовызов</h2>\n                    <p class="game__desc">Используйте  эту тренировку для улучшения восприятия речи на слух.</p>\n                    <img class="game__icon" src="./public/assets/images/audio.png" width="300" height="150" alt="">\n                </div>\n                <div class="game__help">\n                    <p class="game__help-item">Для игры с помощью клавиатуры, используйте клавиши:</p>\n                    <p class="game__help-item">1, 2, 3, 4, 5 - чтобы дать ответ,</p>\n                    <p class="game__help-item">space - для воспроизведения звука,</p>\n                    <p class="game__help-item">enter - чтобы пропустить вопрос,</p>\n                    <p class="game__help-item">стрелка-вправо - чтобы перейти к следующему вопросу.</p>\n                </div>\n                <div class="game__start">\n                    <button class="game__start-btn button">Начнём!</button>\n                </div>\n            </section>'],name:"audiogame-start"},m={sections:['\n            <section class="game content__item" tabindex="-1">\n                <div class="game__audio">\n                    <a href="#" class="game__audio-btn">\n                        <img class="game__audio-question" src="./public/assets/icons/sound-beat.svg" alt="answer image">\n                        <img class="game__audio-answer" src="./public/assets/icons/question.svg" alt="question image">\n                    </a>\n                </div>\n                <div class="answers game__answers">\n                    <a id="answer1" href="#" class="answer answers__item">\n                        <img src="./public/assets/icons/success.svg" width="30" height="30" alt="ok" class="answer__ok">\n                        <img src="./public/assets/icons/cancel.svg" width="30" height="30" alt="fault" class="answer__fault">\n                        <p class="answer__help">1</p>\n                        <p class="answer__text">Перевод</p>\n                    </a>\n                    <a id="answer2" href="#" class="answer answers__item">\n                        <img src="./public/assets/icons/success.svg" width="30" height="30" alt="ok" class="answer__ok">\n                        <img src="./public/assets/icons/cancel.svg" width="30" height="30" alt="fault" class="answer__fault">\n                        <p class="answer__help">2</p>\n                        <p class="answer__text">Перевод</p>\n                    </a>\n                    <a id="answer3" href="#" class="answer answers__item">\n                        <img src="./public/assets/icons/success.svg" width="30" height="30" alt="ok" class="answer__ok">\n                        <img src="./public/assets/icons/cancel.svg" width="30" height="30" alt="fault" class="answer__fault">\n                        <p class="answer__help">3</p>\n                        <p class="answer__text">Перевод</p>\n                    </a>\n                    <a id="answer4" href="#" class="answer answers__item">\n                        <img src="./public/assets/icons/success.svg" width="30" height="30" alt="ok" class="answer__ok">\n                        <img src="./public/assets/icons/cancel.svg" width="30" height="30" alt="fault" class="answer__fault">\n                        <p class="answer__help">4</p>\n                        <p class="answer__text">Перевод</p>\n                    </a>\n                    <a id="answer5" href="#" class="answer answers__item">\n                        <img src="./public/assets/icons/success.svg" width="30" height="30" alt="ok" class="answer__ok">\n                        <img src="./public/assets/icons/cancel.svg" width="30" height="30" alt="fault" class="answer__fault">\n                        <p class="answer__help">5</p>\n                        <p class="answer__text">Перевод</p>\n                    </a>\n                </div>\n                <div class="game__skip">\n                    <button class="game__skip-btn button" data-word="не знаю">Не знаю</button>\n                </div>\n            </section>'],name:"audiogame-body"},_={sections:['\n            <section class="game content__item">\n                <div class="game__about">\n                    <h2 class="game__title">Спринт</h2>\n                    <p class="game__desc">Используйте эту тренировку для того, чтобы проверить насколько хорошо вы запомнили слова</p>\n                    <img class="game__icon" src="./public/assets/images/sprint.png" width="300" height="150" alt="">\n                </div>\n                <div class="game__help sprint__help">\n                    <p class="game__help-item">Чтобы дать ответ с помощью клавиатуры, используйте клавиши:</p>\n                    <p class="game__help-item">стрелка влево, стрелка вправо</p>\n                </div>\n                <div class="game__start">\n                    <button class="game__start-btn button">Начнём!</button>\n                </div>\n            </section>'],name:"sprintgame-start"},w={sections:['\n<section class="game content__item" tabindex="-1">\n                    <div class="game__timer-wrap">\n                        <div class="timer">\n                            <div class="timer__line"></div>\n                            <div class="timer__body">\n                                <div class="timer__counter">\n                                    <span>1</span>\n                                    <span>2</span>\n                                    <span>3</span>\n                                    <span>4</span>\n                                    <span>5</span>\n                                    <span>6</span>\n                                    <span>7</span>\n                                    <span>8</span>\n                                    <span>9</span>\n                                    <span>10</span>\n                                    <span>11</span>\n                                    <span>12</span>\n                                    <span>13</span>\n                                    <span>14</span>\n                                    <span>15</span>\n                                    <span>16</span>\n                                    <span>17</span>\n                                    <span>18</span>\n                                    <span>19</span>\n                                    <span>20</span>\n                                    <span>21</span>\n                                    <span>22</span>\n                                    <span>23</span>\n                                    <span>24</span>\n                                    <span>25</span>\n                                    <span>26</span>\n                                    <span>27</span>\n                                    <span>28</span>\n                                    <span>29</span>\n                                    <span>30</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="game__questions">\n                        <p class="game__word" id="engWord">Слово</p>\n                        <p class="game__word-translate" id="translation">Перевод</p>\n                    </div>\n                    <div class="game__answer-btns">\n                        <button id="answer1" href="#" class="answer answer-btns__item" name="right">\n                            <img src="./public/assets/icons/success.svg" width="30" height="30" alt="ok" class="answer__ok">\n                            <img src="./public/assets/icons/cancel.svg" width="30" height="30" alt="fault" class="answer__fault">\n                            <p class="answer__text">Верно</p>\n                        </button>\n                        <button id="answer2" href="#" class="answer answer-btns__item" name="wrong">\n                            <img src="./public/assets/icons/success.svg" width="30" height="30" alt="ok" class="answer__ok">\n                            <img src="./public/assets/icons/cancel.svg" width="30" height="30" alt="fault" class="answer__fault">\n                            <p class="answer__text">Не верно</p>\n                        </button>\n                    </div>\n               </section>'],name:"sprintgame-body"},B={sections:['\n                <a href="#header" class="popup__area"></a>\n                <div class="popup__body">\n                    <div class="popup__content">\n                        <a href="#header" class="popup__close">\n                            <img src="./public/assets/icons/cross.svg" alt="close">\n                        </a>\n                        <div class="popup__title">\n                            <h2 id="popup-title" class="popup__title-text">Заголовок попап</h2>\n                        </div>\n                        <p class="popup__message">Не вызывает сомнений, что курс на социально-ориентированный национальный проект напрямую зависит от поэтапного и последовательного развития общества. Следует отметить, что социально-экономическое развитие напрямую зависит от дальнейших направлений развития. Значимость этих проблем настолько очевидна, что реализация намеченных плановых заданий способствует повышению качества экономической целесообразности принимаемых изменений. Для современного мира социально-экономическое развитие играет важную роль в формировании прогресса профессионального общества. Идейные соображения высшего порядка, а также курс на социально-ориентированный национальный проект позволяет выполнять важные задания по разработке системы массового участия. Прежде всего начало повседневной работы по формированию позиции обеспечивает широкому кругу специалистов направлений прогрессивного развития. Прежде всего консультация с широким активом напрямую зависит от системы массового участия. Не вызывает сомнений, что новая модель организационной деятельности напрямую зависит от поставленных обществом и правительством задач. Прежде всего новая модель организационной деятельности напрямую зависит от системы массового участия. Для современного мира рамки и место обучения кадров позволяет выполнять важные задания по разработке направлений прогрессивного развития.</p>\n                        <button class="popup__close-btn">Закрыть</button>\n                    </div>\n                </div>\n'],name:"message"},b={sections:['\n                <a href="#header" class="popup__area"></a>\n                <div class="popup__content game-stat">\n                    <a href="#header" class="popup__close">\n                        <img src="./public/assets/icons/cross.svg" alt="close">\n                    </a>\n                    <div class="game-stat__about">\n                        <h2 class="game-stat__title">Результаты игры</h2>\n                        <p class="game-stat__result">Ваш результат <span class="game-stat__result-val">250</span></p>\n                        <p class="game-stat__serie">Длина серии: <span class="game-stat__serie-val">10</span></p>\n                    </div>\n                    <div class="game-stat__container">\n                        <div class="game-stat__slider">\n                            <div id="game-stat-common" class="game-stat__item">\n                                <div class="game-stat__percent"><span>50</span>%</div>\n                            </div>\n                            <div id="game-stat-answers" class="game-stat__item">\n                                <p class="stat-header header-errors">Ошибки: <span class="game-stat__errors">10</span></p>\n                                <div class="game-stat__errors-words"></div>\n                                <div class="stat-separator"></span></div>\n                                <p class="stat-header header-rights">Правильные: <span class="game-stat__rights">5</span></p>\n                                <div class="game-stat__rights-words"></div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="game-stat__pagination">\n                        <a id="game-stat-left" href="#" class="game-stat__pag-btn active-page"></a>\n                        <a id="game-stat-right" href="#" class="game-stat__pag-btn"></a>\n                    </div>\n                    <div class="game-stat__action">\n                        <button class="button game-stat__restart">Cнова</button>\n                        <button class="button game-stat__game-select">Игры</button>\n                    </div>\n                </div>'],name:"game-statistics"},v={sections:['\n            <section class="statistics content__item">\n                <div class="statistics__today">\n                    <h2 class="section-title statistics__title">Статистика за сегодня</h2>\n                    <div class="statistics__today-item">\n                        <p class="statistics__value" id="statistics-newwords">0</p>\n                        <p class="statistics__hint">новых слов</p>\n                    </div>\n                    <div class="statistics__today-item">\n                        <p class="statistics__value"><span id="statistics-percent">0</span>%</p>\n                        <p class="statistics__hint">правильных ответов</p>\n                    </div>\n                    <div class="statistics__today-item">\n                        <p class="statistics__value" id="statistics-learnt">0</p>\n                        <p class="statistics__hint">слов изучено</p>\n                    </div>\n                </div>\n                <div class="statistics__games">\n                    <div class="game-stat-el statistics__games-item">\n                        <h3 class="game-stat-el__title">Спринт</h3>\n                        <div class="game-stat-el__item">\n                            <img class="game-stat-el__item-img" src="./public/assets/icons/stat-learnt.svg" width="30" height="30" alt="learnt">\n                            <p class="game-stat-el__item-text">Изучено <span id="sprint-learnt">0</span> слов.</p>\n                        </div>\n                        <div class="game-stat-el__item">\n                            <img class="game-stat-el__item-img" src="./public/assets/icons/stat-rights.svg" width="30" height="30" alt="learnt">\n                            <p class="game-stat-el__item-text">Правильных ответов: <span id="sprint-right-answers">0</span>%.</p>\n                        </div>\n                        <div class="game-stat-el__item">\n                            <img class="game-stat-el__item-img" src="./public/assets/icons/stat-longserie.svg" width="30" height="30" alt="learnt">\n                            <p class="game-stat-el__item-text">Самая длинная цепочка <span id="sprint-longest-serie">0</span> слов.</p>\n                        </div>\n                        <div class="game-stat-el__decor"></div>\n                    </div>\n                    <div class="game-stat-el statistics__games-item">\n                        <h3 class="game-stat-el__title">Аудио вызов</h3>\n                        <div class="game-stat-el__item">\n                            <img class="game-stat-el__item-img" src="./public/assets/icons/stat-learnt.svg" width="30" height="30" alt="learnt">\n                            <p class="game-stat-el__item-text">Изучено <span id="audiocall-learnt">0</span> слов.</p>\n                        </div>\n                        <div class="game-stat-el__item">\n                            <img class="game-stat-el__item-img" src="./public/assets/icons/stat-rights.svg" width="30" height="30" alt="learnt">\n                            <p class="game-stat-el__item-text">Правильных ответов: <span id="audiocall-right-answers">0</span>%.</p>\n                        </div>\n                        <div class="game-stat-el__item">\n                            <img class="game-stat-el__item-img" src="./public/assets/icons/stat-longserie.svg" width="30" height="30" alt="learnt">\n                            <p class="game-stat-el__item-text">Самая длинная цепочка <span id="audiocall-longest-serie">0</span> слов.</p>\n                        </div>\n                        <div class="game-stat-el__decor"></div>\n                    </div>\n                </div>\n            </section>'],name:"statistics"},x=class{constructor(){this.content=null,this.currentView="",this.content=document.querySelector(".content"),this.content.innerHTML=""}render(){return null!==this.content&&(this.content.innerHTML=C.sections.join("")),Promise.resolve()}},y="rsLangHandbookData",k="handbookComplicatedWords",E="complicatedWordsPage";function S(){return JSON.parse(localStorage.getItem(y))}function D(r,e,n,t){localStorage.setItem(y,JSON.stringify({group:r,page:e,currPage:n,activeWordCardIndex:t}))}function I(){return JSON.parse(localStorage.getItem(k))}function L(r,e,n){localStorage.setItem(k,JSON.stringify({page:r,currPage:e,activeWordCardIndex:n}))}class j{constructor(){this.wordInfoAudioHandler=(r,e,n)=>{const[t,i,o]=[[r.audioMeaning,r.audioExample,r.audio],e,n];i.src=`${this.baseURL}/${t[o.numOfPlays]}`,o.numOfPlays+=1,o.numOfPlays!==t.length?i.play():o.numOfPlays=0},this.herokuApi=l,this.baseURL=i().defaults.baseURL,this.diffBetweenArrIndexAndPageNum=1,this.firstCardIndex=0}async getChunkOfWords(r,e){return await this.herokuApi.getChunkOfWords(r,e)}async getWordWithAssetsById(r){return await this.herokuApi.getWordWithAssetsById(r)}async getAllUserAggregatedHardWords(r){return this.herokuApi.getAllUserAggregatedHardWords(r)}async complicatedWordsCardHandler(){return await this.herokuApi.getUserWords()}async handbookButtonHandler(){S()||D(0,0,1,0);const r=S(),{group:e,page:n}=r;return{wordsData:(await this.getChunkOfWords(e,n)).data,rsLangHandbookData:r}}async levelCardHandler(r,e,n,t,i,o,a,s,l){r.classList.remove("active-level-card"),e.classList.add("active-level-card");const[c,A,d,u]=[(await this.getChunkOfWords(n,t)).data,a,s,l];return D(n,t,i,o),A.textContent="1",d.disabled=!0,u.disabled=!1,c}complicatedWordsButtonHandler(r,e){this.herokuApi.updateOrCreateUserWord(r,e),L(0,1,0)}learnedWordsButtonHandler(r,e){this.herokuApi.updateOrCreateUserWord(r,e)}async wordCardHandler(r,e,n,t){e.classList.remove("active-word-card"),r.classList.add("active-word-card"),"complicatedWords"===t?function(r,e){const n=I();L(n.currPage-r,n.currPage,e)}(this.diffBetweenArrIndexAndPageNum,n):function(r,e){const n=S();D(n.group,n.currPage-r,n.currPage,e)}(this.diffBetweenArrIndexAndPageNum,n)}async wordsPaginationButtonHandler(r,e,n,t,i,o){const a="handbook"===o,s=a?S():I(),[l,c,A]=[e,r,t];l.disabled=!1,s.currPage+=n,s.page+=n,s.currPage===i&&(c.disabled=!0),a?D(s.group,s.currPage-this.diffBetweenArrIndexAndPageNum,s.currPage,this.firstCardIndex):L(s.currPage-this.diffBetweenArrIndexAndPageNum,s.currPage,this.firstCardIndex);const d=a?(await this.getChunkOfWords(s.group,s.page)).data:(await this.getAllUserAggregatedHardWords(s.page)).data[0].paginatedResults;return A.textContent=`${s.currPage}`,d}async removeCardButtonHandler(r,e,n,t){const i="id"in r?r.id:r._id;await this.herokuApi.updateOrCreateUserWord(i,s.process);const o=I();L(1===n&&o.page>0?o.page-1:o.page,1===n&&o.currPage>1?o.currPage-1:o.currPage,0),e(t,this)}async getUserWords(){return await this.herokuApi.getUserWords()}async getWordStatistic(r){return this.herokuApi.getWordStatistic(r)}}var W;!function(r){r.handbook="handbook",r.complicatedWords="complicatedWords"}(W||(W={}));const q=W;class ${constructor(){this.content=document.querySelector("#main")}render(){return this.content.innerHTML=m.sections.join(""),Promise.resolve()}}function R(r,e){const n=r[0].paginatedResults.map((r=>r._id));return e.filter((r=>!n.includes(r.id)))}async function G(r){if(void 0!==r.page){const e=a.get(),n=localStorage.getItem("complicatedWordsPage");let{page:t}=r;if(e){if(n){const r=localStorage.getItem("handbookComplicatedWords");let e=JSON.parse(r).page,n=(await l.getAllUserAggregatedHardWords(e)).data[0].paginatedResults;for(;n.length<20&&e>0;){e-=1;const r=(await l.getAllUserAggregatedHardWords(e)).data[0].paginatedResults;n=n.concat(r)}return n.map((r=>Object.assign(Object.assign({},r),{id:r._id})))}const i=[l.getLearntUserWords(e.userId),l.getChunkOfWords(r.level,t)],[o,a]=await Promise.all(i);let s=R(o.data,a.data);for(;s.length<20&&t>0;){t-=1;const e=await l.getChunkOfWords(r.level,t);s=s.concat(R(o.data,e.data))}return s}return(await l.getChunkOfWords(r.level,r.page)).data}const e=Math.floor(31*Math.random());return(await l.getChunkOfWords(r.level,e)).data}function P(){return{date:Date(),allGamesRight:0,allGamesWrong:0,allGamesRightPercent:0,allNewWords:0,wordList:[],games:{audiocall:{rightPercent:0,bestSerie:0,right:0,wrong:0,newWords:0,wordList:[]},sprint:{rightPercent:0,bestSerie:0,right:0,wrong:0,newWords:0,wordList:[]}}}}class Y{constructor(){this.currentSerieLength=0;const r=localStorage.getItem("user");this.user=null===r?{token:"",refreshToken:"",userId:"unauthorized",name:"unauthorized"}:JSON.parse(r),this.currentStat=this.getCurrentUserStatistics()}getCurrentUserStatistics(){const r=localStorage.getItem(`stat-${this.user.userId}`);if(null!==r){const e=JSON.parse(r),n=new Date,t=new Date(e.date);return n.getDate()===t.getDate()&&n.getMonth()===t.getMonth()&&n.getFullYear()===t.getFullYear()?e:(this.currentStat=P(),this.setCurrentUserStatistics(),this.currentStat)}return this.currentStat=P(),this.setCurrentUserStatistics(),this.currentStat}setCurrentUserStatistics(){null!==this.currentStat&&localStorage.setItem(`stat-${this.user.userId}`,JSON.stringify(this.currentStat))}updateGameStat(r,e){var n;const t=Object.assign({},null===(n=this.currentStat)||void 0===n?void 0:n.games[r]);Object.prototype.hasOwnProperty.call(t,"wrong")?t.wrong+=e.wrong:t.wrong=e.wrong,Object.prototype.hasOwnProperty.call(t,"right")?t.right+=e.right:t.right=e.right,Object.prototype.hasOwnProperty.call(t,"bestSerie")?t.bestSerie<e.bestSerie&&(t.bestSerie=e.bestSerie):t.bestSerie=e.bestSerie,t.rightPercent=t.right/(t.right+t.wrong),e.wordList.forEach((r=>{t.wordList.find((e=>e.id===r.id))||t.wordList.push(r)})),t.newWords=e.wordList.length,this.updateUserStat()}updateWord(r,e,n){"right"===n?(this.currentStat.games[r].right+=1,this.currentSerieLength+=1,this.currentSerieLength>this.currentStat.games[r].bestSerie&&(this.currentStat.games[r].bestSerie=this.currentSerieLength)):(this.currentSerieLength=0,this.currentStat.games[r].wrong+=1),this.currentStat.games[r].rightPercent=Math.trunc(this.currentStat.games[r].right/(this.currentStat.games[r].right+this.currentStat.games[r].wrong)*100),this.currentStat.games[r].wordList.find((r=>r.id===e.id))||(this.currentStat.games[r].wordList.push(e),this.currentStat.games[r].newWords=this.currentStat.games[r].wordList.length),this.updateUserStat(),l.setAggregatedWord(e.id,r,n)}getGameStat(r){var e;return null===(e=this.currentStat)||void 0===e?void 0:e.games[r]}updateUserStat(){var r,e,n,t,i,o;if(Number.isNaN(null===(r=this.currentStat)||void 0===r?void 0:r.games.sprint.right)||Number.isNaN(null===(e=this.currentStat)||void 0===e?void 0:e.games.audiocall.right)||(this.currentStat.allGamesRight=this.currentStat.games.audiocall.right+this.currentStat.games.sprint.right),Number.isNaN(null===(n=this.currentStat)||void 0===n?void 0:n.games.sprint.wrong)||Number.isNaN(null===(t=this.currentStat)||void 0===t?void 0:t.games.audiocall.wrong)||(this.currentStat.allGamesWrong=this.currentStat.games.audiocall.wrong+this.currentStat.games.sprint.wrong),!Number.isNaN(null===(i=this.currentStat)||void 0===i?void 0:i.games.sprint.wrong)&&!Number.isNaN(null===(o=this.currentStat)||void 0===o?void 0:o.games.audiocall.wrong)){const r=this.currentStat.games.audiocall.wrong,e=this.currentStat.games.audiocall.right,n=this.currentStat.games.sprint.wrong,t=this.currentStat.games.sprint.right;this.currentStat.allGamesRightPercent=Math.trunc((e+t)/(r+e+n+t)*100)}this.currentStat.games.audiocall.wordList.length>0&&this.currentStat.games.audiocall.wordList.forEach((r=>{this.currentStat.wordList.find((e=>e.id===r.id))||this.currentStat.wordList.push(r)})),this.currentStat.games.sprint.wordList.length>0&&this.currentStat.games.sprint.wordList.forEach((r=>{this.currentStat.wordList.find((e=>e.id===r.id))||this.currentStat.wordList.push(r)})),this.currentStat.allNewWords=this.currentStat.wordList.length,this.setCurrentUserStatistics()}}var U=n(6486),F=n.n(U);function T(r){return r.rightTranslation===r.translation?"right":"wrong"}class J{constructor(r){this.gameWords=r,this.currentStage=this.createNewStage(),this.api=l}getRandomWord(){const r=this.gameWords.length,e=Math.floor(Math.random()*r);return this.gameWords[e]}createNewStage(){var r,e;const n=this.getRandomWord(),t=null==n?void 0:n.word,i=null==n?void 0:n.wordTranslate,o=F().shuffle([i,null===(r=this.getRandomWord())||void 0===r?void 0:r.wordTranslate,null===(e=this.getRandomWord())||void 0===e?void 0:e.wordTranslate]);return{engWord:t,rightTranslation:i,translation:o[0]?o[0]:o[1],sound:null==n?void 0:n.audio,word:n}}goToNextStage(){this.currentStage=this.createNewStage()}}const O={childList:!0};class z{constructor(r,e){this.bestSerie=0,this.currSerie=0,this.game=new J(r),this.content=document.querySelector("#main"),this.api=l,this.currentAudio=new Audio,this.rightAnswerAudio=new Audio("public/assets/audio/right.mp3"),this.wrongAnswerAudio=new Audio("public/assets/audio/wrong.mp3"),this.wrongAnswers=[],this.rightAnswers=[],this.dayStat=new Y,this.words=r,this.returnView=e,this.keyDownHandler=this.keyDownHandler.bind(this),this.timerId=null,this.counter=0}renderStage(){var r;if(this.words.length<5&&this.words.length<=this.counter)new Z(this.bestSerie,this.wrongAnswers,this.rightAnswers,new z(this.words,this.returnView),this.returnView).render(),this.timerId&&clearTimeout(this.timerId),null===(r=document.querySelector(".timer"))||void 0===r||r.classList.remove("start");else{const r=this.content.querySelectorAll(".answer");null==r||r.forEach((r=>null==r?void 0:r.classList.remove("fault","ok")));const e=this.content.querySelector("#engWord");this.currentAudio=new Audio(`${i().defaults.baseURL}/${this.game.currentStage.sound}`),this.currentAudio.play();const n=this.content.querySelector("#translation");e.innerHTML=this.game.currentStage.engWord,n.innerHTML=this.game.currentStage.translation}}render(){var r;return this.content.innerHTML=w.sections.join(""),this.addEventHandlers(),this.timerId=setTimeout((()=>{new Z(this.bestSerie,this.wrongAnswers,this.rightAnswers,new z(this.words,this.returnView),this.returnView).render()}),3e4),new MutationObserver((r=>{r.forEach((r=>{"childList"===r.type&&this.timerId&&(clearTimeout(this.timerId),document.removeEventListener("keydown",this.keyDownHandler))}))})).observe(this.content,O),this.renderStage(),null===(r=document.querySelector(".timer"))||void 0===r||r.classList.add("start"),Promise.resolve()}start(){this.render()}restart(){this.render()}addEventHandlers(){const r=this.content.querySelectorAll(".answer");null==r||r.forEach((r=>{r.addEventListener("click",(()=>{this.counter+=1,r.name===T(this.game.currentStage)?(null==r||r.classList.add("ok"),this.rightAnswerAudio.play(),this.currSerie+=1,this.bestSerie<this.currSerie&&(this.bestSerie=this.currSerie),this.rightAnswers.push(Object.assign({},this.game.currentStage.word)),this.dayStat.updateWord("sprint",this.game.currentStage.word,"right")):(null==r||r.classList.add("fault"),this.wrongAnswerAudio.play(),this.currSerie=0,this.wrongAnswers.push(Object.assign({},this.game.currentStage.word)),this.dayStat.updateWord("sprint",this.game.currentStage.word,"wrong")),this.game.goToNextStage(),setTimeout((()=>this.renderStage()),600)}))})),document.addEventListener("keydown",this.keyDownHandler)}keyDownHandler(r){var e,n,t,i;"ArrowRight"===r.code&&(this.counter+=1,r.stopPropagation(),"wrong"===T(this.game.currentStage)?(null===(e=this.content.querySelector("#answer2"))||void 0===e||e.classList.add("ok"),this.rightAnswerAudio.play(),this.currSerie+=1,this.bestSerie<this.currSerie&&(this.bestSerie=this.currSerie),this.rightAnswers.push(Object.assign({},this.game.currentStage.word)),this.dayStat.updateWord("sprint",this.game.currentStage.word,"right")):(null===(n=this.content.querySelector("#answer2"))||void 0===n||n.classList.add("fault"),this.wrongAnswerAudio.play(),this.currSerie=0,this.wrongAnswers.push(Object.assign({},this.game.currentStage.word)),this.dayStat.updateWord("sprint",this.game.currentStage.word,"wrong")),this.game.goToNextStage(),setTimeout((()=>this.renderStage()),600)),"ArrowLeft"===r.code&&(this.counter+=1,r.stopPropagation(),"right"===T(this.game.currentStage)?(null===(t=this.content.querySelector("#answer1"))||void 0===t||t.classList.add("ok"),this.rightAnswerAudio.play(),this.currSerie+=1,this.bestSerie<this.currSerie&&(this.bestSerie=this.currSerie),this.rightAnswers.push(Object.assign({},this.game.currentStage.word)),this.dayStat.updateWord("sprint",this.game.currentStage.word,"right")):(null===(i=this.content.querySelector("#answer1"))||void 0===i||i.classList.add("fault"),this.wrongAnswerAudio.play(),this.currSerie=0,this.wrongAnswers.push(Object.assign({},this.game.currentStage.word)),this.dayStat.updateWord("sprint",this.game.currentStage.word,"wrong")),this.game.goToNextStage(),setTimeout((()=>this.renderStage()),600))}}class H{constructor(r,e){this.content=document.querySelector("#main"),this.selectedLevel=null==r?void 0:r.level,this.page=r.page,this.returnView=e}async render(){var r;if(null===(r=document.querySelector(".footer"))||void 0===r||r.classList.add("hidden"),this.content.innerHTML=_.sections.join(""),null!==this.selectedLevel){const r=null!==this.page?await G({level:this.selectedLevel,page:this.page}):await G({level:this.selectedLevel});this.setGamesButtonsActions(r)}}setGamesButtonsActions(r){document.querySelector(".game__start-btn").addEventListener("click",(()=>{new z(r,this.returnView).render()}))}}class N{constructor(r,e){this.content=document.querySelector("body"),this.title=r,this.message=e}render(){const r=document.createElement("div");r.classList.add("popup"),r.setAttribute("id","message"),r.innerHTML=B.sections.join(""),this.content.append(r),setTimeout((()=>{r.classList.add("open")}),100);const e=r.querySelector("#popup-title"),n=r.querySelector(".popup__message");return e.innerText=this.title,n.innerText=this.message,[r.querySelector(".popup__area"),r.querySelector(".popup__close"),r.querySelector(".popup__close-btn")].forEach((e=>{e.addEventListener("click",(()=>{r.classList.remove("open"),r.remove(),setTimeout((()=>{r.remove()}),500)}))})),Promise.resolve()}}const Q={A1:0,A2:1,B1:2,B2:3,C1:4,C2:5};class K{constructor(){this.content=document.querySelector("#main"),this.selectedLevel=null}render(){this.content.innerHTML=g.sections.join(""),function(){const r=document.querySelectorAll(".choice__level");r.forEach((e=>{e.addEventListener("click",(()=>{const n=e.classList.contains("selected");r.forEach((r=>{r.classList.remove("selected")})),n||e.classList.add("selected")}))}))}(),document.querySelector("#sprint-game").addEventListener("click",(()=>{null!=this.selectedLevel?new H({level:this.selectedLevel},this).render():new N("Не выбран уровень сложности!","Выберите уровень сложности, чтобы продолжить!").render()})),document.querySelector("#audio-game").addEventListener("click",(()=>{null!=this.selectedLevel?new nr({level:this.selectedLevel},this).render():new N("Не выбран уровень сложности!","Выберите уровень сложности, чтобы продолжить!").render()}));const r=document.querySelector(".choice__levels");return null==r||r.addEventListener("click",(r=>{const e=r.target;this.setSelectedLevel(e.id)})),Promise.resolve()}setSelectedLevel(r){this.selectedLevel=Q[r]}}const M=()=>{const r=document.querySelector(".popup");r.classList.remove("open"),setTimeout((()=>{r.remove()}),500)},V=i().defaults.baseURL;function X(r,e){const n="right"===r?document.querySelector(".game-stat__rights-words"):document.querySelector(".game-stat__errors-words");e.forEach((r=>{const e=document.createElement("div");e.classList.add("game-stat__el"),e.innerHTML='\n                            <a href="#" class="game-stat__el-play">\n                                <img src="./public/assets/icons/play.svg" alt="play">\n                                <p class="game-stat__el-word"></p>\n                                <p class="game-stat__el-dash">-</p>\n                                <p class="game-stat__el-transl"></p>\n                            </a>'.replace('<p class="game-stat__el-word"></p>',`<p class="game-stat__el-word">${r.word}</p>`).replace('<p class="game-stat__el-transl"></p>',`<p class="game-stat__el-transl">${r.wordTranslate}</p>`).replace('<a href="#" class="game-stat__el-play">',`<a href="#" class="game-stat__el-play" data-audio="${r.audio}">`),n.appendChild(e),e.addEventListener("click",(()=>{new Audio(`${V}/${r.audio}`).play()}))}))}class Z{constructor(r,e,n,t,i){this.content=document.querySelector("body"),this.wrongWords=[...e],this.rightWords=[...n],this.game=t,this.returnToView=i,this.bestSerie=r}render(){const r=document.createElement("div");r.classList.add("popup"),r.setAttribute("id","game-stat"),r.innerHTML=b.sections.join(""),this.content.append(r),setTimeout((()=>{r.classList.add("open")}),100);const e=document.querySelector(".game-stat__rights"),n=document.querySelector(".game-stat__rights-words"),t=document.querySelector(".header-rights"),i=document.querySelector(".game-stat__errors"),o=document.querySelector(".game-stat__errors-words"),a=document.querySelector(".header-errors"),s=document.querySelector(".stat-separator");this.rightWords.length>0?(e.innerText=this.rightWords.length.toString(),X("right",this.rightWords)):(t.classList.add("hide"),n.classList.add("hide"),s.classList.add("hide")),this.wrongWords.length>0?(i.innerText=this.wrongWords.length.toString(),X("wrong",this.wrongWords)):(a.classList.add("hide"),o.classList.add("hide"),s.classList.add("hide"));const l=r.querySelector(".game-stat__game-select");l.addEventListener("click",(()=>{(new K).render()})),l.addEventListener("click",M);const c=r.querySelector(".game-stat__restart");c.addEventListener("click",M),c.addEventListener("click",(()=>{this.game.restart()})),r.querySelector(".popup__close").addEventListener("click",(e=>{e.preventDefault(),r.classList.remove("open"),this.returnToView.render(),setTimeout((()=>{r.remove()}),500)}));const A=r.querySelector(".game-stat__slider"),d=r.querySelector("#game-stat-left"),u=r.querySelector("#game-stat-right");d.addEventListener("click",(()=>{A.classList.remove("shift"),null==d||d.classList.toggle("active-page"),null==u||u.classList.toggle("active-page")})),u.addEventListener("click",(()=>{A.classList.add("shift"),null==d||d.classList.toggle("active-page"),null==u||u.classList.toggle("active-page")}));const p=this.wrongWords.length+this.rightWords.length,h=r.querySelector(".game-stat__percent span");if(p){const r=Math.trunc(this.rightWords.length/p*100);h.innerText=r.toString()}else h.innerText="0";return r.querySelector(".game-stat__result-val").innerText=(10*this.rightWords.length).toString(),r.querySelector(".game-stat__serie-val").innerText=this.bestSerie.toString(),Promise.resolve()}}function rr(r,e){const n=[["реклама","знают","батарея","черный","чистый","город","страна","развивать","электрический","в конце концов","стакан","факт","история","природа","никогда","пластик","люди","проблема","улица","считать"],["древний","академия","доска","век","концерт","округ","подсказка","толковый словарь","существовать","квартира","джентльмен","скрытый","может быть","офицер","фунт","обработать","оригинальный","публиковать","театр","богатство"],["скамейка","ромашка","спор","пустой","ужастик","инцидент","туман","объект","сирота","беременный","сюжет","ярость","месть","позор","вздох","красться","запасной","стебель","ужин","тендер"],["астрология","пара","отклоняться","дифференцировать","сорвать","уравнение","ошибочный","неистовый","непреднамеренное","импровизировать","моряк","широта","множество","неизменность","вращаются","неприятность","успокаивают","мель","техника"],["аффект","автограф","шарик","заварить","очарование","судьба","оборудование","рог","раздраженный","лаг","кошмарный сон","питательный","белок","подпись","материал","подсознание","ван","предупредить","разрабатывать","увеличить"],["аккумулируют","антенна","устройство","разрядка","лавина","нетронутый","согласованность","эпизод","смертный","горький","предзнаменование","пасмурная погода","следопыт","щебень","боком","рыдать","уединиться","трезвый","пятнышко","воспитание"]],t=e.map((r=>r.wordTranslate)).filter((e=>e!==r.wordTranslate)).sort((()=>.5-Math.random())).slice(0,4);if(t.length<4){const e=n[r.group].sort((()=>.5-Math.random()));for(let r=0;r<e.length&&(t.includes(e[r])||t.push(e[r]),4!==t.length);r+=1);}return t}class er{constructor(r,e){this.stages=[],this.gameCtrls=null,this.view=null,this.bestSerie=0,this.currSerie=0,this.api=l,this.words=[...r.sort((()=>.5-Math.random()))],this.createStages(),this.currentStage=0,this.baseURL=i().defaults.baseURL,this.wrongAnswers=[],this.rightAnswers=[],this.returnToView=e,this.currentAudio=new Audio,this.rightAnswerAudio=new Audio("public/assets/audio/right.mp3"),this.wrongAnswerAudio=new Audio("public/assets/audio/wrong.mp3"),this.dayStat=new Y,this.answerClick=r=>{r.stopPropagation(),this.resetMouseEvents();let e=null;e=r.target instanceof HTMLParagraphElement?r.target.parentElement:r.target;const n=e.getAttribute("data-word");this.checkAnswer(n,e),this.resetKeyboardEvents()},this.keyDownHandler=r=>{r.stopPropagation();let e=null;switch(r.code){case"Digit1":case"Numpad1":e=this.gameCtrls.answers[0];break;case"Digit2":case"Numpad2":e=this.gameCtrls.answers[1];break;case"Digit3":case"Numpad3":e=this.gameCtrls.answers[2];break;case"Digit4":case"Numpad4":e=this.gameCtrls.answers[3];break;case"Digit5":case"Numpad5":e=this.gameCtrls.answers[4];break;case"Space":this.currentAudio.play();break;case"Enter":case"NumpadEnter":case"ArrowRight":e=document.querySelector(".game__skip-btn")}if(null!=e){r.preventDefault(),e.classList.add("active"),setTimeout((()=>{null!=e&&e.classList.remove("active")}),200);const n=e.getAttribute("data-word");this.checkAnswer(n,e),this.resetKeyboardEvents()}}}start(){this.view=new $,this.view.render().then((()=>{this.gameCtrls=function(){const r={playBtn:null,skipBtn:null,answers:[],texts:[]};r.playBtn=document.querySelector(".game__audio-btn"),r.skipBtn=document.querySelector(".game__skip-btn");for(let e=1;e<=5;e+=1){const n=document.querySelector(`#answer${e} .answer__text`);r.texts.push(n);const t=document.querySelector(`#answer${e}`);r.answers.push(t)}return r}()})).then((()=>{this.updateCurrentStage(),this.currentAudio.play()}))}checkAnswer(r,e){var n;if(null!==r){if(null==e||e.classList.add("hide-help"),r===this.stages[this.currentStage].word.wordTranslate)this.rightAnswerAudio.play(),this.currSerie+=1,this.bestSerie<this.currSerie&&(this.bestSerie=this.currSerie),this.rightAnswers.push(Object.assign({},this.stages[this.currentStage].word)),e.classList.add("ok"),this.dayStat.updateWord("audiocall",this.stages[this.currentStage].word,"right");else{const r=this.stages[this.currentStage].word.wordTranslate,t=null===(n=this.gameCtrls)||void 0===n?void 0:n.answers.find((e=>e.getAttribute("data-word")===r));t&&(t.classList.add("ok"),t.classList.add("hide-help")),this.wrongAnswerAudio.play(),this.currSerie=0,this.wrongAnswers.push(Object.assign({},this.stages[this.currentStage].word)),e.classList.add("fault"),this.dayStat.updateWord("audiocall",this.stages[this.currentStage].word,"wrong")}setTimeout((()=>{this.currentStage+=1,this.currentStage<this.stages.length?this.updateCurrentStage():new Z(this.bestSerie,this.wrongAnswers,this.rightAnswers,this,this.returnToView).render()}),500)}}setKeyboardEvents(){const r=document.querySelector(".game");r.focus(),r.addEventListener("keydown",this.keyDownHandler)}resetKeyboardEvents(){document.querySelector(".game").removeEventListener("keydown",this.keyDownHandler)}restart(){this.bestSerie=0,this.currSerie=0,this.createStages(),this.currentStage=0,this.wrongAnswers=[],this.rightAnswers=[],this.start()}setMouseEvents(){var r;this.gameCtrls.answers.forEach((r=>{r.addEventListener("click",this.answerClick)}));const e=document.querySelector(".game__audio-btn");null==e||e.addEventListener("click",(()=>{this.currentAudio.play()})),null===(r=document.querySelector(".game__skip-btn"))||void 0===r||r.addEventListener("click",this.answerClick)}resetMouseEvents(){this.gameCtrls.answers.forEach((r=>{r.removeEventListener("click",this.answerClick)}))}updateCurrentStage(){this.currentAudio=new Audio(`${this.baseURL}/${this.stages[this.currentStage].word.audio}`),this.currentAudio.play();const r=[...this.stages[this.currentStage].answers];r.push(this.stages[this.currentStage].word.wordTranslate),r.sort((()=>.5-Math.random()));for(let e=0;e<this.gameCtrls.texts.length;e+=1)this.gameCtrls.texts[e].innerText=r[e],this.gameCtrls.answers[e].setAttribute("data-word",r[e]),this.gameCtrls.answers[e].classList.remove("ok"),this.gameCtrls.answers[e].classList.remove("fault"),this.gameCtrls.answers[e].classList.remove("hide-help");setTimeout((()=>{this.setMouseEvents(),this.setKeyboardEvents()}),100)}createStages(){const r=[];this.words.forEach((e=>{r.push({word:Object.assign({},e),answers:rr(e,this.words)})})),this.stages=[...r]}}class nr{constructor(r,e){this.content=document.querySelector("#main"),this.selectedLevel=null==r?void 0:r.level,this.page=r.page,this.returnView=e}render(){var r;return null===(r=document.querySelector(".footer"))||void 0===r||r.classList.add("hidden"),this.content.innerHTML=f.sections.join(""),this.setGamesButtonsActions(),Promise.resolve()}setGamesButtonsActions(){document.querySelector(".game__start-btn").addEventListener("click",(async()=>{if(null!==this.selectedLevel){const r=null!==this.page?await G({level:this.selectedLevel,page:this.page}):await G({level:this.selectedLevel});new er(r,this.returnView).start()}}))}}function tr(r,e,n){const t=document.createElement(r);return t.className=e,n&&(t.innerHTML=n),t}function ir(r,e,n){const t=new Image;return t.className=r,t.src=e,t.alt=n,t}function or(r,e,n,t,i,o,a){const s=tr("div",r);return s.append(tr("h5",e,n),tr("p",t,`${i}`),tr("p",o,`${a}`)),s}class ar{constructor(){this.levelsSelector="#handbook__levels",this.levelCardsContent=["A1","A2","B1","B2","C1","C2"],this.defaultPage=0,this.defaultCurrPage=1,this.defaultActiveWordCardIndex=0}renderLevelCards(r,e,n){const t=document.querySelector(this.levelsSelector);t.innerHTML="";const i=S();this.levelCardsContent.forEach(((o,a)=>{const s=tr("div","handbook__level-card",o);a===i.group&&(s.classList.add("active-level-card"),document.querySelector("#handbook__words").className=`handbook__words ${this.levelCardsContent[a]}`),s.addEventListener("click",(()=>{const t=document.querySelector(".active-level-card");document.querySelector("#handbook__words").className=`handbook__words ${this.levelCardsContent[a]}`,this.levelCardHandler(t,s,r,a,e,n)})),t.append(s)}))}async levelCardHandler(r,e,n,t,i,o){const[a,s,l]=[document.querySelector(".words-pagination__prev-button"),document.querySelector(".words-pagination__curr-page"),document.querySelector(".words-pagination__next-button")],c=await n.levelCardHandler(r,e,t,this.defaultPage,this.defaultCurrPage,this.defaultActiveWordCardIndex,s,a,l);i.renderWordCards(c,n,q.handbook),o.renderWordCardInfo(c[this.defaultActiveWordCardIndex],n,q.handbook)}}function sr(r,e){const[n,t,i,o,a,s]=[document.querySelector(".active-word-card"),document.querySelectorAll(".handbook__word-card"),document.querySelector(".words-pagination__curr-page"),document.querySelector(".handbook__words"),document.querySelector(".handbook__sprint"),document.querySelector(".handbook__audio-call")];n.classList.add(r),n.classList.remove(e);const l=Array.from(t).every((r=>r.classList.contains("hard"))),c=Array.from(t).every((r=>r.classList.contains("hard")||r.classList.contains("learned")));if(l)return i.classList.remove("all-wrods-learned"),o.classList.remove("page-learned"),a.classList.remove("disabled"),void s.classList.remove("disabled");c&&(i.classList.add("all-words-learned"),o.classList.add("page-learned"),a.classList.add("disabled"),s.classList.add("disabled"))}class lr{constructor(){this.baseURL=i().defaults.baseURL,this.wordCardInfoSelector="#handbook__word-card-info"}async renderWordCardInfo(r,e,n,t){const[i,o,s,l,c]=[document.querySelector(this.wordCardInfoSelector),ir("word-card-info__img",`${this.baseURL}/${r.image}`,"word-image"),tr("button","word-card-info__play-audio-button"),new Audio(`${this.baseURL}/${r.audio}`),{numOfPlays:0}];i.innerHTML="",l.addEventListener("ended",(()=>{e.wordInfoAudioHandler(r,l,c)})),s.addEventListener("click",(()=>l.play()));const A=tr("div","word-card-info__headings");if(A.append(tr("h4","word-card-info__title",r.word),tr("h5","word-card-info__subtitle",r.wordTranslate),tr("h5","word-card-info__transcription",r.transcription)),i.append(o,l,A,s,or("word-card-info__meaning-container","word-card-info__meaning-title","Значение","word-card-info__meaning-ru",r.textMeaning,"word-card-info__meaning-en",r.textMeaningTranslate),or("word-card-info__example-container","word-card-info__example-title","Пример","word-card-info__example-ru",r.textExample,"word-card-info__example-en",r.textExampleTranslate)),a.get()&&"handbook"===n){this.renderCardButtonsAfterAuth(e,r);const n="_id";await this.renderWordStatistic(e,r.id||r[n])}if(a.get()&&"complicatedWords"===n&&t){this.renderRemoveButton(e,r,t);const n="_id";await this.renderWordStatistic(e,r.id||r[n])}}renderCardButtonsAfterAuth(r,e){const n=document.querySelector(this.wordCardInfoSelector),t=tr("button","word-card-info__complicated-words-button","В сложные слова");t.addEventListener("click",(()=>{r.complicatedWordsButtonHandler(e.id,s.hard),sr("hard","learned")}));const i=tr("button","word-card-info__learned-words-button","В изученные слова");i.addEventListener("click",(()=>{r.learnedWordsButtonHandler(e.id,s.learned),sr("learned","hard")}));const o=tr("div","word-card-info__buttons");o.append(t,i),n.append(o)}renderRemoveButton(r,e,n){const t=document.querySelector(this.wordCardInfoSelector),i=tr("button","word-card-info__remove-button","Удалить из сложных слов");i.addEventListener("click",(async()=>{const t=document.querySelector(".handbook__word-cards").children.length,i=document.querySelector("#handbook__levels");r.removeCardButtonHandler(e,n,t,i)})),t.append(i)}async renderWordStatistic(r,e){const n=await r.getWordStatistic(e),t=document.querySelector(this.wordCardInfoSelector),i=tr("div","word-card-info__statistic"),o=(null==n?void 0:n.optional.games.sprint)||{right:0,wrong:0},a=(null==n?void 0:n.optional.games.audiocall)||{right:0,wrong:0},s=`\n    <div id='sprint-statistic'>\n      <h4 class="sprint-statistic__title">Спринт</h4>\n        <ul>\n          <li>Верно: ${o.right}</li>\n          <li>Неверно: ${o.wrong}</li>\n        </ul>\n      </div>\n    `,l=`\n    <div id='audio-call-statistic'>\n      <h4 class="audio-call-statistic__title">Аудиовызов</h4>\n        <ul>\n          <li>Верно: ${a.right}</li>\n          <li>Неверно: ${a.wrong}</li>\n        </ul>\n      </div>\n    `;i.insertAdjacentHTML("afterbegin",s),i.insertAdjacentHTML("afterbegin",l),t.append(i)}}class cr{constructor(){this.wordsSelector="#handbook__word-cards",this.wordCardInfo=new lr}async renderWordCards(r,e,n,t){const i=document.querySelector(this.wordsSelector),o=a.get()?(await e.getUserWords()).data:null;i.innerHTML="";const s=await Promise.all(function(r){return r.sort(((r,e)=>r.group===e.group?r.page-e.page:r.group-e.page))}(r).map(((r,a)=>this.createCard(r,i,o,e,a,n,t))));!function(r){const[e,n,t,i]=[document.querySelector(".words-pagination__curr-page"),document.querySelector(".handbook__words"),document.querySelector(".handbook__sprint"),document.querySelector(".handbook__audio-call")],o=r.every((r=>r.classList.contains("hard"))),a=r.every((r=>r.classList.contains("hard")||r.classList.contains("learned")));if(o)return n.classList.remove("page-learned"),t.classList.remove("disabled"),void i.classList.remove("disabled");a?(e.classList.add("all-words-learned"),n.classList.add("page-learned"),t.classList.add("disabled"),i.classList.add("disabled")):(e.classList.remove("all-words-learned"),n.classList.remove("page-learned"),t.classList.remove("disabled"),i.classList.remove("disabled"))}(s),s[("handbook"===n?S():I()).activeWordCardIndex].classList.add("active-word-card")}async createCard(r,e,n,t,i,o,a){const s=tr("div","handbook__word-card");s.append(tr("h5","handbook__card-title",r.word),tr("h6","handbook__card-subtitle",r.wordTranslate)),e.append(s);const l="id"in r?r.id:r._id;return n&&n.forEach((r=>{r.wordId===l&&s.classList.add(r.difficulty)})),s.addEventListener("click",(async()=>{const r=document.querySelector(".active-word-card");t.wordCardHandler(s,r,i,o),this.wordCardInfo.renderWordCardInfo((await t.getWordWithAssetsById(l)).data,t,o,a)})),s}}function Ar(r,e,n){e===n&&(r.disabled=!0)}class dr{constructor(r){this.levelCards=new ar,this.wordCards=new cr,this.wordCardInfo=new lr,this.startView=r}renderHandbook(r,e,n){const t=document.querySelector("#main");if(t.innerHTML="",t.insertAdjacentHTML("beforeend",'\n    <section id="handbook" class="handbook">\n      <div class="handbook__views">\n        <h4 id="handbook__title" class="handbook__title">Учебник</h4>\n      </div>\n      <div id="handbook__levels" class="handbook__levels">\n      </div>\n      <div id="handbook__games" class="handbook__games">\n        <h4 class="handbook__games-title">Игры</h4>\n        <div id="handbook__audio-call" class="handbook__audio-call">\n          <h5 class="handbook__game-title">Аудиовызов</h5>\n        </div>\n        <div id="handbook__sprint" class="handbook__sprint">\n          <h5 class="handbook__game-title">Спринт</h5>\n        </div>\n      </div>\n      <div id="handbook__words" class="handbook__words">\n        <h4 class="handbook__words-title">Слова</h4>\n        <div id="handbook__word-cards" class="handbook__word-cards">\n        </div>\n        <div id="handbook__word-card-info" class="handbook__word-card-info word-card-info">\n        </div>\n        <div id="handbook__words-pagination" class="handbook__words-pagination words-pagination">\n        </div>\n      </div>\n    </div>'),a.get()&&this.renderComplicatedWordsCard(n),localStorage.getItem(E)){this.complicatedWordsCardHandler(document.querySelector("#handbook__levels"),n);const r=document.querySelector(".handbook__complicated-words-title"),e=document.querySelector("#handbook__words");r.classList.add("active-handbook-page"),e.classList.add("complicated-words")}else this.levelCards.renderLevelCards(n,this.wordCards,this.wordCardInfo),this.wordCards.renderWordCards(r,n,q.handbook),this.wordCardInfo.renderWordCardInfo(e,n,q.handbook),this.handlePaginationButtons(n,1,30,q.handbook),document.querySelector("#handbook__title").classList.add("active-handbook-page");a.get()&&this.handbookTitleHandler(n);const i=document.querySelector("#handbook__audio-call"),o=document.querySelector("#handbook__sprint");null==o||o.addEventListener("click",(()=>{const r=S();new H({level:r.group,page:r.page},this.startView).render()})),null==i||i.addEventListener("click",(()=>{const r=S();new nr({level:r.group,page:r.page},this.startView).render()}))}handbookTitleHandler(r){const e=document.querySelector("#handbook__title");e.addEventListener("click",(async()=>{document.querySelector("#handbook__words").classList.remove("complicated-words"),document.querySelector(".handbook__complicated-words-title").classList.remove("active-handbook-page"),e.classList.add("active-handbook-page"),localStorage.removeItem(E);const n=S(),t=(await r.getChunkOfWords(n.group,n.page)).data;this.levelCards.renderLevelCards(r,this.wordCards,this.wordCardInfo),this.wordCards.renderWordCards(t,r,q.handbook),this.wordCardInfo.renderWordCardInfo(t[n.activeWordCardIndex],r,q.handbook),this.handlePaginationButtons(r,1,30,q.handbook)}))}handlePaginationButtons(r,e,n,t){!function(){const r=document.querySelector("#handbook__words-pagination");r.innerHTML="",r.append(tr("button","words-pagination__prev-button"),tr("div","words-pagination__curr-page"),tr("button","words-pagination__next-button"))}();const i="handbook"===t?S():I(),[o,a,s,l]=[document.querySelector(".words-pagination__prev-button"),document.querySelector(".words-pagination__curr-page"),document.querySelector(".words-pagination__next-button"),1];a.textContent=`${i.currPage}`,Ar(o,i.currPage,e),Ar(s,i.currPage,n),o.addEventListener("click",(()=>{this.paginationButtonHandler(r,o,s,-l,a,e,t)})),s.addEventListener("click",(()=>{this.paginationButtonHandler(r,s,o,l,a,n,t)}))}async paginationButtonHandler(r,e,n,t,i,o,a){const[s,l]=[await r.wordsPaginationButtonHandler(e,n,+t,i,o,a),0];this.wordCards.renderWordCards(s,r,a,"complicatedWords"===a?this.complicatedWordsCardHandler.bind(this):void 0),this.wordCardInfo.renderWordCardInfo(s[l],r,a,"complicatedWords"===a?this.complicatedWordsCardHandler.bind(this):void 0)}async renderComplicatedWordsCard(r){const e=document.querySelector("#handbook__title"),n=document.querySelector("#handbook__levels"),t=tr("h4","handbook__complicated-words-title","Сложные слова");t.addEventListener("click",(()=>{this.complicatedWordsCardHandler(n,r),t.classList.add("active-handbook-page"),document.querySelector("#handbook__words").classList.add("complicated-words")})),e.after(t)}async complicatedWordsCardHandler(r,e){document.querySelector("#handbook__title").classList.remove("active-handbook-page"),localStorage.setItem(E,JSON.stringify(!0));const n=r;I()||L(0,1,0);const t=I(),i=(await e.getAllUserAggregatedHardWords(t.page)).data[0],{paginatedResults:o,totalCount:a}=i;n.innerHTML="",this.renderComplicatedWordsContent(a[0],o,e,t.activeWordCardIndex,this.complicatedWordsCardHandler.bind(this));const s=a[0]?Math.ceil(a[0].count/20):1;this.handlePaginationButtons(e,1,s,q.complicatedWords)}renderComplicatedWordsContent(r,e,n,t,i){if(r)this.wordCards.renderWordCards(e,n,q.complicatedWords,i),this.wordCardInfo.renderWordCardInfo(e[t],n,q.complicatedWords,i);else{const[r,e]=[document.querySelector("#handbook__word-cards"),document.querySelector("#handbook__word-card-info")];r.innerHTML="Для вас нет сложных слов",e.innerHTML=""}}}class ur{constructor(r){this.handbook=new dr(this),this.getViewData=r}async render(){var r;null===(r=document.querySelector(".footer"))||void 0===r||r.classList.remove("hidden");const{wordData:e,wordsData:n,handbookController:t}=await this.getViewData();this.handbook.renderHandbook(n,e,t)}}class pr{constructor(){this.content=document.querySelector("#main")}render(){this.content.innerHTML=v.sections.join("");const r=(new Y).getCurrentUserStatistics(),e=document.querySelector("#statistics-newwords"),n=document.querySelector("#statistics-percent"),t=document.querySelector("#statistics-learnt"),i=document.querySelector("#sprint-learnt"),o=document.querySelector("#sprint-right-answers"),c=document.querySelector("#sprint-longest-serie"),A=document.querySelector("#audiocall-learnt"),d=document.querySelector("#audiocall-right-answers"),u=document.querySelector("#audiocall-longest-serie"),p=document.querySelector(".statistics__today");if(a.get()){const r=new Date;let e=0;l.getUserWords().then((n=>{const i=n.data.filter((r=>r.difficulty===s.learned)).filter((e=>{const n=new Date(e.optional.addTime);return r.getFullYear()===n.getFullYear()&&r.getMonth()===n.getMonth()&&r.getDate()===n.getDate()}));e=i.length,t.innerText=e.toString()}))}else p.classList.add("hide-learnt");return e.innerText=r.allGamesRight.toString(),n.innerText=r.allGamesRightPercent.toString(),i.innerText=r.games.sprint.right.toString(),o.innerText=r.games.sprint.rightPercent.toString(),c.innerText=r.games.sprint.bestSerie.toString(),A.innerText=r.games.audiocall.right.toString(),d.innerText=r.games.audiocall.rightPercent.toString(),u.innerText=r.games.audiocall.bestSerie.toString(),Promise.resolve()}}function hr(r){const e=document.querySelector(".footer"),n=document.querySelector(".wrapper");r?(e.classList.add("hidden"),n.classList.add("hide-footer")):(e.classList.remove("hidden"),n.classList.remove("hide-footer"))}function Cr(r){const e=document.querySelector(".header__list");(null==e?void 0:e.querySelectorAll(".menu__item-link")).forEach((e=>{e.classList.remove("selected"),e.id===r&&e.classList.add("selected")}))}var gr=n(3379),fr=n.n(gr),mr=n(7795),_r=n.n(mr),wr=n(569),Br=n.n(wr),br=n(3565),vr=n.n(br),xr=n(9216),yr=n.n(xr),kr=n(4589),Er=n.n(kr),Sr=n(7192),Dr={};Dr.styleTagTransform=Er(),Dr.setAttributes=vr(),Dr.insert=Br().bind(null,"head"),Dr.domAPI=_r(),Dr.insertStyleElement=yr(),fr()(Sr.Z,Dr),Sr.Z&&Sr.Z.locals&&Sr.Z.locals,(new class{constructor(){this.appView=new x,this.authEventHandlers=new h((()=>this.appView.render())),this.authorizationController=new c(l,a),this.handbookController=new j}start(){const r=document.querySelector("#singin-btn"),n=document.querySelector("#log-out-btn"),t=document.querySelector(".blackout");window.addEventListener("load",(async()=>{await this.authorizationController.getNewToken();const e=document.querySelector("body"),t=document.querySelector("#main-page");null==e||e.classList.remove("body_hidden"),t.classList.add("selected"),this.appView=new x,this.appView.render(),localStorage.getItem("user")&&(null==r||r.classList.add("btn_hidden"),null==n||n.classList.remove("btn_hidden"))})),window.addEventListener("storage",(()=>{localStorage.getItem("user")||(this.appView.render(),null==r||r.classList.remove("btn_hidden"),null==n||n.classList.add("btn_hidden"))})),t&&e&&(null==r||r.addEventListener("click",(()=>this.authEventHandlers.renderAuthModal(t,e)))),r&&(null==n||n.addEventListener("click",(()=>{this.authorizationController.logOutUser(),null==r||r.classList.remove("btn_hidden"),null==n||n.classList.add("btn_hidden"),this.appView.render()})));const i=document.querySelector("#main-page");null==i||i.addEventListener("click",(r=>{Cr(r.target.id),this.mainLinkHandler()}));const o=document.querySelector("#handbook-page");null==o||o.addEventListener("click",(r=>{Cr(r.target.id),this.handbookLinkHandler()}));const a=document.querySelector("#games-page");null==a||a.addEventListener("click",(r=>{Cr(r.target.id),this.gameSelectorLinkHandler()}));const s=document.querySelector("#stat-page");null==s||s.addEventListener("click",(r=>{Cr(r.target.id),this.statisticsLinkHandler()}))}async handbookLinkHandler(){const r=this.handbookController;this.appView=new ur((async()=>{const{wordsData:e,rsLangHandbookData:n}=await r.handbookButtonHandler();return{wordsData:e,handbookController:r,wordData:e[n.activeWordCardIndex]}})),this.appView.render(),hr(!1)}gameSelectorLinkHandler(){this.appView=new K,this.appView.render(),hr(!0)}mainLinkHandler(){this.appView=new x,this.appView.render(),hr(!1)}statisticsLinkHandler(){this.appView=new pr,this.appView.render(),hr(!1)}}).start()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,